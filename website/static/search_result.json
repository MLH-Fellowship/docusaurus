[{"url":"docs/blog","dataNodes":{"h1":[{"type":"h1","anchor":"initial-setup","body":"Blog","heading":"Blog"}],"h2":[{"type":"h2","anchor":"initial-setup","body":"Initial setup","heading":"Blog"},{"type":"h2","anchor":"adding-posts","body":"Adding posts","heading":"Blog"},{"type":"h2","anchor":"header-options","body":"Header options","heading":"Blog"},{"type":"h2","anchor":"summary-truncation","body":"Summary truncation","heading":"Blog"},{"type":"h2","anchor":"feed","body":"Feed","heading":"Blog"},{"type":"h2","anchor":"advanced-topics","body":"Advanced topics","heading":"Blog"}],"p":[{"type":"p","anchor":"initial-setup","body":"To setup your site's blog, start by creating a blog directory.","heading":"Blog"},{"type":"p","anchor":"initial-setup","body":"Then, add a item link to your blog within docusaurus.config.js:","heading":"Blog"},{"type":"p","anchor":"adding-posts","body":"To publish in the blog, create a file within the blog directory with a formatted name of YYYY-MM-DD-my-blog-post-title.md. The post date is extracted from the file name.","heading":"Blog"},{"type":"p","anchor":"adding-posts","body":"For example, at my-website/blog/2019-09-05-hello-docusaurus-v2.md:","heading":"Blog"},{"type":"p","anchor":"header-options","body":"The only required field is title; however, we provide options to add author information to your blog post as well along with other options.","heading":"Blog"},{"type":"p","anchor":"summary-truncation","body":"Use the <!--truncate--> marker in your blog post to represent what will be shown as the summary when viewing all published blog posts. Anything above <!--truncate--> will be part of the summary. For example:","heading":"Blog"},{"type":"p","anchor":"feed","body":"You can generate RSS/ Atom feed by passing feedOptions.","heading":"Blog"},{"type":"p","anchor":"feed","body":"Example usage:","heading":"Blog"},{"type":"p","anchor":"feed","body":"Accessing the feed:","heading":"Blog"},{"type":"p","anchor":"feed","body":"The feed for RSS can be found at:","heading":"Blog"},{"type":"p","anchor":"feed","body":"and for Atom:","heading":"Blog"},{"type":"p","anchor":"blog-only-mode","body":"You can run your Docusaurus 2 site without a landing page and instead have your blog's post list page as the index page. Set the routeBasePath to be '/' to indicate it's the root path.","heading":"Blog"},{"type":"p","anchor":"blog-only-mode","body":"Don't forget to delete the existing homepage at ./src/pages/index.js or else there will be two files mapping to the same route!","heading":"Blog"},{"type":"p","anchor":"multiple-blogs","body":"By default, the classic theme assumes only one blog per website and hence includes only one instance of the blog plugin. If you would like to have multiple blogs on a single website, it's possible too! You can add another blog by specifying another blog plugin in the plugins option for docusaurus.config.js.","heading":"Blog"},{"type":"p","anchor":"multiple-blogs","body":"Set the routeBasePath to the URL route that you want your second blog to be accessed on. Note that the routeBasePath here has to be different from the first blog or else there could be a collision of paths! Also, set path to the path to the directory containing your second blog's entries.","heading":"Blog"}],"h3":[{"type":"h3","anchor":"blog-only-mode","body":"Blog-only mode","heading":"Blog"},{"type":"h3","anchor":"multiple-blogs","body":"Multiple blogs","heading":"Blog"}]}},{"url":"docs/cli","dataNodes":{"h1":[{"type":"h1","anchor":"docusaurus-cli-commands","body":"CLI","heading":"CLI"}],"p":[{"type":"p","anchor":"docusaurus-cli-commands","body":"Docusaurus provides a set of scripts to help you generate, serve, and deploy your website.","heading":"CLI"},{"type":"p","anchor":"docusaurus-cli-commands","body":"Once your website is bootstrapped, the website source will contain the Docusaurus scripts that you can invoke with your package manager:","heading":"CLI"},{"type":"p","anchor":"docusaurus-cli-commands","body":"Below is a list of Docusaurus CLI commands and their usages:","heading":"CLI"},{"type":"p","anchor":"docusaurus-start","body":"Builds and serves a preview of your site locally with Webpack Dev Server.","heading":"CLI"},{"type":"p","anchor":"options","body":"Please note that some functionality (for example, anchor links) will not work in development. The functionality will work as expected in production.","heading":"CLI"},{"type":"p","anchor":"docusaurus-build","body":"Compiles your site for production.","heading":"CLI"},{"type":"p","anchor":"docusaurus-swizzle","body":"We highly discourage swizzling of components until we've reached a Beta stage. The components APIs have been changing rapidly and are likely to keep changing until we reach Beta. Stick with the default appearance for now if possible to save yourself some potential pain in future.","heading":"CLI"},{"type":"p","anchor":"docusaurus-swizzle","body":"Change any Docusaurus theme components to your liking with docusaurus swizzle.","heading":"CLI"},{"type":"p","anchor":"docusaurus-swizzle","body":"Running the command will copy the relevant theme files to your site folder. You may then make any changes to it and Docusaurus will use it instead of the one provided from the theme.","heading":"CLI"},{"type":"p","anchor":"options-2","body":"To unswizzle a component, simply delete the files of the swizzled component.","heading":"CLI"},{"type":"p","anchor":"docusaurus-deploy","body":"Deploys your site with GitHub Pages. Check out the docs on deployment for more details.","heading":"CLI"},{"type":"p","anchor":"docusaurus-serve","body":"Serve your built website localy.","heading":"CLI"}],"h2":[{"type":"h2","anchor":"docusaurus-cli-commands","body":"Docusaurus CLI commands","heading":"CLI"}],"h3":[{"type":"h3","anchor":"docusaurus-start","body":"docusaurus start","heading":"CLI"},{"type":"h3","anchor":"docusaurus-build","body":"docusaurus build","heading":"CLI"},{"type":"h3","anchor":"docusaurus-swizzle","body":"docusaurus swizzle","heading":"CLI"},{"type":"h3","anchor":"docusaurus-deploy","body":"docusaurus deploy","heading":"CLI"},{"type":"h3","anchor":"docusaurus-serve","body":"docusaurus serve","heading":"CLI"}]}},{"url":"docs/configuration","dataNodes":{"h1":[{"type":"h1","anchor":"what-goes-into-a-docusaurusconfigjs","body":"Configuration","heading":"Configuration"}],"p":[{"type":"p","anchor":"what-goes-into-a-docusaurusconfigjs","body":"Docusaurus has a unique take on configurations. We encourage you to congregate information of your site into one place. We guard the fields of this file, and facilitate making this data object accessible across your site.","heading":"Configuration"},{"type":"p","anchor":"what-goes-into-a-docusaurusconfigjs","body":"Keeping a well-maintained docusaurus.config.js helps you, your collaborators, and your open source contributors be able to focus on documentation while still being able to customize the site.","heading":"Configuration"},{"type":"p","anchor":"what-goes-into-a-docusaurusconfigjs","body":"You should not have to write your docusaurus.config.js from scratch even if you are developing your site. All templates come with a docusaurus.config.js that includes defaults for the common options.","heading":"Configuration"},{"type":"p","anchor":"what-goes-into-a-docusaurusconfigjs","body":"However, it can be helpful if you have a high-level understanding of how the configurations are designed and implemented.","heading":"Configuration"},{"type":"p","anchor":"what-goes-into-a-docusaurusconfigjs","body":"The high-level overview of Docusaurus configuration can be categorized into:","heading":"Configuration"},{"type":"p","anchor":"what-goes-into-a-docusaurusconfigjs","body":"For exact reference to each of the configurable fields, you may refer to docusaurus.config.js API reference.","heading":"Configuration"},{"type":"p","anchor":"site-metadata","body":"Site metadata contains the essential global metadata such as title, url, baseUrl and favicon.","heading":"Configuration"},{"type":"p","anchor":"site-metadata","body":"They are used in a number of places such as your site's title and headings, browser tab icon, social sharing (Facebook, Twitter) information or even to generate the correct path to serve your static files.","heading":"Configuration"},{"type":"p","anchor":"deployment-configurations","body":"Deployment configurations such as projectName and organizationName are used when you deploy your site with the deploy command.","heading":"Configuration"},{"type":"p","anchor":"deployment-configurations","body":"It is recommended to check the deployment docs for more information.","heading":"Configuration"},{"type":"p","anchor":"theme-plugin-and-preset-configurations","body":"List the theme, plugins, and presets for your site in the themes, plugins, and presets fields, respectively. These are typically npm packages:","heading":"Configuration"},{"type":"p","anchor":"theme-plugin-and-preset-configurations","body":"They can also be loaded from local directories:","heading":"Configuration"},{"type":"p","anchor":"theme-plugin-and-preset-configurations","body":"To specify options for a plugin or theme, replace the name of the plugin or theme in the config file with an array containing the name and an options object:","heading":"Configuration"},{"type":"p","anchor":"theme-plugin-and-preset-configurations","body":"To specify options for a plugin or theme that is bundled in a preset, pass the options through the presets field. In this example, docs refers to @docusaurus/plugin-content-docs and theme refers to @docusaurus/theme-classic.","heading":"Configuration"},{"type":"p","anchor":"theme-plugin-and-preset-configurations","body":"For further help configuring themes, plugins, and presets, see Using Themes, Using Plugins, and Using Presets.","heading":"Configuration"},{"type":"p","anchor":"custom-configurations","body":"Docusaurus guards docusaurus.config.js from unknown fields. To add custom fields, define them in customFields.","heading":"Configuration"},{"type":"p","anchor":"custom-configurations","body":"Example:","heading":"Configuration"},{"type":"p","anchor":"accessing-configuration-from-components","body":"Your configuration object will be made available to all the components of your site. And you may access them via React context as siteConfig.","heading":"Configuration"},{"type":"p","anchor":"accessing-configuration-from-components","body":"Basic example:","heading":"Configuration"},{"type":"p","anchor":"accessing-configuration-from-components","body":"If you just want to use those fields on the client side, you could create your own JS files and import them as ES6 modules, there is no need to put them in docusaurus.config.js.","heading":"Configuration"},{"type":"p","anchor":"customizing-babel-configuration","body":"For new Docusaurus projects, we automatically generated a babel.config.js in project root.","heading":"Configuration"},{"type":"p","anchor":"customizing-babel-configuration","body":"Most of the times, this configuration will work just fine. If you want to customize it, you can directly edit this file to customize babel configuration. For your changes to take effect, you need to restart Docusaurus devserver.","heading":"Configuration"}],"h2":[{"type":"h2","anchor":"what-goes-into-a-docusaurusconfigjs","body":"What goes into a docusaurus.config.js?","heading":"Configuration"},{"type":"h2","anchor":"accessing-configuration-from-components","body":"Accessing configuration from components","heading":"Configuration"},{"type":"h2","anchor":"customizing-babel-configuration","body":"Customizing Babel Configuration","heading":"Configuration"}],"h3":[{"type":"h3","anchor":"site-metadata","body":"Site metadata","heading":"Configuration"},{"type":"h3","anchor":"deployment-configurations","body":"Deployment configurations","heading":"Configuration"},{"type":"h3","anchor":"theme-plugin-and-preset-configurations","body":"Theme, plugin, and preset configurations","heading":"Configuration"},{"type":"h3","anchor":"custom-configurations","body":"Custom configurations","heading":"Configuration"}]}},{"url":"docs/contributing","dataNodes":{"h1":[{"type":"h1","anchor":"code-of-conduct","body":"Contributing","heading":"Contributing"}],"p":[{"type":"p","anchor":"code-of-conduct","body":"Docusaurus 2 is currently under alpha development. We have early adopters who already started using it. We are now welcoming contributors to collaborate on the next Docusaurus.","heading":"Contributing"},{"type":"p","anchor":"code-of-conduct","body":"The Open Source Guides website has a collection of resources for individuals, communities, and companies who want to learn how to run and contribute to an open source project. Contributors and people new to open source alike will find the following guides especially useful:","heading":"Contributing"},{"type":"p","anchor":"code-of-conduct","body":"Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.","heading":"Contributing"},{"type":"p","anchor":"get-involved","body":"There are many ways to contribute to Docusaurus, and many of them do not involve writing any code. Here's a few ideas to get started:","heading":"Contributing"},{"type":"p","anchor":"get-involved","body":"Contributions are very welcome. If you think you need help planning your contribution, please ping us on Twitter at @docusaurus and let us know you are looking for a bit of help.","heading":"Contributing"},{"type":"p","anchor":"join-our-discord-channel","body":"To participate in Docusaurus 2 dev, join the #docusaurus-2-dev channel.","heading":"Contributing"},{"type":"p","anchor":"our-development-process","body":"Docusaurus uses GitHub as its source of truth. The core team will be working directly there. All changes will be public from the beginning.","heading":"Contributing"},{"type":"p","anchor":"our-development-process","body":"When a change made on GitHub is approved, it will be checked by our continuous integration system, CircleCI.","heading":"Contributing"},{"type":"p","anchor":"reporting-new-issues","body":"When opening a new issue, always make sure to fill out the issue template. This step is very important! Not doing so may result in your issue not managed in a timely fashion. Don't take this personally if this happens, and feel free to open a new issue once you've gathered all the information required by the template.","heading":"Contributing"},{"type":"p","anchor":"reporting-bugs","body":"We use GitHub Issues for our public bugs. If you would like to report a problem, take a look around and see if someone already opened an issue about it. If you a are certain this is a new, unreported bug, you can submit a bug report.","heading":"Contributing"},{"type":"p","anchor":"reporting-bugs","body":"If you have questions about using Docusaurus, contact the Docusaurus Twitter account at @docusaurus, and we will do our best to answer your questions.","heading":"Contributing"},{"type":"p","anchor":"reporting-bugs","body":"You can also file issues as feature requests or enhancements. If you see anything you'd like to be implemented, create an issue with feature template","heading":"Contributing"},{"type":"p","anchor":"reporting-security-bugs","body":"Facebook has a bounty program for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.","heading":"Contributing"},{"type":"p","anchor":"semantic-commit-messages","body":"See how a minor change to your commit message style can make you a better programmer.","heading":"Contributing"},{"type":"p","anchor":"semantic-commit-messages","body":"Format: <type>(<scope>): <subject>","heading":"Contributing"},{"type":"p","anchor":"semantic-commit-messages","body":"<scope> is optional","heading":"Contributing"},{"type":"p","anchor":"semantic-commit-messages","body":"Example","heading":"Contributing"},{"type":"p","anchor":"semantic-commit-messages","body":"The various types of commits:","heading":"Contributing"},{"type":"p","anchor":"semantic-commit-messages","body":"Use lower case not title case!","heading":"Contributing"},{"type":"p","anchor":"style-guide","body":"Prettier will catch most styling issues that may exist in your code. You can check the status of your code styling by simply running npm run prettier.","heading":"Contributing"},{"type":"p","anchor":"style-guide","body":"However, there are still some styles that Prettier cannot pick up.","heading":"Contributing"},{"type":"p","anchor":"your-first-pull-request","body":"So you have decided to contribute code back to upstream by opening a pull request. You've invested a good chunk of time, and we appreciate it. We will do our best to work with you and get the PR looked at.","heading":"Contributing"},{"type":"p","anchor":"your-first-pull-request","body":"Working on your first Pull Request? You can learn how from this free video series:","heading":"Contributing"},{"type":"p","anchor":"your-first-pull-request","body":"How to Contribute to an Open Source Project on GitHub","heading":"Contributing"},{"type":"p","anchor":"your-first-pull-request","body":"We have a list of beginner friendly issues to help you get your feet wet in the Docusaurus codebase and familiar with our contribution process. This is a great place to get started.","heading":"Contributing"},{"type":"p","anchor":"proposing-a-change","body":"If you would like to request a new feature or enhancement but are not yet thinking about opening a pull request, you can also file an issue with feature template.","heading":"Contributing"},{"type":"p","anchor":"proposing-a-change","body":"If you intend to change the public API (e.g., something in docusaurus.config.js), or make any non-trivial changes to the implementation, we recommend filing an issue with proposal template and including [Proposal] in the title. This lets us reach an agreement on your proposal before you put significant effort into it. These types of issues should be rare.","heading":"Contributing"},{"type":"p","anchor":"proposing-a-change","body":"If you're only fixing a bug, it's fine to submit a pull request right away but we still recommend to file an issue detailing what you're fixing. This is helpful in case we don't accept that specific fix but want to keep track of the issue.","heading":"Contributing"},{"type":"p","anchor":"sending-a-pull-request","body":"Small pull requests are much easier to review and more likely to get merged. Make sure the PR does only one thing, otherwise please split it. It is recommended to follow this commit message style.","heading":"Contributing"},{"type":"p","anchor":"sending-a-pull-request","body":"Please make sure the following is done when submitting a pull request:","heading":"Contributing"},{"type":"p","anchor":"sending-a-pull-request","body":"All pull requests should be opened against the master branch.","heading":"Contributing"},{"type":"p","anchor":"test-plan","body":"A good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI.","heading":"Contributing"},{"type":"p","anchor":"breaking-changes","body":"When adding a new breaking change, follow this template in your pull request:","heading":"Contributing"},{"type":"p","anchor":"copyright-header-for-source-code","body":"Copy and paste this to the top of your new file(s):","heading":"Contributing"},{"type":"p","anchor":"contributor-license-agreement-cla","body":"In order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you've done this for another Facebook open source project, you're good to go. If you are submitting a pull request for the first time, the Facebook GitHub Bot will reply with a link to the CLA form. You may also complete your CLA here.","heading":"Contributing"},{"type":"p","anchor":"what-happens-next","body":"The core Docusaurus team will be monitoring for pull requests. Do help us by keeping pull requests consistent by following the guidelines above.","heading":"Contributing"},{"type":"p","anchor":"license","body":"By contributing to Docusaurus, you agree that your contributions will be licensed under its MIT license.","heading":"Contributing"}],"h2":[{"type":"h2","anchor":"code-of-conduct","body":"Code of Conduct","heading":"Contributing"},{"type":"h2","anchor":"get-involved","body":"Get involved","heading":"Contributing"},{"type":"h2","anchor":"our-development-process","body":"Our development process","heading":"Contributing"},{"type":"h2","anchor":"working-on-docusaurus-code","body":"Working on Docusaurus code","heading":"Contributing"},{"type":"h2","anchor":"pull-requests","body":"Pull requests","heading":"Contributing"},{"type":"h2","anchor":"license","body":"License","heading":"Contributing"}],"h3":[{"type":"h3","anchor":"join-our-discord-channel","body":"Join our Discord channel","heading":"Contributing"},{"type":"h3","anchor":"reporting-new-issues","body":"Reporting new issues","heading":"Contributing"},{"type":"h3","anchor":"reporting-bugs","body":"Reporting bugs","heading":"Contributing"},{"type":"h3","anchor":"reporting-security-bugs","body":"Reporting security bugs","heading":"Contributing"},{"type":"h3","anchor":"installation","body":"Installation","heading":"Contributing"},{"type":"h3","anchor":"semantic-commit-messages","body":"Semantic commit messages","heading":"Contributing"},{"type":"h3","anchor":"code-conventions","body":"Code conventions","heading":"Contributing"},{"type":"h3","anchor":"your-first-pull-request","body":"Your first pull request","heading":"Contributing"},{"type":"h3","anchor":"proposing-a-change","body":"Proposing a change","heading":"Contributing"},{"type":"h3","anchor":"sending-a-pull-request","body":"Sending a pull request","heading":"Contributing"},{"type":"h3","anchor":"what-happens-next","body":"What happens next?","heading":"Contributing"}]}},{"url":"docs/creating-pages","dataNodes":{"h1":[{"type":"h1","anchor":"adding-a-new-page","body":"Creating Pages","heading":"Creating Pages"}],"p":[{"type":"p","anchor":"adding-a-new-page","body":"In this section, we will learn about creating ad-hoc pages in Docusaurus using React. This is most useful for creating one-off standalone pages like a showcase page, playground page or support page.","heading":"Creating Pages"},{"type":"p","anchor":"adding-a-new-page","body":"The functionality of pages is powered by @docusaurus/plugin-content-pages.","heading":"Creating Pages"},{"type":"p","anchor":"adding-a-new-page","body":"In the /src/pages/ directory, create a file called hello.js with the following contents:","heading":"Creating Pages"},{"type":"p","anchor":"adding-a-new-page","body":"Once you save the file, the development server will automatically reload the changes. Now open http://localhost:3000/hello, you will see the new page you just created.","heading":"Creating Pages"},{"type":"p","anchor":"adding-a-new-page","body":"Each page doesn't come with any styling. You will need to import the Layout component from @theme/Layout and wrap your contents within that component if you want the navbar and/or footer to appear.","heading":"Creating Pages"},{"type":"p","anchor":"adding-a-new-page","body":"You can also create a page in TypeScript, in which case the file name should use the .tsx extension, eg. hello.tsx.","heading":"Creating Pages"},{"type":"p","anchor":"routing","body":"If you are familiar with other static site generators like Jekyll and Next, this routing approach will feel familiar to you. Any JavaScript file you create under /src/pages/ directory will be automatically converted to a website page, following the /src/pages/ directory hierarchy. For example:","heading":"Creating Pages"},{"type":"p","anchor":"routing","body":"In this component-based development era, it is encouraged to co-locate your styling, markup and behavior together into components. Each page is a component, and if you need to customize your page design with your own styles, we recommend co-locating your styles with the page component in its own directory. For example, to create a \"Support\" page, you could do one of the following:","heading":"Creating Pages"},{"type":"p","anchor":"routing","body":"The latter is preferred as it has the benefits of letting you put files related to the page within that directory. For example, a CSS module file (styles.module.css) with styles meant to only be used on the \"Support\" page. Note: this is merely a recommended directory structure and you will still need to manually import the CSS module file within your component module (support/index.js).","heading":"Creating Pages"},{"type":"p","anchor":"routing","body":"All JavaScript/TypeScript files within the src/pages/ directory will have corresponding website paths generated for them. Do not put reusable components or test files (ending with .test.js) into that directory otherwise they will be turned into pages, which might not be intended.","heading":"Creating Pages"},{"type":"p","anchor":"using-react","body":"React is used as the UI library to create pages. Every page component should export a React component and you can leverage on the expressiveness of React to build rich and interactive content.","heading":"Creating Pages"}],"h2":[{"type":"h2","anchor":"adding-a-new-page","body":"Adding a new page","heading":"Creating Pages"},{"type":"h2","anchor":"routing","body":"Routing","heading":"Creating Pages"},{"type":"h2","anchor":"using-react","body":"Using React","heading":"Creating Pages"}]}},{"url":"docs/deployment","dataNodes":{"h1":[{"type":"h1","anchor":"testing-build-local","body":"Deployment","heading":"Deployment"}],"p":[{"type":"p","anchor":"testing-build-local","body":"To build the static files of your website for production, run:","heading":"Deployment"},{"type":"p","anchor":"testing-build-local","body":"Once it finishes, the static files will be generated within the build/ directory.","heading":"Deployment"},{"type":"p","anchor":"testing-build-local","body":"You can deploy your site to static site hosting services such as Vercel, GitHub Pages, Netlify, Render, and Surge. Docusaurus sites are statically rendered so they work without JavaScript too!","heading":"Deployment"},{"type":"p","anchor":"testing-build-local","body":"It is important to test build before deploying to a production. Docusaurus includes a docusaurus serve command to test build localy.","heading":"Deployment"},{"type":"p","anchor":"self-hosting","body":"It is not the most performant solution","heading":"Deployment"},{"type":"p","anchor":"self-hosting","body":"Docusaurus can be self hosted using docusaurus serve. Change port using --port and --host to change host.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-github-pages","body":"Docusaurus provides an easy way to publish to GitHub Pages. Which is hosting that comes for free with every GitHub repository.","heading":"Deployment"},{"type":"p","anchor":"docusaurusconfigjs-settings","body":"First, modify your docusaurus.config.js and add the required params:","heading":"Deployment"},{"type":"p","anchor":"docusaurusconfigjs-settings","body":"In case you want to use your custom domain for GitHub Pages, create a CNAME file in the static directory. Anything within the static directory will be copied to the root of the build directory for deployment.","heading":"Deployment"},{"type":"p","anchor":"docusaurusconfigjs-settings","body":"You may refer to GitHub Pages' documentation User, Organization, and Project Pages for more details.","heading":"Deployment"},{"type":"p","anchor":"docusaurusconfigjs-settings","body":"Example:","heading":"Deployment"},{"type":"p","anchor":"docusaurusconfigjs-settings","body":"By default, GitHub Pages runs published files through Jekyll. Since Jekyll will discard any files that begin with _, it is recommended that you disable Jekyll by adding an empty file named .nojekyll file to your static directory.","heading":"Deployment"},{"type":"p","anchor":"environment-settings","body":"Specify the Git user as an environment variable.","heading":"Deployment"},{"type":"p","anchor":"environment-settings","body":"There are two more optional parameters that are set as environment variables:","heading":"Deployment"},{"type":"p","anchor":"deploy","body":"Finally, to deploy your site to GitHub Pages, run:","heading":"Deployment"},{"type":"p","anchor":"deploy","body":"Bash","heading":"Deployment"},{"type":"p","anchor":"deploy","body":"Windows","heading":"Deployment"},{"type":"p","anchor":"triggering-deployment-with-github-actions","body":"GitHub Actions allow you to automate, customize, and execute your software development workflows right in your repository.","heading":"Deployment"},{"type":"p","anchor":"triggering-deployment-with-github-actions","body":"This workflow assumes your documentation resided in documentation branch of your repository and your publishing source is configured for gh-pages branch.","heading":"Deployment"},{"type":"p","anchor":"triggering-deployment-with-travis-ci","body":"Continuous integration (CI) services are typically used to perform routine tasks whenever new commits are checked in to source control. These tasks can be any combination of running unit tests and integration tests, automating builds, publishing packages to NPM, and deploying changes to your website. All you need to do to automate the deployment of your website is to invoke the yarn deploy script whenever your website is updated. The following section covers how to do just that using Travis CI, a popular continuous integration service provider.","heading":"Deployment"},{"type":"p","anchor":"triggering-deployment-with-travis-ci","body":"Now, whenever a new commit lands in master, Travis CI will run your suite of tests and if everything passes, your website will be deployed via the yarn deploy script.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-netlify","body":"To deploy your Docusaurus 2 sites to Netlify, first make sure the following options are properly configured:","heading":"Deployment"},{"type":"p","anchor":"deploying-to-netlify","body":"Then, create your site with Netlify.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-netlify","body":"While you set up the site, specify the build commands and directories as follows:","heading":"Deployment"},{"type":"p","anchor":"deploying-to-netlify","body":"If you did not configure these build options, you may still go to \"Site settings\" -> \"Build and deploy\" after your site is created.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-netlify","body":"Once properly configured with the above options, your site should deploy and automatically redeploy upon merging to your deploy branch, which defaults to master.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-netlify","body":"Make sure to disable Netlify setting Pretty URLs to prevent lowercased URLs, unnecessary redirects and 404 errors.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-vercel","body":"Deploying your Docusaurus project to Vercel will provide you with various benefits in the areas of performance and ease of use.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-vercel","body":"Most importantly, however, deploying a Docusaurus project only takes a couple of seconds:","heading":"Deployment"},{"type":"p","anchor":"deploying-to-vercel","body":"That's all. Your docs will automatically be deployed.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-vercel","body":"Now you can connect your site to GitHub or GitLab to automatically receive a new deployment every time you push a commit.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-render","body":"Render offers free static site hosting with fully managed SSL, custom domains, a global CDN and continuous auto-deploy from your Git repo. Deploy your app in just a few minutes by following these steps.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-render","body":"Create a new Web Service on Render, and give Render permission to access your Docusaurus repo.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-render","body":"Select the branch to deploy. The default is master.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-render","body":"Enter the following values during creation.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-render","body":"That's it! Your app will be live on your Render URL as soon as the build finishes.","heading":"Deployment"},{"type":"p","anchor":"deploying-to-surge","body":"Surge is a static web hosting platform, it is used to deploy your Docusaurus project from the command line in a minute. Deploying your project to Surge is easy and it is also free (including a custom domain and SSL).","heading":"Deployment"},{"type":"p","anchor":"deploying-to-surge","body":"Deploy your app in a matter of seconds using surge with the following steps:","heading":"Deployment"},{"type":"p","anchor":"deploying-to-surge","body":"First-time users of Surge would be prompted to create an account from the command line(happens only once).","heading":"Deployment"},{"type":"p","anchor":"deploying-to-surge","body":"Confirm that the site you want to publish is in the build directory, a randomly generated subdomain *.surge.sh subdomain is always given(which can be edited).","heading":"Deployment"},{"type":"p","anchor":"using-your-domain","body":"If you have a domain name you can deploy your site using surge to your domain using the command:","heading":"Deployment"},{"type":"p","anchor":"using-your-domain","body":"Your site is now deployed for free at subdomain.surge.sh or yourdomain.com depending on the method you chose.","heading":"Deployment"},{"type":"p","anchor":"setting-up-cname-file","body":"Store your domain in a CNAME file for future deployments with the following command:","heading":"Deployment"},{"type":"p","anchor":"setting-up-cname-file","body":"You can deploy any other changes in the future with the command surge.","heading":"Deployment"}],"h2":[{"type":"h2","anchor":"testing-build-local","body":"Testing Build Local","heading":"Deployment"},{"type":"h2","anchor":"self-hosting","body":"Self Hosting","heading":"Deployment"},{"type":"h2","anchor":"deploying-to-github-pages","body":"Deploying to GitHub Pages","heading":"Deployment"},{"type":"h2","anchor":"deploying-to-netlify","body":"Deploying to Netlify","heading":"Deployment"},{"type":"h2","anchor":"deploying-to-vercel","body":"Deploying to Vercel","heading":"Deployment"},{"type":"h2","anchor":"deploying-to-render","body":"Deploying to Render","heading":"Deployment"},{"type":"h2","anchor":"deploying-to-surge","body":"Deploying to Surge","heading":"Deployment"}],"h3":[{"type":"h3","anchor":"docusaurusconfigjs-settings","body":"docusaurus.config.js settings","heading":"Deployment"},{"type":"h3","anchor":"environment-settings","body":"Environment settings","heading":"Deployment"},{"type":"h3","anchor":"deploy","body":"Deploy","heading":"Deployment"},{"type":"h3","anchor":"triggering-deployment-with-github-actions","body":"Triggering deployment with GitHub Actions","heading":"Deployment"},{"type":"h3","anchor":"triggering-deployment-with-travis-ci","body":"Triggering deployment with Travis CI","heading":"Deployment"},{"type":"h3","anchor":"using-azure-pipelines","body":"Using Azure Pipelines","heading":"Deployment"},{"type":"h3","anchor":"using-your-domain","body":"Using your domain","heading":"Deployment"},{"type":"h3","anchor":"setting-up-cname-file","body":"Setting up CNAME file","heading":"Deployment"}]}},{"url":"docs/design-principles","dataNodes":{"h1":[{"type":"h1","anchor":"how-docusaurus-works","body":"Design Principles","heading":"Design Principles"}],"p":[{"type":"p","anchor":"how-docusaurus-works","body":"This section is a work in progress.","heading":"Design Principles"},{"type":"p","anchor":"how-docusaurus-works","body":"We believe that as developers, knowing how a library works is helpful in allowing us to become better at using it. Hence we're dedicating effort into explaining the architecture and various components of Docusaurus with the hope that users reading it will gain a deeper understanding of the tool and be even more proficient in using it.","heading":"Design Principles"}],"h2":[{"type":"h2","anchor":"how-docusaurus-works","body":"How Docusaurus works","heading":"Design Principles"}]}},{"url":"docs/docs-introduction","dataNodes":{"h1":[{"type":"h1","anchor":"document-id","body":"Docs Introduction","heading":"Docs Introduction"}],"p":[{"type":"p","anchor":"document-id","body":"The docs feature provides users with a way to organize Markdown files in a hierarchical format.","heading":"Docs Introduction"},{"type":"p","anchor":"document-id","body":"Every document has a unique id. By default, a document id is the name of the document (without the extension) relative to the root docs directory.","heading":"Docs Introduction"},{"type":"p","anchor":"document-id","body":"For example, greeting.md id is greeting and guide/hello.md id is guide/hello.","heading":"Docs Introduction"},{"type":"p","anchor":"document-id","body":"However, the last part of the id can be defined by user in the front matter. For example, if guide/hello.md's content is defined as below, its final id is guide/part1.","heading":"Docs Introduction"},{"type":"p","anchor":"document-id","body":"If you want more control over the last part of the document URL, it is possible to add a slug (defaults to the id).","heading":"Docs Introduction"},{"type":"p","anchor":"home-page-docs","body":"Using the homePageId property, you can create a home page of your docs. To do this, you can create a new document, especially for this purpose with the id as _index, or you could specify an existing document id.","heading":"Docs Introduction"},{"type":"p","anchor":"home-page-docs","body":"Given the example above, now when you navigate to the path /docs you will see that the document content with id is getting-started. This functionality also works for docs with versioning enabled. Importantly, with document serves as home docs page, it will not be available at its URL. Following the example above, this means that the docs/getting-started URL will be lead to a 404 error.","heading":"Docs Introduction"},{"type":"p","anchor":"home-page-docs","body":"The document id of _index is reserved exclusively for the home doc page, so it will not work as a standalone route. If left to the default, the page will not show a sidebar. If you wish to have a sidebar for this page, specify the document id that is listed in the sidebar file.","heading":"Docs Introduction"},{"type":"p","anchor":"home-page-docs","body":"The page docs that you created (eg. src/pages/docs.js) will take precedence over the route generated via the homePageId option.","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar","body":"To generate a sidebar to your Docusaurus site, you need to define a file that exports a sidebar object and pass that into the @docusaurus/plugin-docs plugin directly or via @docusaurus/preset-classic.","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar-object","body":"A sidebar object is defined like this:","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar-object","body":"Below is an example of a sidebar object. The key docs is the id of the sidebar (can be renamed to something else) and Getting Started is a category within the sidebar. greeting and doc1 are both sidebar item.","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar-object","body":"Keep in mind that EcmaScript does not guarantee Object.keys({a,b}) === ['a','b'] (yet, this is generally true). If you don't want to rely on iteration order of JavaScript object keys for the category name, the following sidebar object is also equivalent of the above shorthand syntax.","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar-object","body":"You can also have multiple sidebars for different Markdown files by adding more top-level keys to the exported object.","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar-object","body":"Example:","heading":"Docs Introduction"},{"type":"p","anchor":"sidebar-item","body":"As the name implies, SidebarItem is an item defined in a Sidebar. There are a few types we support:","heading":"Docs Introduction"},{"type":"p","anchor":"doc","body":"Sidebar item type that links to a doc page. Example:","heading":"Docs Introduction"},{"type":"p","anchor":"doc","body":"Using just the Document ID is perfectly valid as well, the following is equivalent to the above:","heading":"Docs Introduction"},{"type":"p","anchor":"doc","body":"Note that using this type will bind the linked doc to current sidebar, this means that if you access doc1 page, the sidebar displayed will be the sidebar this item is on. For below case, doc1 is bounded to firstSidebar.","heading":"Docs Introduction"},{"type":"p","anchor":"link","body":"Sidebar item type that links to a non-document page. Example:","heading":"Docs Introduction"},{"type":"p","anchor":"ref","body":"Sidebar item type that links to doc without bounding it to the sidebar. Example:","heading":"Docs Introduction"},{"type":"p","anchor":"category","body":"This is used to add hierarchies to the sidebar:","heading":"Docs Introduction"},{"type":"p","anchor":"category","body":"As an example, here's how we created the subcategory for \"Docs\" under \"Guides\" in this site:","heading":"Docs Introduction"},{"type":"p","anchor":"category","body":"Note: it's possible to use the shorthand syntax to create nested categories:","heading":"Docs Introduction"},{"type":"p","anchor":"collapsible-categories","body":"For sites with a sizable amount of content, we support the option to expand/collapse a category to toggle the display of its contents. Categories are collapsible by default. If you want them to be always expanded, set themeConfig.sidebarCollapsible to false:","heading":"Docs Introduction"},{"type":"p","anchor":"expanded-categories-by-default","body":"For docs that have collapsible categories, you may want more fine-grain control over certain categories. If you want specific categories to be always expanded, you can set collapsed to false:","heading":"Docs Introduction"},{"type":"p","anchor":"docs-only-mode","body":"If you only want the documentation feature, you can run your Docusaurus 2 site without a landing page and display your documentation page as the index page instead.","heading":"Docs Introduction"},{"type":"p","anchor":"docs-only-mode","body":"To enable docs-only mode, set the routeBasePath property of the docs object to the root of your site. Also, set the homePageId property to the ID of the document that you wish to show by default.","heading":"Docs Introduction"},{"type":"p","anchor":"docs-only-mode","body":"More details on functionality of home page for docs can be found in appropriate section.","heading":"Docs Introduction"},{"type":"p","anchor":"docs-only-mode","body":"Now, when visiting your site, it will show your initial document instead of a landing page.","heading":"Docs Introduction"},{"type":"p","anchor":"docs-only-mode","body":"You should delete the existing homepage at ./src/pages/index.js, or else there will be two files mapping to the same route!","heading":"Docs Introduction"},{"type":"p","anchor":"docs-only-mode","body":"There's also a \"blog-only mode\" for those who only want to use the blog feature of Docusaurus 2. You can use the same method detailed above. Follow the setup instructions on Blog-only mode.","heading":"Docs Introduction"}],"h2":[{"type":"h2","anchor":"document-id","body":"Document ID","heading":"Docs Introduction"},{"type":"h2","anchor":"home-page-docs","body":"Home page docs","heading":"Docs Introduction"},{"type":"h2","anchor":"sidebar","body":"Sidebar","heading":"Docs Introduction"},{"type":"h2","anchor":"docs-only-mode","body":"Docs-only mode","heading":"Docs Introduction"}],"h3":[{"type":"h3","anchor":"sidebar-object","body":"Sidebar object","heading":"Docs Introduction"}]}},{"url":"docs/docusaurus-core","dataNodes":{"h1":[{"type":"h1","anchor":"components","body":"Docusaurus Client API","heading":"Docusaurus Client API"}],"p":[{"type":"p","anchor":"components","body":"Docusaurus provides some APIs on the clients that can be helpful to you when building your site.","heading":"Docusaurus Client API"},{"type":"p","anchor":"head","body":"This reusable React component will manage all of your changes to the document head. It takes plain HTML tags and outputs plain HTML tags and is beginner-friendly. It is a wrapper around React Helmet.","heading":"Docusaurus Client API"},{"type":"p","anchor":"head","body":"Usage Example:","heading":"Docusaurus Client API"},{"type":"p","anchor":"head","body":"Nested or latter components will override duplicate usages:","heading":"Docusaurus Client API"},{"type":"p","anchor":"head","body":"Outputs","heading":"Docusaurus Client API"},{"type":"p","anchor":"link","body":"This component enables linking to internal pages as well as a powerful performance feature called preloading. Preloading is used to prefetch resources so that the resources are fetched by the time the user navigates with this component. We use an IntersectionObserver to fetch a low-priority request when the <Link> is in the viewport and then use an onMouseOver event to trigger a high-priority request when it is likely that a user will navigate to the requested resource.","heading":"Docusaurus Client API"},{"type":"p","anchor":"link","body":"The component is a wrapper around react-router’s <Link> component that adds useful enhancements specific to Docusaurus. All props are passed through to react-router’s <Link> component.","heading":"Docusaurus Client API"},{"type":"p","anchor":"to-string","body":"The target location to navigate to. Example: /docs/introduction.","heading":"Docusaurus Client API"},{"type":"p","anchor":"redirect","body":"Rendering a <Redirect> will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do. You can refer to React Router's Redirect documentation for more info on available props.","heading":"Docusaurus Client API"},{"type":"p","anchor":"redirect","body":"Example usage:","heading":"Docusaurus Client API"},{"type":"p","anchor":"redirect","body":"@docusaurus/router implements React Router and supports its features.","heading":"Docusaurus Client API"},{"type":"p","anchor":"browseronly","body":"The <BrowserOnly> component accepts a children prop, a render function which will not be executed during the pre-rendering phase of the build process. This is useful for hiding code that is only meant to run in the browsers (e.g. where the window/document objects are being accessed). To improve SEO, you can also provide fallback content using the fallback prop, which will be prerendered until in the build process and replaced with the client-side only contents when viewed in the browser.","heading":"Docusaurus Client API"},{"type":"p","anchor":"usedocusauruscontext","body":"React hook to access Docusaurus Context. Context contains siteConfig object from docusaurus.config.js, and some additional site metadata.","heading":"Docusaurus Client API"},{"type":"p","anchor":"usedocusauruscontext","body":"Usage example:","heading":"Docusaurus Client API"},{"type":"p","anchor":"usebaseurl","body":"React hook to automatically prepend baseUrl to a string automatically. This is particularly useful if you don't want to hardcode your config's baseUrl. We highly recommend you to use this.","heading":"Docusaurus Client API"},{"type":"p","anchor":"usebaseurl","body":"Example usage:","heading":"Docusaurus Client API"},{"type":"p","anchor":"usebaseurlutils","body":"Sometimes useBaseUrl is not good enough. This hook return additional utils related to your site's base url.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useglobaldata","body":"React hook to access Docusaurus global data created by all the plugins.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useglobaldata","body":"Global data is namespaced by plugin name, and plugin id.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useglobaldata","body":"Plugin id is only useful when a plugin is used multiple times on the same site. Each plugin instance is able to create its own global data.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useglobaldata","body":"Usage example:","heading":"Docusaurus Client API"},{"type":"p","anchor":"useglobaldata","body":"Inspect your site's global data at ./docusaurus/globalData.json","heading":"Docusaurus Client API"},{"type":"p","anchor":"useplugindatapluginname-string-pluginid-string","body":"Access global data created by a specific plugin instance.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useplugindatapluginname-string-pluginid-string","body":"This is the most convenient hook to access plugin global data, and should be used most of the time.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useplugindatapluginname-string-pluginid-string","body":"pluginId is optional if you don't use multi-instance plugins.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useplugindatapluginname-string-pluginid-string","body":"Usage example:","heading":"Docusaurus Client API"},{"type":"p","anchor":"useallplugininstancesdatapluginname-string","body":"Access global data created by a specific plugin. Given a plugin name, it returns the data of all the plugins instances of that name, by pluginId.","heading":"Docusaurus Client API"},{"type":"p","anchor":"useallplugininstancesdatapluginname-string","body":"Usage example:","heading":"Docusaurus Client API"},{"type":"p","anchor":"executionenvironment","body":"A module which exposes a few boolean variables to check the current rendering environment. Useful if you want to only run certain code on client/server or need to write server-side rendering compatible code.","heading":"Docusaurus Client API"}],"h2":[{"type":"h2","anchor":"components","body":"Components","heading":"Docusaurus Client API"},{"type":"h2","anchor":"hooks","body":"Hooks","heading":"Docusaurus Client API"},{"type":"h2","anchor":"modules","body":"Modules","heading":"Docusaurus Client API"}],"h3":[{"type":"h3","anchor":"head","body":"<Head/>","heading":"Docusaurus Client API"},{"type":"h3","anchor":"link","body":"<Link/>","heading":"Docusaurus Client API"},{"type":"h3","anchor":"redirect","body":"<Redirect/>","heading":"Docusaurus Client API"},{"type":"h3","anchor":"browseronly","body":"<BrowserOnly/>","heading":"Docusaurus Client API"},{"type":"h3","anchor":"usedocusauruscontext","body":"useDocusaurusContext","heading":"Docusaurus Client API"},{"type":"h3","anchor":"usebaseurl","body":"useBaseUrl","heading":"Docusaurus Client API"},{"type":"h3","anchor":"usebaseurlutils","body":"useBaseUrlUtils","heading":"Docusaurus Client API"},{"type":"h3","anchor":"useglobaldata","body":"useGlobalData()","heading":"Docusaurus Client API"},{"type":"h3","anchor":"useplugindatapluginname-string-pluginid-string","body":"usePluginData(pluginName: string, pluginId?: string)","heading":"Docusaurus Client API"},{"type":"h3","anchor":"useallplugininstancesdatapluginname-string","body":"useAllPluginInstancesData(pluginName: string)","heading":"Docusaurus Client API"},{"type":"h3","anchor":"executionenvironment","body":"ExecutionEnvironment","heading":"Docusaurus Client API"}]}},{"url":"docs/docusaurus.config.js","dataNodes":{"h1":[{"type":"h1","anchor":"overview","body":"docusaurus.config.js","heading":"docusaurus.config.js"}],"h2":[{"type":"h2","anchor":"overview","body":"Overview","heading":"docusaurus.config.js"},{"type":"h2","anchor":"required-fields","body":"Required fields","heading":"docusaurus.config.js"},{"type":"h2","anchor":"optional-fields","body":"Optional fields","heading":"docusaurus.config.js"}],"p":[{"type":"p","anchor":"overview","body":"docusaurus.config.js contains configurations for your site and is placed in the root directory of your site.","heading":"docusaurus.config.js"},{"type":"p","anchor":"title","body":"Title for your website.","heading":"docusaurus.config.js"},{"type":"p","anchor":"favicon","body":"URL for site favicon. Example:","heading":"docusaurus.config.js"},{"type":"p","anchor":"favicon","body":"You can also use the favicon URL relative to the static directory of your site. For example, your site has the following directory structure:","heading":"docusaurus.config.js"},{"type":"p","anchor":"favicon","body":"So you can refer it like below:","heading":"docusaurus.config.js"},{"type":"p","anchor":"url","body":"URL for your website. This can also be considered the top-level hostname. For example, https://facebook.github.io is the URL of https://facebook.github.io/metro/, and https://docusaurus.io is the URL for https://docusaurus.io. This field is related to the baseUrl field.","heading":"docusaurus.config.js"},{"type":"p","anchor":"baseurl","body":"Base URL for your site. This can also be considered the path after the host. For example, /metro/ is the baseUrl of https://facebook.github.io/metro/. For URLs that have no path, the baseUrl should be set to /. This field is related to the url field.","heading":"docusaurus.config.js"},{"type":"p","anchor":"onbrokenlinks","body":"The behavior of Docusaurus, when it detects any broken link.","heading":"docusaurus.config.js"},{"type":"p","anchor":"onbrokenlinks","body":"By default, it throws an error, to ensure you never ship any broken link, but you can lower this security if needed.","heading":"docusaurus.config.js"},{"type":"p","anchor":"onbrokenlinks","body":"The broken links detection is only available for a production build (docusaurus build).","heading":"docusaurus.config.js"},{"type":"p","anchor":"tagline","body":"The tagline for your website.","heading":"docusaurus.config.js"},{"type":"p","anchor":"organizationname","body":"The GitHub user or organization that owns the repository. Used by the deployment command.","heading":"docusaurus.config.js"},{"type":"p","anchor":"projectname","body":"The name of the GitHub repository. Used by the deployment command.","heading":"docusaurus.config.js"},{"type":"p","anchor":"githubhost","body":"The hostname of your server. Useful if you are using GitHub Enterprise.","heading":"docusaurus.config.js"},{"type":"p","anchor":"themeconfig","body":"An object containing data needed by the theme you use.","heading":"docusaurus.config.js"},{"type":"p","anchor":"themeconfig","body":"For Docusaurus' default theme classic, we use themeConfig to customize your navbar and footer links:","heading":"docusaurus.config.js"},{"type":"p","anchor":"themeconfig","body":"Example:","heading":"docusaurus.config.js"},{"type":"p","anchor":"customfields","body":"Docusaurus guards docusaurus.config.js from unknown fields. To add a custom field, define it on customFields.","heading":"docusaurus.config.js"},{"type":"p","anchor":"customfields","body":"Attempting to add unknown field in the config will lead to error in build time:","heading":"docusaurus.config.js"},{"type":"p","anchor":"scripts","body":"An array of scripts to load. The values can be either strings or plain objects of attribute-value maps. The <script> tags will be inserted in the HTML <head>.","heading":"docusaurus.config.js"},{"type":"p","anchor":"scripts","body":"Note that <script> added here are render-blocking so you might want to add async: true/defer: true to the objects.","heading":"docusaurus.config.js"},{"type":"p","anchor":"scripts","body":"Example:","heading":"docusaurus.config.js"},{"type":"p","anchor":"stylesheets","body":"An array of CSS sources to load. The values can be either strings or plain objects of attribute-value maps. The <link> tags will be inserted in the HTML <head>.","heading":"docusaurus.config.js"},{"type":"p","anchor":"stylesheets","body":"Example:","heading":"docusaurus.config.js"}],"h3":[{"type":"h3","anchor":"title","body":"title","heading":"docusaurus.config.js"},{"type":"h3","anchor":"favicon","body":"favicon","heading":"docusaurus.config.js"},{"type":"h3","anchor":"url","body":"url","heading":"docusaurus.config.js"},{"type":"h3","anchor":"baseurl","body":"baseUrl","heading":"docusaurus.config.js"},{"type":"h3","anchor":"onbrokenlinks","body":"onBrokenLinks","heading":"docusaurus.config.js"},{"type":"h3","anchor":"tagline","body":"tagline","heading":"docusaurus.config.js"},{"type":"h3","anchor":"organizationname","body":"organizationName","heading":"docusaurus.config.js"},{"type":"h3","anchor":"projectname","body":"projectName","heading":"docusaurus.config.js"},{"type":"h3","anchor":"githubhost","body":"githubHost","heading":"docusaurus.config.js"},{"type":"h3","anchor":"themeconfig","body":"themeConfig","heading":"docusaurus.config.js"},{"type":"h3","anchor":"plugins","body":"plugins","heading":"docusaurus.config.js"},{"type":"h3","anchor":"themes","body":"themes","heading":"docusaurus.config.js"},{"type":"h3","anchor":"presets","body":"presets","heading":"docusaurus.config.js"},{"type":"h3","anchor":"customfields","body":"customFields","heading":"docusaurus.config.js"},{"type":"h3","anchor":"scripts","body":"scripts","heading":"docusaurus.config.js"},{"type":"h3","anchor":"stylesheets","body":"stylesheets","heading":"docusaurus.config.js"}]}},{"url":"docs/installation","dataNodes":{"h1":[{"type":"h1","anchor":"requirements","body":"Installation","heading":"Installation"}],"p":[{"type":"p","anchor":"requirements","body":"Docusaurus is essentially a set of npm packages that can be installed over npm.","heading":"Installation"},{"type":"p","anchor":"scaffold-project-website","body":"The easiest way to install Docusaurus is to use the command line tool that helps you scaffold a skeleton Docusaurus website. You can run this command anywhere in a new empty repository or within an existing repository, it will create a new directory containing the scaffolded files.","heading":"Installation"},{"type":"p","anchor":"scaffold-project-website","body":"Example:","heading":"Installation"},{"type":"p","anchor":"scaffold-project-website","body":"If you do not specify name or template, it will prompt you for them. We recommend the classic template so that you can get started quickly and it contains features found in Docusaurus 1. The classic template contains @docusaurus/preset-classic which includes standard documentation, a blog, custom pages, and a CSS framework (with dark mode support). You can get up and running extremely quickly with the classic template and customize things later on when you have gained more familiarity with Docusaurus.","heading":"Installation"},{"type":"p","anchor":"scaffold-project-website","body":"[FB-Only]: If you are setting up a new Docusaurus website for a Facebook open source project, use the facebook template instead, which comes with some useful Facebook-specific defaults:","heading":"Installation"},{"type":"p","anchor":"project-structure","body":"Assuming you chose the classic template and named your site my-website, you will see the following files generated under a new directory my-website/:","heading":"Installation"},{"type":"p","anchor":"running-the-development-server","body":"To preview your changes as you edit the files, you can run a local development server that will serve your website and it will reflect the latest changes.","heading":"Installation"},{"type":"p","anchor":"running-the-development-server","body":"By default, a browser window will open at http://localhost:3000.","heading":"Installation"},{"type":"p","anchor":"running-the-development-server","body":"Congratulations! You have just created your first Docusaurus site! Browse around the site to see what's available.","heading":"Installation"},{"type":"p","anchor":"build","body":"Docusaurus is a modern static website generator so we need to build the website into a directory of static contents and put it on a web server so that it can be viewed. To build the website:","heading":"Installation"},{"type":"p","anchor":"build","body":"and contents will be generated within the /build directory, which can be copied to any static file hosting service like GitHub pages, Now or Netlify. Check out the docs on deployment for more details.","heading":"Installation"},{"type":"p","anchor":"updating-your-docusaurus-version","body":"There are many ways to update your Docusaurus version. One guaranteed way is to manually change the version number in package.json to the desired version. Note that all @docusaurus/-namespaced packages should be using the same version.","heading":"Installation"},{"type":"p","anchor":"updating-your-docusaurus-version","body":"Please update to the latest Docusaurus 2 version shown at the top of the page, not what is shown below.","heading":"Installation"},{"type":"p","anchor":"updating-your-docusaurus-version","body":"Then, in the directory containing package.json, run your package manager's install command:","heading":"Installation"},{"type":"p","anchor":"updating-your-docusaurus-version","body":"To check that that the update occurred successfully, run:","heading":"Installation"},{"type":"p","anchor":"updating-your-docusaurus-version","body":"You should see the correct version as output.","heading":"Installation"},{"type":"p","anchor":"updating-your-docusaurus-version","body":"Alternatively, if you are using Yarn, you can do:","heading":"Installation"},{"type":"p","anchor":"problems","body":"Ask for help on Stack Overflow, on our GitHub repository or Twitter.","heading":"Installation"}],"h2":[{"type":"h2","anchor":"requirements","body":"Requirements","heading":"Installation"},{"type":"h2","anchor":"scaffold-project-website","body":"Scaffold project website","heading":"Installation"},{"type":"h2","anchor":"project-structure","body":"Project structure","heading":"Installation"},{"type":"h2","anchor":"running-the-development-server","body":"Running the development server","heading":"Installation"},{"type":"h2","anchor":"build","body":"Build","heading":"Installation"},{"type":"h2","anchor":"updating-your-docusaurus-version","body":"Updating your Docusaurus version","heading":"Installation"},{"type":"h2","anchor":"problems","body":"Problems?","heading":"Installation"}],"h3":[{"type":"h3","anchor":"project-structure-rundown","body":"Project structure rundown","heading":"Installation"}]}},{"url":"docs/lifecycle-apis","dataNodes":{"h1":[{"type":"h1","anchor":"validateoptionsoptionsvalidate","body":"Lifecycle APIs","heading":"Lifecycle APIs"}],"p":[{"type":"p","anchor":"validateoptionsoptionsvalidate","body":"This section is a work in progress.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validateoptionsoptionsvalidate","body":"Lifecycle APIs are shared by Themes and Plugins.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validateoptionsoptionsvalidate","body":"Return validated and normalized options for the plugin. This method is called before the plugin is initialized.You must return options since the returned options will be passed to plugin during intialization.","heading":"Lifecycle APIs"},{"type":"p","anchor":"options","body":"validateOptions is called with options passed to plugin for validation and normalization.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate","body":"validateOptions is called with validate function which takes a Joi schema and options as argument, returns validated and normalized options. validate will automatically handle error and validation config.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate","body":"Joi is recommended for validation and normalization of options.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate","body":"If you don't use Joi for validation you can throw an Error in case of invalid options and return options in case of success.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate","body":"You can also use ES modules style exports.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validatethemeconfigthemeconfigvalidate","body":"Return validated and normalized configuration for the theme.","heading":"Lifecycle APIs"},{"type":"p","anchor":"themeconfig","body":"validateThemeConfig is called with themeConfig provided in docusaurus.config.js for validation and normalization.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate-1","body":"validateThemeConfig is called with validate function which takes a Joi schema and themeConfig as argument, returns validated and normalized options. validate will automatically handle error and validation config.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate-1","body":"Joi is recommended for validation and normalization of theme config.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate-1","body":"If you don't use Joi for validation you can throw an Error in case of invalid options.","heading":"Lifecycle APIs"},{"type":"p","anchor":"validate-1","body":"You can also use ES modules style exports.","heading":"Lifecycle APIs"},{"type":"p","anchor":"getpathstowatch","body":"Specifies the paths to watch for plugins and themes. The paths are watched by the dev server so that the plugin lifecycles are reloaded when contents in the watched paths change. Note that the plugins and themes modules are initially called with context and options from Node, which you may use to find the necessary directory information about the site.","heading":"Lifecycle APIs"},{"type":"p","anchor":"getpathstowatch","body":"Example:","heading":"Lifecycle APIs"},{"type":"p","anchor":"async-loadcontent","body":"Plugins should use this lifecycle to fetch from data sources (filesystem, remote API, headless CMS, etc) or doing some server processing.","heading":"Lifecycle APIs"},{"type":"p","anchor":"async-loadcontent","body":"For example, this plugin below return a random integer between 1 to 10 as content;","heading":"Lifecycle APIs"},{"type":"p","anchor":"async-contentloadedcontent-actions","body":"Plugins should use the data loaded in loadContent and construct the pages/routes that consume the loaded data (optional).","heading":"Lifecycle APIs"},{"type":"p","anchor":"content","body":"contentLoaded will be called after loadContent is done, the return value of loadContent() will be passed to contentLoaded as content.","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"actions contain two functions:","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"Create a route to add to the website.","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"A function to help you create static data (generally json or string), that you can provide to your routes as props.","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"For example, this plugin below create a /friends page which display Your friends are: Yangshun, Sebastien:","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"This function permits to create some global plugin data, that can be read from any page, including the pages created by other plugins, and your theme layout.","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"This data become accessible to your client-side/theme code, through the useGlobalData and usePluginData","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"One this data is created, you can access it with the global data hooks APIs","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"Global data is... global: its size affects the loading time of all pages of your site, so try to keep it small.","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"Prefer createData and page-specific data whenever possible.","heading":"Lifecycle APIs"},{"type":"p","anchor":"actions","body":"For example, this plugin below create a /friends page which display Your friends are: Yangshun, Sebastien:","heading":"Lifecycle APIs"},{"type":"p","anchor":"async-routesloadedroutes","body":"Plugins can modify the routes that were generated by all plugins. routesLoaded is called after contentLoaded hook.","heading":"Lifecycle APIs"},{"type":"p","anchor":"configurewebpackconfig-isserver-utils","body":"Modifies the internal webpack config. If the return value is a JavaScript object, it will be merged into the final config using webpack-merge. If it is a function, it will be called and receive config as the first argument and an isServer flag as the argument argument.","heading":"Lifecycle APIs"},{"type":"p","anchor":"config","body":"configureWebpack is called with config generated according to client/server build. You may treat this as the base config to be merged with.","heading":"Lifecycle APIs"},{"type":"p","anchor":"isserver","body":"configureWebpack will be called both in server build and in client build. The server build receives true and the client build receives false as isServer.","heading":"Lifecycle APIs"},{"type":"p","anchor":"utils","body":"The initial call to configureWebpack also receives a util object consists of three functions:","heading":"Lifecycle APIs"},{"type":"p","anchor":"utils","body":"You may use them to return your webpack configures conditionally.","heading":"Lifecycle APIs"},{"type":"p","anchor":"utils","body":"For example, this plugin below modify the webpack config to transpile .foo file.","heading":"Lifecycle APIs"},{"type":"p","anchor":"merge-strategy","body":"We merge the Webpack configuration parts of plugins into the global Webpack config using webpack-merge.","heading":"Lifecycle APIs"},{"type":"p","anchor":"merge-strategy","body":"It is possible to specify the merge strategy. For example, if you want a webpack rule to be prepended instead of appended:","heading":"Lifecycle APIs"},{"type":"p","anchor":"merge-strategy","body":"Read the webpack-merge strategy doc for more details.","heading":"Lifecycle APIs"},{"type":"p","anchor":"postbuildprops","body":"Called when a (production) build finishes.","heading":"Lifecycle APIs"},{"type":"p","anchor":"postbuildprops","body":"Example:","heading":"Lifecycle APIs"},{"type":"p","anchor":"extendclicli","body":"Register an extra command to enhance the CLI of docusaurus. cli is commander object.","heading":"Lifecycle APIs"},{"type":"p","anchor":"extendclicli","body":"Example:","heading":"Lifecycle APIs"},{"type":"p","anchor":"injecthtmltags","body":"Inject head and/or body HTML tags to Docusaurus generated HTML.","heading":"Lifecycle APIs"},{"type":"p","anchor":"injecthtmltags","body":"Example:","heading":"Lifecycle APIs"},{"type":"p","anchor":"getthemepath","body":"Returns the path to the directory where the theme components can be found. When your users calls swizzle, getThemePath is called and its returned path is used to find your theme components.","heading":"Lifecycle APIs"},{"type":"p","anchor":"getthemepath","body":"If you use the folder directory above, your getThemePath can be:","heading":"Lifecycle APIs"},{"type":"p","anchor":"gettypescriptthemepath","body":"Similar to getThemePath(), it should return the path to the directory where the source code of TypeScript theme components can be found. Theme components under this path will not be resolved by Webpack. Therefore, it is not a replacement of getThemePath(). Instead, this path is purely for swizzling TypeScript theme components.","heading":"Lifecycle APIs"},{"type":"p","anchor":"gettypescriptthemepath","body":"If you want to support TypeScript component swizzling for your theme, you can make the path returned by getTypeScriptThemePath() be your source directory, and make path returned by getThemePath() be the compiled JavaScript output.","heading":"Lifecycle APIs"},{"type":"p","anchor":"gettypescriptthemepath","body":"Example:","heading":"Lifecycle APIs"},{"type":"p","anchor":"getclientmodules","body":"Returns an array of paths to the modules that are to be imported in the client bundle. These modules are imported globally before React even renders the initial UI.","heading":"Lifecycle APIs"},{"type":"p","anchor":"getclientmodules","body":"As an example, to make your theme load a customCss object from options passed in by the user:","heading":"Lifecycle APIs"},{"type":"p","anchor":"example","body":"Here's a mind model for a presumptuous plugin implementation.","heading":"Lifecycle APIs"}],"h2":[{"type":"h2","anchor":"validateoptionsoptionsvalidate","body":"validateOptions({options,validate})","heading":"Lifecycle APIs"},{"type":"h2","anchor":"validatethemeconfigthemeconfigvalidate","body":"validateThemeConfig({themeConfig,validate})","heading":"Lifecycle APIs"},{"type":"h2","anchor":"getpathstowatch","body":"getPathsToWatch()","heading":"Lifecycle APIs"},{"type":"h2","anchor":"async-loadcontent","body":"async loadContent()","heading":"Lifecycle APIs"},{"type":"h2","anchor":"async-contentloadedcontent-actions","body":"async contentLoaded({content, actions})","heading":"Lifecycle APIs"},{"type":"h2","anchor":"async-routesloadedroutes","body":"async routesLoaded(routes)","heading":"Lifecycle APIs"},{"type":"h2","anchor":"configurewebpackconfig-isserver-utils","body":"configureWebpack(config, isServer, utils)","heading":"Lifecycle APIs"},{"type":"h2","anchor":"postbuildprops","body":"postBuild(props)","heading":"Lifecycle APIs"},{"type":"h2","anchor":"extendclicli","body":"extendCli(cli)","heading":"Lifecycle APIs"},{"type":"h2","anchor":"injecthtmltags","body":"injectHtmlTags()","heading":"Lifecycle APIs"},{"type":"h2","anchor":"getthemepath","body":"getThemePath()","heading":"Lifecycle APIs"},{"type":"h2","anchor":"gettypescriptthemepath","body":"getTypeScriptThemePath()","heading":"Lifecycle APIs"},{"type":"h2","anchor":"getclientmodules","body":"getClientModules()","heading":"Lifecycle APIs"},{"type":"h2","anchor":"example","body":"Example","heading":"Lifecycle APIs"}],"h3":[{"type":"h3","anchor":"options","body":"options","heading":"Lifecycle APIs"},{"type":"h3","anchor":"validate","body":"validate","heading":"Lifecycle APIs"},{"type":"h3","anchor":"themeconfig","body":"themeConfig","heading":"Lifecycle APIs"},{"type":"h3","anchor":"validate-1","body":"validate","heading":"Lifecycle APIs"},{"type":"h3","anchor":"content","body":"content","heading":"Lifecycle APIs"},{"type":"h3","anchor":"actions","body":"actions","heading":"Lifecycle APIs"},{"type":"h3","anchor":"config","body":"config","heading":"Lifecycle APIs"},{"type":"h3","anchor":"isserver","body":"isServer","heading":"Lifecycle APIs"},{"type":"h3","anchor":"utils","body":"utils","heading":"Lifecycle APIs"},{"type":"h3","anchor":"merge-strategy","body":"Merge strategy","heading":"Lifecycle APIs"}]}},{"url":"docs/markdown-features","dataNodes":{"h1":[{"type":"h1","anchor":"markdown-headers","body":"Markdown Features","heading":"Markdown Features"}],"p":[{"type":"p","anchor":"markdown-headers","body":"Documentation is one of your product's interfaces with your users. A well-written and well-organized set of docs helps your users understand your product quickly. Our aligned goal here is to help your users find and understand the information they need, as quickly as possible.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"Docusaurus 2 uses modern tooling to help you compose your interactive documentations with ease. You may embed React components, or build live coding blocks where your users may play with the code on the spot. Start sharing your eureka moments with the code your audience cannot walk away from. It is perhaps the most effective way of attracting potential users.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"In this section, we'd like to introduce you to the tools we've picked that we believe will help you build powerful documentation. Let us walk you through with an example.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"All the following content assumes you are using @docusaurus/preset-classic or @docusaurus/plugin-content-docs.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"Markdown is a syntax that enables you to write formatted content in a readable syntax. The standard Markdown syntax is supported and we use MDX as the parsing engine, which can do much more than just parsing Markdown. More on that later.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"Create a markdown file, greeting.md, and place it under the docs directory.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"At the top of the file, specify id and title in the front matter, so that Docusaurus will pick them up correctly when generating your site.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"This will render in the browser as follows:","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"Are you ready to create the documentation site for your open source project?","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"will show up on the table of contents on the upper right","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"So that your users will know what this page is all about without scrolling down or even without reading too much.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"The headers are well-spaced so that the hierarchy is clear.","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"Documents use the following markdown header fields that are enclosed by a line --- on either side:","heading":"Markdown Features"},{"type":"p","anchor":"markdown-headers","body":"Example:","heading":"Markdown Features"},{"type":"p","anchor":"referencing-other-documents","body":"If you want to reference another document file, you could use the name of the document you want to reference. Docusaurus will convert the file path to be the final website path (and remove the .md).","heading":"Markdown Features"},{"type":"p","anchor":"referencing-other-documents","body":"For example, if you are in doc2.md and you want to reference doc1.md and folder/doc3.md:","heading":"Markdown Features"},{"type":"p","anchor":"referencing-other-documents","body":"One benefit of this approach is that the links to external files will still work if you are viewing the file on GitHub.","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"Docusaurus has built-in support for MDX, which allows you to write JSX within your Markdown files and render them as React components.","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"Note 1: While both .md and .mdx files are parsed using MDX, some of the syntax are treated slightly differently. For the most accurate parsing and better editor support, we recommend using the .mdx extension for files containing MDX syntax. Let's rename the previous file to greeting.mdx.","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"Note 2: Since all doc files are parsed using MDX, any HTML is treated as JSX. Therefore, if you need to inline-style a component, follow JSX flavor and provide style objects. This behavior is different from Docusaurus 1. See also Migrating from v1 to v2.","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"Try this block here:","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"Notice how it renders both the markup from your React component and the Markdown syntax:","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"I can write Markdown alongside my JSX!","heading":"Markdown Features"},{"type":"p","anchor":"embedding-react-components-with-mdx","body":"You can also import your own components defined in other files or third-party components installed via npm! Check out the MDX docs to see what other fancy stuff you can do with MDX.","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugins","body":"You can expand the MDX functionalities, using plugins. An MDX plugin is usually a npm package, so you install them like other npm packages using npm. Docusaurus supports both Remark and Rehype plugins that work with MDX.","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugins","body":"First, install your Remark and Rehype plugins.","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugins","body":"For example:","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugins","body":"Next, import the plugins:","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugins","body":"Finally, add them to the @docusaurus/preset-classic options in docusaurus.config.js:","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugin-options","body":"Some plugins can be configured and accept their own options. In that case, use the [plugin, pluginOptions] syntax, like so:","heading":"Markdown Features"},{"type":"p","anchor":"configuring-plugin-options","body":"See more information in the MDX documentation.","heading":"Markdown Features"},{"type":"p","anchor":"tabs","body":"To show tabbed content within Markdown files, you can fall back on MDX. Docusaurus provides <Tabs> components out-of-the-box.","heading":"Markdown Features"},{"type":"p","anchor":"tabs","body":"will result in","heading":"Markdown Features"},{"type":"p","anchor":"syncing-tab-choices","body":"You may want choices of the same kind of tabs to sync with each other. For example, you might want to provide different instructions for users on Windows vs users on macOS, and you want to changing all OS-specific instructions tabs in one click. To achieve that, you can give all related tabs the same groupId prop. Note that doing this will persist the choice in localStorage and all <Tab> instances with the same groupId will update automatically when the value of one of them is changed. Not that groupID are globally-namespaced.","heading":"Markdown Features"},{"type":"p","anchor":"syncing-tab-choices","body":"For all tab groups that have the same groupId, the possible values do not need to be the same. If one tab group with chooses an value that does not exist in another tab group with the same groupId, the tab group with the missing value won't change its tab. You can see that from the following example. Try to select Linux, and the above tab groups doesn't change.","heading":"Markdown Features"},{"type":"p","anchor":"syncing-tab-choices","body":"Tab choices with different groupIds will not interfere with each other:","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"In addition to the basic Markdown syntax, we use remark-admonitions alongside MDX to add support for admonitions. Admonitions are wrapped by a set of 3 colons.","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"Example:","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"The content and title can include markdown.","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"Heads up! Here's a pro-tip.","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"Useful information.","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"Warning! You better pay attention!","heading":"Markdown Features"},{"type":"p","anchor":"calloutsadmonitions","body":"Danger danger, mayday!","heading":"Markdown Features"},{"type":"p","anchor":"specifying-title","body":"You may also specify an optional title","heading":"Markdown Features"},{"type":"p","anchor":"specifying-title","body":"The content and title can include Markdown.","heading":"Markdown Features"},{"type":"p","anchor":"code-blocks","body":"Code blocks within documentation are super-powered 💪.","heading":"Markdown Features"},{"type":"p","anchor":"code-title","body":"You can add a title to the code block by adding title key after the language (leave a space between them).","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"Code blocks are text blocks wrapped around by strings of 3 backticks. You may check out this reference for specifications of MDX.","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"Use the matching language meta string for your code block, and Docusaurus will pick up syntax highlighting automatically, powered by Prism React Renderer.","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"By default, the Prism syntax highlighting theme we use is Palenight. You can change this to another theme by passing theme field in prism as themeConfig in your docusaurus.config.js.","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"For example, if you prefer to use the dracula highlighting theme:","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"By default, Docusaurus comes with this subset of commonly used languages.","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"To add syntax highlighting for any of the other Prism supported languages, define it in an array of additional languages.","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"For example, if you want to add highlighting for the powershell language:","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"If you want to add highlighting for languages not yet supported by Prism, you can swizzle prism-include-languages:","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"It will produce prism-include-languages.js in your src/theme folder. You can add highlighting support for custom languages by editing prism-include-languages.js:","heading":"Markdown Features"},{"type":"p","anchor":"syntax-highlighting","body":"You can refer to Prism's official language definitions when you are writing your own language definitions.","heading":"Markdown Features"},{"type":"p","anchor":"line-highlighting","body":"You can bring emphasis to certain lines of code by specifying line ranges after the language meta string (leave a space after the language).","heading":"Markdown Features"},{"type":"p","anchor":"line-highlighting","body":"To accomplish this, Docusaurus adds the docusaurus-highlight-code-line class to the highlighted lines. You will need to define your own styling for this CSS, possibly in your src/css/custom.css with a custom background color which is dependent on your selected syntax highlighting theme. The color given below works for the default highlighting theme (Palenight), so if you are using another theme, you will have to tweak the color accordingly.","heading":"Markdown Features"},{"type":"p","anchor":"line-highlighting","body":"To highlight multiple lines, separate the line numbers by commas or use the range syntax to select a chunk of lines. This feature uses the parse-number-range library and you can find more syntax on their project details.","heading":"Markdown Features"},{"type":"p","anchor":"line-highlighting","body":"You can also use comments with highlight-next-line, highlight-start, and highlight-end to select which lines are highlighted.","heading":"Markdown Features"},{"type":"p","anchor":"line-highlighting","body":"Supported commenting syntax:","heading":"Markdown Features"},{"type":"p","anchor":"line-highlighting","body":"If there's a syntax that is not currently supported, we are open to adding them! Pull requests welcome.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"(Powered by React Live)","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"You can create an interactive coding editor with the @docusaurus/theme-live-codeblock plugin.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"First, add the plugin to your package.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"You will also need to add the plugin to your docusaurus.config.js.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"To use the plugin, create a code block with live attached to the language meta string.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"The code block will be rendered as an interactive editor. Changes to the code will reflect on the result panel live.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"It is not possible to import components directly from the react-live code editor, you have to define available imports upfront.","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"By default, all React imports are available. If you need more imports available, swizzle the react-live scope:","heading":"Markdown Features"},{"type":"p","anchor":"interactive-code-editor","body":"The ButtonExample component is now available to use:","heading":"Markdown Features"},{"type":"p","anchor":"multi-language-support-code-blocks","body":"With MDX, you can easily create interactive components within your documentation, for example, to display code in multiple programming languages and switching between them using a tabs component.","heading":"Markdown Features"},{"type":"p","anchor":"multi-language-support-code-blocks","body":"Instead of implementing a dedicated component for multi-language support code blocks, we've implemented a generic Tabs component in the classic theme so that you can use it for other non-code scenarios as well.","heading":"Markdown Features"},{"type":"p","anchor":"multi-language-support-code-blocks","body":"The following example is how you can have multi-language code tabs in your docs. Note that the empty lines above and below each language block is intentional. This is a current limitation of MDX, you have to leave empty lines around Markdown syntax for the MDX parser to know that it's Markdown syntax and not JSX.","heading":"Markdown Features"},{"type":"p","anchor":"multi-language-support-code-blocks","body":"And you will get the following:","heading":"Markdown Features"},{"type":"p","anchor":"multi-language-support-code-blocks","body":"You may want to implement your own <MultiLanguageCode /> abstraction if you find the above approach too verbose. We might just implement one in future for convenience.","heading":"Markdown Features"},{"type":"p","anchor":"multi-language-support-code-blocks","body":"If you have multiple of these multi-language code tabs, and you want to sync the selection across the tab instances, refer to the Syncing tab choices section.","heading":"Markdown Features"},{"type":"p","anchor":"assets","body":"Sometimes you want to link to static assets directly from markdown files, and it is convenient to co-locate the asset next to the markdown file using it.","heading":"Markdown Features"},{"type":"p","anchor":"assets","body":"We have setup Webpack loaders to handle most common file types, so that when you import a file, you get its url, and the asset is automatically copied to the output folder.","heading":"Markdown Features"},{"type":"p","anchor":"assets","body":"Let's imagine the following file structure:","heading":"Markdown Features"},{"type":"p","anchor":"image-assets","body":"You can use images by requiring them and using an image tag through MDX:","heading":"Markdown Features"},{"type":"p","anchor":"image-assets","body":"The ES imports syntax also works:","heading":"Markdown Features"},{"type":"p","anchor":"image-assets","body":"This results in displaying the image:","heading":"Markdown Features"},{"type":"p","anchor":"image-assets","body":"","heading":"Markdown Features"},{"type":"p","anchor":"image-assets","body":"If you are using @docusaurus/plugin-ideal-image, you need to use the dedicated image component, as documented.","heading":"Markdown Features"},{"type":"p","anchor":"common-assets","body":"In the same way, you can link to existing assets by requiring them and using the returned url in videos, links etc...","heading":"Markdown Features"},{"type":"p","anchor":"unknown-assets","body":"This require behavior is not supported for all file extensions, but as an escape hatch you can use the special Webpack syntax to force the file-loader to kick-in:","heading":"Markdown Features"}],"h2":[{"type":"h2","anchor":"markdown-headers","body":"Hello from Docusaurus","heading":"Markdown Features"},{"type":"h2","anchor":"markdown-headers","body":"Markdown headers","heading":"Markdown Features"},{"type":"h2","anchor":"referencing-other-documents","body":"Referencing other documents","heading":"Markdown Features"},{"type":"h2","anchor":"embedding-react-components-with-mdx","body":"Embedding React components with MDX","heading":"Markdown Features"},{"type":"h2","anchor":"tabs","body":"Tabs","heading":"Markdown Features"},{"type":"h2","anchor":"calloutsadmonitions","body":"Callouts/admonitions","heading":"Markdown Features"},{"type":"h2","anchor":"code-blocks","body":"Code blocks","heading":"Markdown Features"},{"type":"h2","anchor":"interactive-code-editor","body":"It is 5:16:02 pm.","heading":"Markdown Features"},{"type":"h2","anchor":"assets","body":"Assets","heading":"Markdown Features"}],"h3":[{"type":"h3","anchor":"markdown-headers","body":"Headers","heading":"Markdown Features"},{"type":"h3","anchor":"markdown-headers","body":"Only h2 and h3 will be in the toc","heading":"Markdown Features"},{"type":"h3","anchor":"configuring-plugins","body":"Configuring plugins","heading":"Markdown Features"},{"type":"h3","anchor":"configuring-plugin-options","body":"Configuring plugin options","heading":"Markdown Features"},{"type":"h3","anchor":"syncing-tab-choices","body":"Syncing tab choices","heading":"Markdown Features"},{"type":"h3","anchor":"specifying-title","body":"Specifying title","heading":"Markdown Features"},{"type":"h3","anchor":"code-title","body":"Code title","heading":"Markdown Features"},{"type":"h3","anchor":"syntax-highlighting","body":"Syntax highlighting","heading":"Markdown Features"},{"type":"h3","anchor":"line-highlighting","body":"Line highlighting","heading":"Markdown Features"},{"type":"h3","anchor":"interactive-code-editor","body":"Interactive code editor","heading":"Markdown Features"},{"type":"h3","anchor":"multi-language-support-code-blocks","body":"Multi-language support code blocks","heading":"Markdown Features"},{"type":"h3","anchor":"image-assets","body":"Image assets","heading":"Markdown Features"},{"type":"h3","anchor":"common-assets","body":"Common assets","heading":"Markdown Features"},{"type":"h3","anchor":"unknown-assets","body":"Unknown assets","heading":"Markdown Features"}]}},{"url":"docs/migrating-from-v1-to-v2","dataNodes":{"h1":[{"type":"h1","anchor":"project-setup","body":"Migrating from v1 to v2","heading":"Migrating from v1 to v2"}],"p":[{"type":"p","anchor":"project-setup","body":"This migration guide is targeted at Docusaurus users without translation and/or versioning features.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"project-setup","body":"This doc guides you through migrating an existing Docusaurus 1 site to Docusaurus 2.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"project-setup","body":"Your Docusaurus 1 site should have the following structure:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"project-setup","body":"After the migration, your Docusaurus 2 site could look like:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"project-setup","body":"You can use the migration command to take care of some of the migration chores.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"scoped-package-names","body":"In Docusaurus 2, we use scoped package names:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"scoped-package-names","body":"This provides a clear distinction between Docusaurus' official packages and community maintained packages. In another words, all Docusaurus' official packages are namespaced under @docusaurus/.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"scoped-package-names","body":"Meanwhile, the default doc site functionalities provided by Docusaurus 1 are now provided by @docusaurus/preset-classic. Therefore, we need to add this dependency as well:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"scoped-package-names","body":"Please use the most recent Docusaurus 2 alpha version, which you can check out here (it's tagged next).","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"cli-commands","body":"Meanwhile, CLI commands are renamed to docusaurus <command> (instead of docusaurus-command).","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"cli-commands","body":"The \"scripts\" section of your package.json should be updated as follows:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"cli-commands","body":"A typical Docusaurus 2 package.json may look like this:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"update-references-to-the-build-directory","body":"In Docusaurus 1, all the build artifacts are located within website/build/<PROJECT_NAME>.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"update-references-to-the-build-directory","body":"In Docusaurus 2, it is now moved to just website/build. Make sure that you update your deployment configuration to read the generated files from the correct build directory.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"update-references-to-the-build-directory","body":"If you are deploying to GitHub pages, make sure to run yarn deploy instead of yarn publish-gh-pages script.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"gitignore","body":"The .gitignore in your website should contain:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"readme","body":"The D1 website may have an existing README file. You can modify it to reflect the D2 changes, or copy the default Docusaurus v2 README.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"docusaurusconfigjs","body":"Rename siteConfig.js to docusaurus.config.js.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"docusaurusconfigjs","body":"In Docusaurus 2, we split each functionality (blog, docs, pages) into plugins for modularity. Presets are bundles of plugins and for backward compatibility we built a @docusaurus/preset-classic preset which bundles most of the essential plugins present in Docusaurus 1.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"docusaurusconfigjs","body":"Add the following preset configuration to your docusaurus.config.js.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"docusaurusconfigjs","body":"We recommend moving the docs folder into the website folder and that is also the default directory structure in v2. Now supports Docusaurus project deployments out-of-the-box if the docs directory is within the website. It is also generally better for the docs to be within the website so that the docs and the rest of the website code are co-located within one website directory.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"docusaurusconfigjs","body":"If you are migrating your Docusaurus v1 website, and there are pending documentation pull requests, you can temporarily keep the /docs folder to its original place, to avoid producing conflicts.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"docusaurusconfigjs","body":"Refer to migration guide below for each field in siteConfig.js.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"baseurl-tagline-title-url-favicon-organizationname-projectname-githubhost-scripts-stylesheets","body":"No actions needed, these configuration fields were not modified.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"colors","body":"Deprecated. We wrote a custom CSS framework for Docusaurus 2 called Infima which uses CSS variables for theming. The docs are not quite ready yet and we will update here when it is. To overwrite Infima's CSS variables, create your own CSS file (e.g. ./src/css/custom.css) and import it globally by passing it as an option to @docusaurus/preset-classic:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"colors","body":"Infima uses 7 shades of each color.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"colors","body":"We recommend using ColorBox to find the different shades of colors for your chosen primary color.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"colors","body":"Alteratively, use the following tool to generate the different shades for your website and copy the variables into src/css/custom.css.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"primary_color","body":"Primary Color:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"primary_color","body":"Replace the variables in src/css/custom.css with these new variables.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"footericon-copyright-ogimage-twitterimage-docssidenavcollapsible","body":"Site meta info such as assets, SEO, copyright info are now handled by themes. To customize them, use the themeConfig field in your docusaurus.config.js:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"headericon-headerlinks","body":"In Docusaurus 1, header icon and header links were root fields in siteConfig:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"headericon-headerlinks","body":"Now, these two fields are both handled by the theme:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"blogsidebarcount","body":"Deprecated. Pass it as a blog option to @docusaurus/preset-classic instead:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"cname","body":"Deprecated. Create a CNAME file in your static folder instead with your custom domain. Files in the static folder will be copied into the root of the build folder during execution of the build command.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"customdocspath-docsurl-editurl-enableupdateby-enableupdatetime","body":"BREAKING: editUrl should point to (website) docusaurus project instead of docs directory.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"customdocspath-docsurl-editurl-enableupdateby-enableupdatetime","body":"Deprecated. Pass it as an option to @docusaurus/preset-classic docs instead:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"removed-fields","body":"The following fields are all deprecated, you may remove from your configuration file.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"removed-fields","body":"We intend to implement many of the deprecated config fields as plugins in future. Help will be appreciated!","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"In v1, all pages were available with or without the .html extension.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"For example, these 2 pages exist:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"If cleanUrl was:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"In v2, by default, the canonical page is /installation, and not /installation.html.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"If you had cleanUrl: false in v1, it's possible that people published links to /installation.html.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"For SEO reasons, and avoiding breaking links, you should configure server-side redirect rules on your hosting provider.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"As an escape hatch, you could use @docusaurus/plugin-client-redirects to create client-side redirects from /installation.html to /installation.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"urls","body":"If you want to keep the .html extension as the canonical url of a page, docs can declare a slug: installation.html frontmatter.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"sidebar","body":"In previous version, nested sidebar category is not allowed and sidebar category can only contain doc id. However, v2 allows infinite nested sidebar and we have many types of Sidebar Item other than document.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"sidebar","body":"You'll have to migrate your sidebar if it contains category type. Rename subcategory to category and ids to items.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"footer","body":"website/core/Footer.js is no longer needed. If you want to modify the default footer provided by Docusaurus, swizzle it:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"footer","body":"This will copy the current <Footer /> component used by the theme to a src/theme/Footer directory under the root of your site, you may then edit this component for customization.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"footer","body":"Do not swizzle the Footer just to add the logo on the left. The logo is intentionally removed in v2 and moved to the bottom. Just configure the footer in docusaurus.config.js with themeConfig.footer:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"Please refer to creating pages to learn how Docusaurus 2 pages work. After reading that, notice that you have to move pages/en files in v1 to src/pages instead.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"In Docusaurus v1, pages received the siteConfig object as props.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"In Docusaurus v2, get the siteConfig object from useDocusaurusContext instead.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"In v2, you have to apply the theme layout around each page. The Layout component takes metadata props (permalink is important, as it defines the canonical url of your page).","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"CompLibrary is deprecated in v2, so you have to write your own React component or use Infima styles (Docs will be available soon, sorry about that! In the meanwhile, inspect the V2 website or view https://facebookincubator.github.io/infima/ to see what styles are available).","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"You can migrate CommonJS to ES6 imports/exports.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"Here's a typical Docusaurus v2 page:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"pages","body":"The following code could be helpful for migration of various pages:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"remove-autogenerated_table_of_contents","body":"This feature is deprecated. You may read more about it in this issue. If you need the feature, use remark-toc instead and pass it to docs plugin's remarkPlugins option.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"update-markdown-syntax-to-be-mdx-compatible","body":"In Docusaurus 2, the markdown syntax has been changed to MDX. Hence there might be some broken syntax in the existing docs which you would have to update. A common example is self-closing tags like <img> and <br> which are valid in HTML would have to be explicitly closed now ( <img/> and <br/>). All tags in MDX documents have to be valid JSX.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"update-markdown-syntax-to-be-mdx-compatible","body":"Frontmatter is parsed by gray-matter. If your frontmatter use special characters like :, you now need to quote it: title: Part 1: my part1 title -> title: Part 1: \"my part1 title\".","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"update-markdown-syntax-to-be-mdx-compatible","body":"Tips: You might want to use some online tools like HTML to JSX to make the migration easier.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"language-specific-code-tabs","body":"Refer to the multi-language support code blocks section.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"front-matter","body":"The Docusaurus front matter fields for the blog have been changed from camelCase to snake_case to be consistent with the docs.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"front-matter","body":"The fields authorFBID and authorTwitter have been deprecated. They are only used for generating the profile image of the author which can be done via the author_image_url field.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"test-your-site","body":"After migration, your folder structure should look like this:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"test-your-site","body":"Start the development server and fix any errors:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migration-command","body":"The migration command automatically migrates your v1 website to a v2 website.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migration-command","body":"The migration command migrates:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migration-command","body":"Manual tweaking is still required after using the migration command. You still need to migrate your footer, pages and content.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migration-command","body":"To use the migration command, follow these steps:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migration-command","body":"Before using the migration command, ensure that /docs, /blog, /static, sidebars.json, siteConfig.js, package.json follow the structure shown at the start of this page.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migration-command","body":"To migrate your v1 website, run the migration command with the appropriate filesystem paths:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"options","body":"You can add option flags to the migration command to automatically migrate markdown content and pages to v2. It is likely that you will still need to make some manual changes to achieve your desired result.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"options","body":"The migration of pages and MDX is still a work in progress.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"options","body":"We recommend you to try to run the pages without these options, commit, and then try to run the migration again with the --page and --mdx options.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"options","body":"This way, you'd be able to easily inspect and fix the diff.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"example-migration-prs","body":"You might want to refer to our migration PRs for Create React App and Flux as examples of how a migration for a basic Docusaurus v1 site can be done.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"support","body":"For any questions, you can ask in the #docusaurus-1-to-2-migration Discord channel. Feel free to tag @yangshun in any migration PRs if you would like us to have a look.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"versioned-site","body":"The versioning feature is a work in progress! Although we've implemented docs versioning since 2.0.0-alpha.37, we'd like to test it out for v2 users first before we recommend v1 users to migrate to v2. There are some changes in how v2 versioning works compared to v1. In the future, we might create a script to migrate your versioned docs easier. However, if you are adventurous enough to manually migrate, feel free to do so. Be warned though, the manual migration requires lot of work.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"versioned-site","body":"Read up https://v2.docusaurus.io/blog/2018/09/11/Towards-Docusaurus-2#versioning first for problems in v1's approach.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_docs-front-matter","body":"Unlike v1, The markdown header for each versioned doc is no longer altered by using version-${version}-${original_id} as the value for the actual id field. See scenario below for better explanation.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_docs-front-matter","body":"For example, if you have a docs/hello.md.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_docs-front-matter","body":"When you cut a new version 1.0.0, in Docusaurus v1, website/versioned_docs/version-1.0.0/hello.md looks like this:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_docs-front-matter","body":"In comparison, Docusaurus 2 website/versioned_docs/version-1.0.0/hello.md looks like this (exactly same as original)","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_docs-front-matter","body":"Since we're going for snapshot and allow people to move (and edit) docs easily inside version. The id frontmatter is no longer altered and will remain the same. Internally, it is set as version-${version}/${id}.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_docs-front-matter","body":"Essentially, here are the necessary changes in each versioned_docs file:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_sidebars","body":"Because in v1 there is a good chance someone created a new file with front matter id \"version-${version}-${id}\" that can conflict with versioned_docs id.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_sidebars","body":"For example, Docusaurus 1 can't differentiate docs/xxx.md","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_sidebars","body":"vs website/versioned_docs/version-1.0.0/hello.md","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_sidebars","body":"Since we don't allow / in v1 & v2 for frontmatter, conflicts are less likely to occur.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_sidebars","body":"So v1 users need to migrate their versioned_sidebars file","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"migrate-your-versioned_sidebars","body":"Example versioned_sidebars/version-1.0.0-sidebars.json:","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"populate-your-versioned_sidebars-and-versioned_docs","body":"In v2, we use snapshot approach for documentation versioning. Every versioned docs does not depends on other version. It is possible to have foo.md in version-1.0.0 but it doesn't exist in version-1.2.0. This is not possible in previous version due to Docusaurus v1 fallback functionality (https://docusaurus.io/docs/en/versioning#fallback-functionality).","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"populate-your-versioned_sidebars-and-versioned_docs","body":"For example, if your versions.json looks like this in v1","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"populate-your-versioned_sidebars-and-versioned_docs","body":"Docusaurus v1 creates versioned docs if and only if the doc content is different. Your docs structure might look like this if the only doc changed from v1.0.0 to v1.1.0 is hello.md.","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"populate-your-versioned_sidebars-and-versioned_docs","body":"In v2, you have to populate the missing versioned_docs and versioned_sidebars (with the right frontmatter and id reference too).","heading":"Migrating from v1 to v2"},{"type":"p","anchor":"convert-style-attributes-to-style-objects-in-mdx","body":"Docusaurus 2 uses JSX for doc files. If you have any style attributes in your Docusaurus 1 docs, convert them to style objects, like this:","heading":"Migrating from v1 to v2"}],"h2":[{"type":"h2","anchor":"project-setup","body":"Project setup","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"site-configurations","body":"Site configurations","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"urls","body":"Urls","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"components","body":"Components","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"content","body":"Content","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"test-your-site","body":"Test your site","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"migration-command","body":"Migration command","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"example-migration-prs","body":"Example migration PRs","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"support","body":"Support","heading":"Migrating from v1 to v2"},{"type":"h2","anchor":"versioned-site","body":"Versioned Site","heading":"Migrating from v1 to v2"}],"h3":[{"type":"h3","anchor":"packagejson","body":"package.json","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"update-references-to-the-build-directory","body":"Update references to the build directory","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"gitignore","body":".gitignore","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"readme","body":"README","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"docusaurusconfigjs","body":"docusaurus.config.js","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"updated-fields","body":"Updated fields","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"removed-fields","body":"Removed fields","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"sidebar","body":"Sidebar","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"footer","body":"Footer","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"pages","body":"Pages","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"remove-autogenerated_table_of_contents","body":"Remove AUTOGENERATED_TABLE_OF_CONTENTS","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"update-markdown-syntax-to-be-mdx-compatible","body":"Update Markdown syntax to be MDX-compatible","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"language-specific-code-tabs","body":"Language-specific code tabs","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"front-matter","body":"Front matter","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"migrate-your-versioned_docs-front-matter","body":"Migrate your versioned_docs front matter","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"migrate-your-versioned_sidebars","body":"Migrate your versioned_sidebars","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"populate-your-versioned_sidebars-and-versioned_docs","body":"Populate your versioned_sidebars and versioned_docs","heading":"Migrating from v1 to v2"},{"type":"h3","anchor":"convert-style-attributes-to-style-objects-in-mdx","body":"Convert style attributes to style objects in MDX","heading":"Migrating from v1 to v2"}]}},{"url":"docs/next","dataNodes":{"h1":[{"type":"h1","anchor":"disclaimer","body":"Introduction","heading":"Introduction"}],"h2":[{"type":"h2","anchor":"disclaimer","body":"Disclaimer","heading":"Introduction"},{"type":"h2","anchor":"a-better-docusaurus-is-coming-to-town","body":"A better Docusaurus is coming to town","heading":"Introduction"},{"type":"h2","anchor":"features","body":"Features","heading":"Introduction"},{"type":"h2","anchor":"comparison-with-other-tools","body":"Comparison with other tools","heading":"Introduction"},{"type":"h2","anchor":"staying-informed","body":"Staying informed","heading":"Introduction"},{"type":"h2","anchor":"something-missing","body":"Something missing?","heading":"Introduction"}],"p":[{"type":"p","anchor":"disclaimer","body":"It has been a year since we made the first alpha release of Docusaurus 2 and things have been pretty stable since then. Many of Facebook's new open source websites are using Docusaurus 2 now. At this point, we highly encourage you to use Docusaurus 2 over Docusaurus 1 for your new websites. For feedback and questions, chat with us on Discord 😉","heading":"Introduction"},{"type":"p","anchor":"disclaimer","body":"You should use this if:","heading":"Introduction"},{"type":"p","anchor":"disclaimer","body":"Do not use this if:","heading":"Introduction"},{"type":"p","anchor":"a-better-docusaurus-is-coming-to-town","body":"Docusaurus 1 used to be a pure documentation site generator. In Docusaurus 2, we rebuilt it from the ground up, allowing for more customizability but preserved the best parts of Docusaurus 1 - easy to get started, versioned docs, and i18n (coming soon).","heading":"Introduction"},{"type":"p","anchor":"a-better-docusaurus-is-coming-to-town","body":"Beyond that, Docusaurus 2 is a performant static site generator and can be used to create common content-driven websites (e.g. Documentation, Blogs, Product Landing and Marketing Pages, etc) extremely quickly.","heading":"Introduction"},{"type":"p","anchor":"a-better-docusaurus-is-coming-to-town","body":"While our main focus will still be helping you get your documentations right and well, it is possible to build this any kind of website using Docusaurus 2 as it is just a React application. Docusaurus can now be used to build any website, not just documentation websites.","heading":"Introduction"},{"type":"p","anchor":"features","body":"Docusaurus is built with high attention to your experience building your site and maintaining it with your collaborators and contributors.","heading":"Introduction"},{"type":"p","anchor":"features","body":"Our shared goal — to help your users find what they need fast, and understand your products better. With the experience of Docusaurus 1, we share with you our best practices to help you build your doc site right and well.","heading":"Introduction"},{"type":"p","anchor":"features","body":"Docusaurus 2 is born to be compassionately accessible to all your users, and lightning fast.","heading":"Introduction"},{"type":"p","anchor":"comparison-with-other-tools","body":"Across all static site generators, Docusaurus has a unique focus on doc sites and has out-of-the-box structure you need.","heading":"Introduction"},{"type":"p","anchor":"comparison-with-other-tools","body":"We've also studied other main static site generators and would like to share our insights on the comparison, hopefully to help you navigate through the prismatic choices out there.","heading":"Introduction"},{"type":"p","anchor":"gatsby","body":"Gatsby is packed with a lot of features, has a rich ecosystem of plugins and is capable of doing everything that Docusaurus does. Naturally, that comes at a cost of a higher learning curve. Gatsby does many things well and is suitable for building many types of websites. On the other hand, Docusaurus tries to do one thing super well - be the best tool for writing and publishing content.","heading":"Introduction"},{"type":"p","anchor":"gatsby","body":"GraphQL is also pretty core to Gatsby, although you don't necessarily need GraphQL to build a Gatsby site. In most cases when building static websites, you won't need the flexibility that GraphQL provides.","heading":"Introduction"},{"type":"p","anchor":"gatsby","body":"Many aspects of Docusaurus 2 were inspired by the best things about Gatsby and it's a great alternative.","heading":"Introduction"},{"type":"p","anchor":"gitbook","body":"GitBook has very clean design and has been used by many open source projects. With its focus shifting towards a commercial product rather than an open-source tool, many of its requirements no longer fit the needs as an open source project's documentation site. As a result, many have turned to other products. You may read about Redux's switch to Docusaurus here.","heading":"Introduction"},{"type":"p","anchor":"gitbook","body":"Currently, GitBook is only free for open-source and non-profit teams. Docusaurus is free for everyone.","heading":"Introduction"},{"type":"p","anchor":"jekyll","body":"Jekyll is one of the most mature static site generators around and has been a great tool to use — in fact, before Docusaurus, most of Facebook's Open Source websites are/were built on Jekyll! It is extremely simple to get started. We want to bring a similar developer experience as building a static site with Jekyll.","heading":"Introduction"},{"type":"p","anchor":"jekyll","body":"In comparison with statically generated HTML and interactivity added using <script /> tags, Docusaurus sites are React apps. Using modern JavaScript ecosystem tooling, we hope to set new standards on doc sites performance, asset build pipeline and optimizations, and ease to setup.","heading":"Introduction"},{"type":"p","anchor":"vuepress","body":"VuePress has many similarities with Docusaurus - both focus heavily on content-centric website and provides tailored documentation features out of the box. However, VuePress is powered by Vue, while Docusaurus is powered by React. If you want a Vue-based solution, VuePress would be a decent choice.","heading":"Introduction"},{"type":"p","anchor":"something-missing","body":"If you find issues with the documentation or have suggestions on how to improve the documentation or the project in general, please file an issue for us, or send a tweet mentioning the @docusaurus Twitter account.","heading":"Introduction"},{"type":"p","anchor":"something-missing","body":"For new feature requests, you can create a post on our Canny board, which is a handy tool for roadmapping and allows for sorting by upvotes, which gives the core team a better indicator of what features are in high demand, as compared to GitHub issues which are harder to triage. Refrain from making a Pull Request for new features (especially large ones) as someone might already be working on it or will be part of our roadmap. Talk to us first!","heading":"Introduction"}],"h3":[{"type":"h3","anchor":"gatsby","body":"Gatsby","heading":"Introduction"},{"type":"h3","anchor":"gitbook","body":"GitBook","heading":"Introduction"},{"type":"h3","anchor":"jekyll","body":"Jekyll","heading":"Introduction"},{"type":"h3","anchor":"vuepress","body":"VuePress","heading":"Introduction"}]}},{"url":"docs/presets","dataNodes":{"h1":[{"type":"h1","anchor":"using-presets","body":"Presets","heading":"Presets"}],"p":[{"type":"p","anchor":"using-presets","body":"Presets are collections of plugins and themes.","heading":"Presets"},{"type":"p","anchor":"using-presets","body":"A preset is usually a npm package, so you install them like other npm packages using npm.","heading":"Presets"},{"type":"p","anchor":"using-presets","body":"Then, add it in your site's docusaurus.config.js's presets option:","heading":"Presets"},{"type":"p","anchor":"using-presets","body":"To load presets from your local directory, specify how to resolve them:","heading":"Presets"},{"type":"p","anchor":"presets---themes-and-plugins","body":"Presets in some way are a shorthand function to add plugins and themes to your docusaurus config. For example, you can specify a preset that includes the following themes and plugins,","heading":"Presets"},{"type":"p","anchor":"presets---themes-and-plugins","body":"then in your Docusaurus config, you may configure the preset instead:","heading":"Presets"},{"type":"p","anchor":"presets---themes-and-plugins","body":"This is equivalent of doing:","heading":"Presets"},{"type":"p","anchor":"presets---themes-and-plugins","body":"This is especially useful when some plugins and themes are intended to be used together.","heading":"Presets"},{"type":"p","anchor":"docusauruspreset-classic","body":"The classic preset that is usually shipped by default to new docusaurus website. It is a set of plugins and themes.","heading":"Presets"},{"type":"p","anchor":"docusauruspreset-classic","body":"To specify plugin options individually, you can provide the necessary fields to certain plugins, i.e. customCss for @docusaurus/theme-classic, pass them in the preset field, like this:","heading":"Presets"},{"type":"p","anchor":"docusauruspreset-classic","body":"In addition to these plugins and themes, @docusaurus/theme-classic adds remark-admonitions as a remark plugin to @docusaurus/plugin-content-blog and @docusaurus/plugin-content-docs.","heading":"Presets"},{"type":"p","anchor":"docusauruspreset-classic","body":"The admonitions key will be passed as the options to remark-admonitions. Passing false will prevent the plugin from being added to MDX.","heading":"Presets"}],"h2":[{"type":"h2","anchor":"using-presets","body":"Using presets","heading":"Presets"},{"type":"h2","anchor":"presets---themes-and-plugins","body":"Presets -> themes and plugins","heading":"Presets"},{"type":"h2","anchor":"official-presets","body":"Official presets","heading":"Presets"}],"h3":[{"type":"h3","anchor":"docusauruspreset-classic","body":"@docusaurus/preset-classic","heading":"Presets"}]}},{"url":"docs/resources","dataNodes":{"h1":[{"type":"h1","anchor":"videos","body":"Awesome Resources","heading":"Awesome Resources"}],"p":[{"type":"p","anchor":"videos","body":"A curated list of interesting Docusaurus community projects.","heading":"Awesome Resources"},{"type":"p","anchor":"showcase","body":"See the showcase.","heading":"Awesome Resources"}],"h2":[{"type":"h2","anchor":"videos","body":"Videos","heading":"Awesome Resources"},{"type":"h2","anchor":"articles","body":"Articles","heading":"Awesome Resources"},{"type":"h2","anchor":"showcase","body":"Showcase","heading":"Awesome Resources"},{"type":"h2","anchor":"official-plugins","body":"Official plugins","heading":"Awesome Resources"},{"type":"h2","anchor":"community-plugins","body":"Community plugins","heading":"Awesome Resources"},{"type":"h2","anchor":"enterprise-usage","body":"Enterprise usage","heading":"Awesome Resources"}]}},{"url":"docs/search","dataNodes":{"h1":[{"type":"h1","anchor":"using-algolia-docsearch","body":"Search","heading":"Search"}],"p":[{"type":"p","anchor":"using-algolia-docsearch","body":"Docusaurus' own @docusaurus/preset-classic supports a search integration.","heading":"Search"},{"type":"p","anchor":"using-algolia-docsearch","body":"There are two main options, you can use Algolia DocSearch or bring in your own SearchBar component.","heading":"Search"},{"type":"p","anchor":"using-algolia-docsearch","body":"Algolia DocSearch works by crawling the content of your website every 24 hours and putting all the content in an Algolia index. This content is then queried directly from your front-end using the Algolia API. Note that your website needs to be publicly available for this to work (i.e., not behind a firewall). The service is free.","heading":"Search"},{"type":"p","anchor":"connecting-algolia","body":"To connect your docs with Algolia, add an algolia field in your themeConfig. Apply for DocSearch to get your Algolia index and API key.","heading":"Search"},{"type":"p","anchor":"connecting-algolia","body":"The searchParameters option used to be named algoliaOptions in Docusaurus v1.","heading":"Search"},{"type":"p","anchor":"styling-your-algolia-search","body":"By default, DocSearch comes with a fine-tuned theme that was designed for accessibility, making sure that colors and contrasts respect standards.","heading":"Search"},{"type":"p","anchor":"styling-your-algolia-search","body":"Still, you can reuse the Infima CSS variables from Docusaurus to style DocSearch by editing the /src/css/custom.css file.","heading":"Search"},{"type":"p","anchor":"customizing-the-algolia-search-behavior","body":"Algolia DocSearch supports a list of options that you can pass to the algolia field in the docusaurus.config.js file.","heading":"Search"},{"type":"p","anchor":"editing-the-algolia-search-component","body":"If you prefer to edit the Algolia search React component, swizzle the SearchBar component in @docusaurus/theme-search-algolia:","heading":"Search"},{"type":"p","anchor":"using-your-own-search","body":"To use your own search, swizzle the SearchBar component in @docusaurus/theme-classic","heading":"Search"},{"type":"p","anchor":"using-your-own-search","body":"This will create a src/themes/SearchBar file in your project folder. Restart your dev server and edit the component, you will see that Docusaurus uses your own SearchBar component now.","heading":"Search"},{"type":"p","anchor":"using-your-own-search","body":"Notes: You can alternatively swizzle from Algolia SearchBar and create your own search component from there.","heading":"Search"}],"h2":[{"type":"h2","anchor":"using-algolia-docsearch","body":"Using Algolia DocSearch","heading":"Search"},{"type":"h2","anchor":"using-your-own-search","body":"Using your own search","heading":"Search"}],"h3":[{"type":"h3","anchor":"connecting-algolia","body":"Connecting Algolia","heading":"Search"},{"type":"h3","anchor":"styling-your-algolia-search","body":"Styling your Algolia search","heading":"Search"},{"type":"h3","anchor":"customizing-the-algolia-search-behavior","body":"Customizing the Algolia search behavior","heading":"Search"},{"type":"h3","anchor":"editing-the-algolia-search-component","body":"Editing the Algolia search component","heading":"Search"}]}},{"url":"docs/static-assets","dataNodes":{"h1":[{"type":"h1","anchor":"referencing-your-static-asset","body":"Static Assets","heading":"Static Assets"}],"p":[{"type":"p","anchor":"referencing-your-static-asset","body":"In general, every website needs assets: images, stylesheets, favicons and etc. In such cases, you can create a directory named static at the root of your project. Every file you put into that directory will be copied into the the root of the generated build folder with the directory hierarchy preserved. E.g. if you add a file named sun.jpg to the static folder, it’ll be copied to build/sun.jpg.","heading":"Static Assets"},{"type":"p","anchor":"referencing-your-static-asset","body":"This means that if the site's baseUrl is /, an image in /static/img/docusaurus_keytar.svg is available at /img/docusaurus_keytar.svg.","heading":"Static Assets"},{"type":"p","anchor":"referencing-your-static-asset","body":"You can reference assets from the static folder in your code. You could use hardcoded absolute paths, i.e. starting with a slash /, but remember to include the baseUrl if it is not /. However, this will break if you change your baseUrl in the config.","heading":"Static Assets"},{"type":"p","anchor":"referencing-your-static-asset","body":"A better way would be to use the useBaseUrl utility function which appends the baseUrl to paths for you.","heading":"Static Assets"},{"type":"p","anchor":"jsx-example","body":"You can also import SVG images, which will be transformed into React components.","heading":"Static Assets"},{"type":"p","anchor":"markdown-example","body":"Thanks to MDX, you can also use useBaseUrl utility function in Markdown files! You'd have to use <img> tags instead of the Markdown image syntax though. The syntax is exactly the same as in JSX.","heading":"Static Assets"},{"type":"p","anchor":"markdown-example","body":"You could also just use Markdown image syntax, but you would have to manually maintain the image paths yourself and isn't recommended.","heading":"Static Assets"},{"type":"p","anchor":"caveats","body":"Keep in mind that:","heading":"Static Assets"}],"h2":[{"type":"h2","anchor":"referencing-your-static-asset","body":"Referencing your static asset","heading":"Static Assets"}],"h3":[{"type":"h3","anchor":"jsx-example","body":"JSX example","heading":"Static Assets"},{"type":"h3","anchor":"markdown-example","body":"Markdown example","heading":"Static Assets"},{"type":"h3","anchor":"caveats","body":"Caveats","heading":"Static Assets"}]}},{"url":"docs/styling-layout","dataNodes":{"h1":[{"type":"h1","anchor":"traditional-css","body":"Styling and Layout","heading":"Styling and Layout"}],"h2":[{"type":"h2","anchor":"traditional-css","body":"Traditional CSS","heading":"Styling and Layout"},{"type":"h2","anchor":"styling-your-site-with-infima","body":"Styling your site with Infima","heading":"Styling and Layout"},{"type":"h2","anchor":"styling-approaches","body":"Styling approaches","heading":"Styling and Layout"}],"p":[{"type":"p","anchor":"traditional-css","body":"If you're using @docusaurus/preset-classic, you can create your own CSS files (e.g. /src/css/custom.css) and import them globally by passing it as an option into the preset.","heading":"Styling and Layout"},{"type":"p","anchor":"traditional-css","body":"Any CSS you write within that file will be available globally and can be referenced directly using string literals. This is the most traditional approach to writing CSS and is fine for small websites that do not have much customization.","heading":"Styling and Layout"},{"type":"p","anchor":"styling-your-site-with-infima","body":"@docusaurus/preset-classic uses Infima as the underlying styling framework. Infima provides flexible layout and common UI components styling suitable for content-centric websites (blogs, documentation, landing pages). For more details, check out the Infima website.","heading":"Styling and Layout"},{"type":"p","anchor":"styling-your-site-with-infima","body":"When you init your Docusaurus 2 project, the website will be generated with basic Infima stylesheets and default styling. You may customize the styling by editing the /src/css/custom.css file.","heading":"Styling and Layout"},{"type":"p","anchor":"styling-your-site-with-infima","body":"Infima uses 7 shades of each color. We recommend using ColorBox to find the different shades of colors for your chosen primary color.","heading":"Styling and Layout"},{"type":"p","anchor":"styling-your-site-with-infima","body":"Alternatively, use the following tool to generate the different shades for your website and copy the variables into /src/css/custom.css.","heading":"Styling and Layout"},{"type":"p","anchor":"primary_color","body":"Primary Color:","heading":"Styling and Layout"},{"type":"p","anchor":"primary_color","body":"Replace the variables in src/css/custom.css with these new variables.","heading":"Styling and Layout"},{"type":"p","anchor":"styling-approaches","body":"A Docusaurus site is a single-page React application. You can style it the way you style React apps.","heading":"Styling and Layout"},{"type":"p","anchor":"styling-approaches","body":"There are a few approaches/frameworks which will work, depending on your preferences and the type of website you are trying to build. Websites that are highly interactive and behave more like web apps will benefit from a more modern styling approaches that co-locate styles with the components. Component styling can also be particularly useful when you wish to customize or swizzle a component.","heading":"Styling and Layout"},{"type":"p","anchor":"global-styles","body":"This is the most traditional way of styling that most developers (including non-front end developers) would be familiar with.","heading":"Styling and Layout"},{"type":"p","anchor":"global-styles","body":"Assuming you are using @docusaurus/preset-classic and /src/css/custom.css was passed in to the preset config, styles inside that file would be available globally.","heading":"Styling and Layout"},{"type":"p","anchor":"css-modules","body":"To style your components using CSS Modules, name your stylesheet files with the .module.css suffix (e.g. welcome.module.css). webpack will load such CSS files as CSS modules and you have to reference the class names from the imported CSS module (as opposed to using plain strings). This is similar to the convention used in Create React App.","heading":"Styling and Layout"},{"type":"p","anchor":"css-modules","body":"The class names which will be processed by webpack into a globally unique class name during build.","heading":"Styling and Layout"},{"type":"p","anchor":"css-in-js","body":"This section is a work in progress. Welcoming PRs.","heading":"Styling and Layout"},{"type":"p","anchor":"sassscss","body":"To use Sass/SCSS as your CSS preprocessor, install the unofficial Docusaurus 2 plugin docusaurus-plugin-sass. This plugin works for both global styles and the CSS modules approach:","heading":"Styling and Layout"},{"type":"p","anchor":"global-styles-using-sassscss","body":"You can now set the customCss property of @docusaurus/preset-classic to point to your Sass/SCSS file:","heading":"Styling and Layout"},{"type":"p","anchor":"modules-using-sassscss","body":"Name your stylesheet files with the .module.scss suffix (e.g. welcome.module.scss) instead of .css. Webpack will use sass-loader to preprocess your stylesheets and load them as CSS modules.","heading":"Styling and Layout"}],"h3":[{"type":"h3","anchor":"global-styles","body":"Global styles","heading":"Styling and Layout"},{"type":"h3","anchor":"css-modules","body":"CSS modules","heading":"Styling and Layout"},{"type":"h3","anchor":"css-in-js","body":"CSS-in-JS","heading":"Styling and Layout"},{"type":"h3","anchor":"sassscss","body":"Sass/SCSS","heading":"Styling and Layout"}]}},{"url":"docs/support","dataNodes":{"h1":[{"type":"h1","anchor":"stack-overflow","body":"Support","heading":"Support"}],"p":[{"type":"p","anchor":"stack-overflow","body":"Docusaurus has a community of thousands of developers.","heading":"Support"},{"type":"p","anchor":"stack-overflow","body":"On this page we've listed some Docusaurus-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.","heading":"Support"},{"type":"p","anchor":"stack-overflow","body":"Before participating in Docusaurus' communities, please read our Code of Conduct. We have adopted the Contributor Covenant and we expect that all community members adhere to the guidelines within.","heading":"Support"},{"type":"p","anchor":"stack-overflow","body":"Stack Overflow is a popular forum to ask code-level questions or if you're stuck with a specific error. Read through the existing questions tagged with docusaurus or ask your own!","heading":"Support"},{"type":"p","anchor":"discussion-forums","body":"There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of Docusaurus. If you have an answerable code-level question, Stack Overflow is usually a better fit.","heading":"Support"},{"type":"p","anchor":"feature-requests","body":"For new feature requests, you can create a post on our Canny board, which is a handy tool for roadmapping and allows for sorting by upvotes, which gives the core team a better indicator of what features are in high demand, as compared to GitHub issues which are harder to triage. Refrain from making a Pull Request for new features (especially large ones) as someone might already be working on it or will be part of our roadmap. Talk to us first!","heading":"Support"},{"type":"p","anchor":"news","body":"For the latest news about Docusaurus, follow @docusaurus on Twitter and the official Docusaurus blog on this website.","heading":"Support"}],"h2":[{"type":"h2","anchor":"stack-overflow","body":"Stack Overflow","heading":"Support"},{"type":"h2","anchor":"discussion-forums","body":"Discussion forums","heading":"Support"},{"type":"h2","anchor":"feature-requests","body":"Feature requests","heading":"Support"},{"type":"h2","anchor":"news","body":"News","heading":"Support"}]}},{"url":"docs/team","dataNodes":{"h1":[{"type":"h1","anchor":"active-team","body":"Team","heading":"Team"}],"h2":[{"type":"h2","anchor":"active-team","body":"Active Team","heading":"Team"},{"type":"h2","anchor":"honorary-alumni","body":"Honorary Alumni","heading":"Team"},{"type":"h2","anchor":"acknowledgements","body":"Acknowledgements","heading":"Team"}],"h3":[{"type":"h3","anchor":"active-team","body":"Alexey Pyltsyn","heading":"Team"},{"type":"h3","anchor":"active-team","body":"Fanny Vieira","heading":"Team"},{"type":"h3","anchor":"active-team","body":"Joel Marcey","heading":"Team"},{"type":"h3","anchor":"active-team","body":"Yangshun Tay","heading":"Team"},{"type":"h3","anchor":"honorary-alumni","body":"Endilie Yacop Sucipto","heading":"Team"},{"type":"h3","anchor":"honorary-alumni","body":"Wei Gao","heading":"Team"}],"p":[{"type":"p","anchor":"acknowledgements","body":"Docusaurus was originally created by Joel Marcey. Today, Docusaurus has a few hundred open source contributors. We’d like to recognize a few people who have made significant contributions to Docusaurus and its documentation in the past and have helped maintain them over the years:","heading":"Team"}]}},{"url":"docs/theme-classic","dataNodes":{"h1":[{"type":"h1","anchor":"common","body":"@docusaurus/theme-classic","heading":"@docusaurus/theme-classic"}],"p":[{"type":"p","anchor":"common","body":"This section is a work in progress.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"color-mode---dark-mode","body":"The classic theme provides by default light and dark mode support, with a navbar switch for the user.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"color-mode---dark-mode","body":"It is possible to customize the color mode support with the following configuration:","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"color-mode---dark-mode","body":"With respectPrefersColorScheme: true, the defaultMode is overridden by user system preferences.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"color-mode---dark-mode","body":"If you only want to support one color mode, you likely want to ignore user system preferences.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"meta-image","body":"You can configure a default image that will be used for your meta tag, in particular og:image and twitter:image.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"announcement-bar","body":"Sometimes you want to announce something in your website. Just for such a case, you can add an announcement bar. This is a non-fixed and dismissable panel above the navbar.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"usethemecontext","body":"React hook to access theme context. This context contains functions for setting light and dark mode and boolean property, indicating which mode is currently in use.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"usethemecontext","body":"Usage example:","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"usethemecontext","body":"The component calling useThemeContext must be a child of the Layout component.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-title--logo","body":"You can add a logo and title to the navbar via themeConfig.navbar. Logo can be placed in static folder. Logo URL is set to base URL of your site by default. Although you can specify your own URL for the logo, if it is an external link, it will open in a new tab. In addition, you can override a value for the target attribute of logo link, it can come in handy if you are hosting docs website in a subdirectory of your main website, and in which case you probably do not need a link in the logo to the main website will open in a new tab.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-title--logo","body":"To improve dark mode support, you can also set a different logo for this mode.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-items","body":"You can add items to the navbar via themeConfig.navbar.items.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-items","body":"By default, Navbar items are regular links (internal or external).","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-items","body":"React Router should automatically apply active link styling to links, but you can use activeBasePath in edge cases. For cases in which a link should be active on several different paths (such as when you have multiple doc folders under the same sidebar), you can use activeBaseRegex. activeBaseRegex is a more flexible alternative to activeBasePath and takes precedence over it -- Docusaurus parses it into a regular expression that is tested against the current URL.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-items","body":"Outbound (external) links automatically get target=\"_blank\" rel=\"noopener noreferrer\" attributes.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-dropdown","body":"Navbar items can also be dropdown items by specifying the items, an inner array of navbar items.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-docs-version-dropdown","body":"If you use docs with versioning, this special navbar item type that will render a dropdown with all your site's available versions. The user will be able to switch from one version to another, while staying on the same doc (as long as the doc id is constant across versions).","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"navbar-docs-version","body":"If you use docs with versioning, this special navbar item type will link to the active/browsed version of your doc (depends on the current url), and fallback to the latest version.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"auto-hide-sticky-navbar","body":"You can enable this cool UI feature that automatically hides the navbar when a user starts scrolling down the page, and show it again when the user scrolls up.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"codeblock","body":"Docusaurus uses Prism React Renderer to highlight code blocks.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"theme","body":"By default, we use Palenight as syntax highlighting theme. You can specify a custom theme from the list of available themes. If you want to use a different syntax highlighting theme when the site is in dark mode, you may also do so.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"theme","body":"If you use the line highlighting Markdown syntax, you might need to specify a different highlight background color for the dark mode syntax highlighting theme. Refer to the docs for guidance.","heading":"@docusaurus/theme-classic"},{"type":"p","anchor":"default-language","body":"You can set a default language for code blocks if no language is added after the opening triple backticks (i.e. ```). Note that a valid language name must be passed, e.g.:","heading":"@docusaurus/theme-classic"}],"h2":[{"type":"h2","anchor":"common","body":"Common","heading":"@docusaurus/theme-classic"},{"type":"h2","anchor":"hooks","body":"Hooks","heading":"@docusaurus/theme-classic"},{"type":"h2","anchor":"navbar","body":"Navbar","heading":"@docusaurus/theme-classic"},{"type":"h2","anchor":"codeblock","body":"CodeBlock","heading":"@docusaurus/theme-classic"}],"h3":[{"type":"h3","anchor":"color-mode---dark-mode","body":"Color mode - dark mode","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"meta-image","body":"Meta image","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"announcement-bar","body":"Announcement bar","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"usethemecontext","body":"useThemeContext","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"navbar-title--logo","body":"Navbar title & logo","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"navbar-items","body":"Navbar items","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"navbar-dropdown","body":"Navbar dropdown","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"navbar-docs-version-dropdown","body":"Navbar docs version dropdown","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"navbar-docs-version","body":"Navbar docs version","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"auto-hide-sticky-navbar","body":"Auto-hide sticky navbar","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"theme","body":"Theme","heading":"@docusaurus/theme-classic"},{"type":"h3","anchor":"default-language","body":"Default language","heading":"@docusaurus/theme-classic"}]}},{"url":"docs/typescript-support","dataNodes":{"h1":[{"type":"h1","anchor":"setup","body":"TypeScript Support","heading":"TypeScript Support"}],"h2":[{"type":"h2","anchor":"setup","body":"Setup","heading":"TypeScript Support"},{"type":"h2","anchor":"swizzling-typescript-theme-components","body":"Swizzling TypeScript theme components","heading":"TypeScript Support"}],"p":[{"type":"p","anchor":"setup","body":"Docusaurus supports writing and using TypeScript theme components. To start using TypeScript, add @docusaurus/module-type-aliases to your project:","heading":"TypeScript Support"},{"type":"p","anchor":"setup","body":"Then add tsconfig.json to your project root with following content:","heading":"TypeScript Support"},{"type":"p","anchor":"setup","body":"Docusaurus doesn't use this tsconfig.json to compile your TypeScript. It is added just for a nicer Editor experience, although you can choose to run tsc --noEmit to type check your code for yourself.","heading":"TypeScript Support"},{"type":"p","anchor":"setup","body":"Then add types.d.ts in your src folder with the following content:","heading":"TypeScript Support"},{"type":"p","anchor":"setup","body":"This file makes TypeScript recognize various Docusaurus specific webpack aliases like @theme, @docusaurus, @generated.","heading":"TypeScript Support"},{"type":"p","anchor":"setup","body":"Now you can start writing TypeScript theme components.","heading":"TypeScript Support"},{"type":"p","anchor":"swizzling-typescript-theme-components","body":"For themes that supports TypeScript theme components, you can add the --typescript flag to the end of swizzling command to get TypeScript source code. For example, the following command will generate index.tsx and styles.module.css into src/theme/Footer.","heading":"TypeScript Support"},{"type":"p","anchor":"swizzling-typescript-theme-components","body":"At this moment, the only official Docusaurus theme that supports TypeScript theme components is @docusaurus/theme-classic. If you are a Docusaurus theme package author who wants to add TypeScript support, see the Lifecycle APIs docs.","heading":"TypeScript Support"}]}},{"url":"docs/using-plugins","dataNodes":{"h1":[{"type":"h1","anchor":"installing-a-plugin","body":"Plugins","heading":"Plugins"}],"p":[{"type":"p","anchor":"installing-a-plugin","body":"Plugins are the building blocks of features in a Docusaurus 2 site. Each plugin handles its own individual feature. Plugins may work and be distributed as part of bundle via presets.","heading":"Plugins"},{"type":"p","anchor":"installing-a-plugin","body":"A plugin is usually a npm package, so you install them like other npm packages using npm.","heading":"Plugins"},{"type":"p","anchor":"installing-a-plugin","body":"Then you add it in your site's docusaurus.config.js's plugins option:","heading":"Plugins"},{"type":"p","anchor":"installing-a-plugin","body":"Docusaurus can also load plugins from your local directory, you can do something like the following:","heading":"Plugins"},{"type":"p","anchor":"configuring-plugins","body":"For the most basic usage of plugins, you can provide just the plugin name or the absolute path to the plugin.","heading":"Plugins"},{"type":"p","anchor":"configuring-plugins","body":"However, plugins can have options specified by wrapping the name and an options object in an array inside your config. This style is usually called Babel Style.","heading":"Plugins"},{"type":"p","anchor":"configuring-plugins","body":"Example:","heading":"Plugins"},{"type":"p","anchor":"multi-instance-plugins-and-plugin-ids","body":"It is possible to use multiple times the same plugin, on the same Docusaurus website.","heading":"Plugins"},{"type":"p","anchor":"multi-instance-plugins-and-plugin-ids","body":"In this case, you it is required to assign a unique id to each plugin instance.","heading":"Plugins"},{"type":"p","anchor":"multi-instance-plugins-and-plugin-ids","body":"By default, the plugin id is default.","heading":"Plugins"},{"type":"p","anchor":"plugins-design","body":"Docusaurus' implementation of the plugins system provides us with a convenient way to hook into the website's lifecycle to modify what goes on during development/build, which involves (but not limited to) extending the webpack config, modifying the data being loaded and creating new components to be used in a page.","heading":"Plugins"},{"type":"p","anchor":"creating-plugins","body":"A plugin is a module which exports a function that takes two parameters and returns an object when executed.","heading":"Plugins"},{"type":"p","anchor":"module-definition","body":"The exported modules for plugins are called with two parameters: context and options and returns a JavaScript object with defining the lifecycle APIs.","heading":"Plugins"},{"type":"p","anchor":"module-definition","body":"For example if you have a reference to a local folder such as this in your docusaurus.config.js:","heading":"Plugins"},{"type":"p","anchor":"module-definition","body":"Then in the folder my-plugin you can create an index.js such as this","heading":"Plugins"},{"type":"p","anchor":"module-definition","body":"The my-plugin folder could also be a fully fledged package with it's own package.json and a src/index.js file for example","heading":"Plugins"},{"type":"p","anchor":"context","body":"context is plugin-agnostic and the same object will be passed into all plugins used for a Docusaurus website. The context object contains the following fields:","heading":"Plugins"},{"type":"p","anchor":"options","body":"options are the second optional parameter when the plugins are used. options are plugin-specific and are specified by users when they use them in docusaurus.config.js. Alternatively, if preset contains the plugin, the preset will then be in charge of passing the correct options into the plugin. It is up to individual plugin to define what options it takes.","heading":"Plugins"},{"type":"p","anchor":"return-value","body":"The returned object value should implement the lifecycle APIs.","heading":"Plugins"},{"type":"p","anchor":"official-plugins","body":"Find the list of official Docusaurus plugins here.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-blog","body":"Provides the Blog feature and is the default blog plugin for Docusaurus.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-blog","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-blog","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-docs","body":"Provides the Docs functionality and is the default docs plugin for Docusaurus.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-docs","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-docs","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-pages","body":"The default pages plugin for Docusaurus. The classic template ships with this plugin with default configurations. This plugin provides creating pages functionality.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-pages","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-content-pages","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-analytics","body":"The default Google Analytics plugin. It is a JavaScript library for measuring how users interact with your website.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-analytics","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-analytics","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-analytics","body":"Configuration","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-gtag","body":"The default Global Site Tag (gtag.js) plugin. It is a JavaScript tagging framework and API that allows you to send event data to Google Analytics, Google Ads, and Google Marketing Platform. This section describes how to configure a Docusaurus site to enable global site tag for Google Analytics.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-gtag","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-gtag","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-google-gtag","body":"Configuration","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-sitemap","body":"This plugin creates sitemap for your site so that search engine crawlers can crawl your site more accurately.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-sitemap","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-sitemap","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-ideal-image","body":"Docusaurus Plugin to generate an almost ideal image (responsive, lazy-loading, and low quality placeholder) in the production builds.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-ideal-image","body":"Modify your docusaurus.config.js","heading":"Plugins"},{"type":"p","anchor":"usage","body":"This plugin supports the PNG, GIF and JPG formats only.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Docusaurus Plugin to generate client-side redirects.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"This plugin will write additional HTML pages to your static site, that redirects the user to your existing Docusaurus pages with JavaScript.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"This plugin only create redirects for the production build.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"It is better to use server-side redirects whenever possible.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Before using this plugin, you should look if your hosting provider doesn't offer this feature.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Installation","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Configuration","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Main usecase: you have /myDocusaurusPage, and you want to redirect to this page from /myDocusaurusPage.html:","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Second usecase: you have /myDocusaurusPage.html, and you want to redirect to this page from /myDocusaurusPage.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"For custom redirect logic, provide your own createRedirects function.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Let's imagine you change the url of an existing page, you might want to make sure the old url still works:","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"It's possible to use a function to create the redirects for each existing path:","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-client-redirects","body":"Finally, it's possible to use all options at the same time:","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-pwa","body":"Docusaurus Plugin to add PWA support using Workbox. This plugin generates a Service Worker in production build only, and allows you to create fully PWA-compliant documentation site with offline and installation support.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-pwa","body":"Create a PWA manifest at ./static/manifest.json.","heading":"Plugins"},{"type":"p","anchor":"docusaurusplugin-pwa","body":"Modify docusaurus.config.js with a minimal PWA config, like:","heading":"Plugins"},{"type":"p","anchor":"progressive-web-app","body":"Having a service worker installed is not enough to make your application a PWA. You'll need to at least include a Web App Manifest and have the correct tags in <head> (Options > pwaHead).","heading":"Plugins"},{"type":"p","anchor":"progressive-web-app","body":"After deployment, you can use Lighthouse to run an audit on your site.","heading":"Plugins"},{"type":"p","anchor":"progressive-web-app","body":"For a more exhaustive list of what it takes for your site to be a PWA, refer to the PWA Checklist","heading":"Plugins"},{"type":"p","anchor":"app-installation-support","body":"If your browser supports it, you should be able to install a Docusaurus site as an app.","heading":"Plugins"},{"type":"p","anchor":"app-installation-support","body":"","heading":"Plugins"},{"type":"p","anchor":"offline-mode-precaching","body":"We enable users to browse a Docusaurus site offline, by using service-worker precaching.","heading":"Plugins"},{"type":"p","anchor":"what-is-precaching","body":"One feature of service workers is the ability to save a set of files to the cache when the service worker is installing. This is often referred to as \"precaching\", since you are caching content ahead of the service worker being used.","heading":"Plugins"},{"type":"p","anchor":"what-is-precaching","body":"The main reason for doing this is that it gives developers control over the cache, meaning they can determine when and how long a file is cached as well as serve it to the browser without going to the network, meaning it can be used to create web apps that work offline.","heading":"Plugins"},{"type":"p","anchor":"what-is-precaching","body":"Workbox takes a lot of the heavy lifting out of precaching by simplifying the API and ensuring assets are downloaded efficiently.","heading":"Plugins"},{"type":"p","anchor":"what-is-precaching","body":"By default, offline mode is enabled when the site is installed as an app. See the offlineModeActivationStrategies option for details.","heading":"Plugins"},{"type":"p","anchor":"what-is-precaching","body":"After the site has been precached, the service worker will serve cached responses for later visits. When a new build is deployed along with a new service worker, the new one will begin installing and eventually move to a waiting state. During this waiting state, a reload popup will show and ask the user to reload the page for new content. Until the user either clears the application cache or clicks the reload button on the popup, the service worker will continue serving the old content.","heading":"Plugins"},{"type":"p","anchor":"what-is-precaching","body":"Offline mode / precaching requires downloading all the static assets of the site ahead of time, and can consume unnecessary bandwidth. It may not be a good idea to activate it for all kind of sites.","heading":"Plugins"},{"type":"p","anchor":"debug","body":"Turn debug mode on:","heading":"Plugins"},{"type":"p","anchor":"offlinemodeactivationstrategies","body":"Strategies used to turn the offline mode on:","heading":"Plugins"},{"type":"p","anchor":"offlinemodeactivationstrategies","body":"Use this carefully: some users may not like to be forced to use the offline mode.","heading":"Plugins"},{"type":"p","anchor":"injectmanifestconfig","body":"Workbox options to pass to workbox.injectManifest(). This gives you control over which assets will be precached, and be available offline.","heading":"Plugins"},{"type":"p","anchor":"reloadpopup","body":"Module path to reload popup component. This popup is rendered when a new service worker is waiting to be installed, and we suggest a reload to the user.","heading":"Plugins"},{"type":"p","anchor":"reloadpopup","body":"Passing false will disable the popup, but this is not recommended: users won't have a way to get up-to-date content.","heading":"Plugins"},{"type":"p","anchor":"reloadpopup","body":"A custom component can be used, as long as it accepts onReload as a prop. The onReload callback should be called when the reload button is clicked. This will tell the service worker to install the waiting service worker and reload the page.","heading":"Plugins"},{"type":"p","anchor":"reloadpopup","body":"The default theme includes an implementation for the reload popup and uses Infima Alerts.","heading":"Plugins"},{"type":"p","anchor":"reloadpopup","body":"","heading":"Plugins"},{"type":"p","anchor":"pwahead","body":"Array of objects containing tagName and key-value pairs for attributes to inject into the <head> tag. Technically you can inject any head tag through this, but it's ideally used for tags to make your site PWA compliant. Here's a list of tag to make your app fully compliant:","heading":"Plugins"},{"type":"p","anchor":"swcustom","body":"Useful for additional Workbox rules. You can do whatever a service worker can do here, and use the full power of workbox libraries. The code is transpiled, so you can use modern ES6+ syntax here.","heading":"Plugins"},{"type":"p","anchor":"swcustom","body":"For example, to cache files from external routes:","heading":"Plugins"},{"type":"p","anchor":"swcustom","body":"The module should have a default function export, and receives some params.","heading":"Plugins"},{"type":"p","anchor":"swregister","body":"Adds an entry before the Docusaurus app so that registration can happen before the app runs. The default registerSW.js file is enough for simple registration.","heading":"Plugins"},{"type":"p","anchor":"swregister","body":"Passing false will disable registration entirely.","heading":"Plugins"}],"h2":[{"type":"h2","anchor":"installing-a-plugin","body":"Installing a plugin","heading":"Plugins"},{"type":"h2","anchor":"configuring-plugins","body":"Configuring plugins","heading":"Plugins"},{"type":"h2","anchor":"multi-instance-plugins-and-plugin-ids","body":"Multi-instance plugins and plugin ids","heading":"Plugins"},{"type":"h2","anchor":"plugins-design","body":"Plugins design","heading":"Plugins"},{"type":"h2","anchor":"creating-plugins","body":"Creating plugins","heading":"Plugins"},{"type":"h2","anchor":"official-plugins","body":"Official plugins","heading":"Plugins"}],"h3":[{"type":"h3","anchor":"module-definition","body":"Module definition","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-content-blog","body":"@docusaurus/plugin-content-blog","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-content-docs","body":"@docusaurus/plugin-content-docs","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-content-pages","body":"@docusaurus/plugin-content-pages","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-google-analytics","body":"@docusaurus/plugin-google-analytics","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-google-gtag","body":"@docusaurus/plugin-google-gtag","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-sitemap","body":"@docusaurus/plugin-sitemap","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-ideal-image","body":"@docusaurus/plugin-ideal-image","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-client-redirects","body":"@docusaurus/plugin-client-redirects","heading":"Plugins"},{"type":"h3","anchor":"docusaurusplugin-pwa","body":"@docusaurus/plugin-pwa","heading":"Plugins"},{"type":"h3","anchor":"what-is-precaching","body":"What is Precaching?","heading":"Plugins"}]}},{"url":"docs/using-themes","dataNodes":{"h1":[{"type":"h1","anchor":"using-themes","body":"Themes","heading":"Themes"}],"p":[{"type":"p","anchor":"using-themes","body":"Like plugins, themes are designed to add functionality to your Docusaurus site. As a good rule of thumb, themes are mostly focused on client-side, where plugins are more focused on server-side functionalities. Themes are also designed to be replace-able with other themes.","heading":"Themes"},{"type":"p","anchor":"using-themes","body":"To use themes, specify the themes in your docusaurus.config.js. You may use multiple themes:","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"Most of the time, theme is used to provide a set of React components, e.g. Navbar, Layout, Footer.","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"Users can use these components in their code by importing them using the @theme webpack alias:","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"The alias @theme can refer to a few directories, in the following priority:","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"Given the following structure","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"website/src/theme/Navbar.js takes precedence whenever @theme/Navbar is imported. This behavior is called component swizzling. In iOS, method swizzling is the process of changing the implementation of an existing selector (method). In the context of a website, component swizzling means providing an alternative component that takes precedence over the component provided by the theme.","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"Themes are for providing UI components to present the content. Most content plugins need to be paired with a theme in order to be actually useful. The UI is a separate layer from the data schema, so it makes it easy to swap out the themes for other designs (i.e., Bootstrap).","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"For example, a Docusaurus blog consists of a blog plugin and a blog theme.","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"And if you want to use Bootstrap styling, you can swap out the theme with theme-blog-bootstrap (fictitious non-existing theme):","heading":"Themes"},{"type":"p","anchor":"theme-components","body":"The content plugin remains the same and the only thing you need to change is the theme.","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"We would like to discourage swizzling of components until we've minimally reached a Beta stage. The components APIs have been changing rapidly and are likely to keep changing until we reach Beta. Stick with the default appearance for now if possible to save yourself some potential pain in future.","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"Docusaurus Themes' components are designed to be replaceable. To make it easier for you, we created a command for you to replace theme components called swizzle.","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"To swizzle a component for a theme, run the following command in your doc site:","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"As an example, to swizzle the <Footer /> component in @docusaurus/theme-classic for your site, run:","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"This will copy the current <Footer /> component used by the theme to a src/theme/Footer directory under the root of your site, which is where Docusaurus will look for swizzled components. Docusaurus will then use swizzled component in place of the original one from the theme.","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"Although we highly discourage swizzling of all components, if you wish to do that, run:","heading":"Themes"},{"type":"p","anchor":"swizzling-theme-components","body":"Note: You need to restart your webpack dev server in order for Docusaurus to know about the new component.","heading":"Themes"},{"type":"p","anchor":"docusaurustheme-classic","body":"The classic theme for Docusaurus. You can refer to classic theme configuration for more details on the configuration.","heading":"Themes"},{"type":"p","anchor":"docusaurustheme-classic","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","heading":"Themes"},{"type":"p","anchor":"docusaurustheme-search-algolia","body":"This theme provides a @theme/SearchBar component that integrates with Algolia DocSearch easily. Combined with @docusaurus/theme-classic, it provides a very easy search integration. You can read more on search documentation.","heading":"Themes"},{"type":"p","anchor":"docusaurustheme-search-algolia","body":"This theme also adds search page available at /search path with OpenSearch support.","heading":"Themes"},{"type":"p","anchor":"docusaurustheme-search-algolia","body":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","heading":"Themes"},{"type":"p","anchor":"docusaurustheme-live-codeblock","body":"This theme provides a @theme/CodeBlock component that is powered by react-live. You can read more on interactive code editor documentation.","heading":"Themes"},{"type":"p","anchor":"themes-design","body":"While themes share the exact same lifecycle methods with plugins, their implementations can look very different from those of plugins based on themes' designed objectives.","heading":"Themes"},{"type":"p","anchor":"themes-design","body":"Themes are designed to complete the build of your Docusaurus site and supply the components used by your site, plugins, and the themes themselves. So a typical theme implementation would look like a src/index.js file that hooks it up to the lifecycle methods. Most likely they would not use loadContent, which plugins would use. And it is typically accompanied by a src/theme directory full of components.","heading":"Themes"},{"type":"p","anchor":"themes-design","body":"To summarize:","heading":"Themes"},{"type":"p","anchor":"writing-customized-docusaurus-themes","body":"A Docusaurus theme normally includes an index.js file where you hook up to the lifecycle methods, alongside with a theme/ directory of components. A typical Docusaurus theme folder looks like this:","heading":"Themes"},{"type":"p","anchor":"writing-customized-docusaurus-themes","body":"There are two lifecycle methods that are essential to theme implementation:","heading":"Themes"},{"type":"p","anchor":"writing-customized-docusaurus-themes","body":"These lifecycle method are not essential but recommended:","heading":"Themes"}],"h2":[{"type":"h2","anchor":"using-themes","body":"Using themes","heading":"Themes"},{"type":"h2","anchor":"theme-components","body":"Theme components","heading":"Themes"},{"type":"h2","anchor":"swizzling-theme-components","body":"Swizzling theme components","heading":"Themes"},{"type":"h2","anchor":"official-themes-by-docusaurus","body":"Official themes by Docusaurus","heading":"Themes"},{"type":"h2","anchor":"themes-design","body":"Themes design","heading":"Themes"},{"type":"h2","anchor":"writing-customized-docusaurus-themes","body":"Writing customized Docusaurus themes","heading":"Themes"}],"h3":[{"type":"h3","anchor":"docusaurustheme-classic","body":"@docusaurus/theme-classic","heading":"Themes"},{"type":"h3","anchor":"docusaurustheme-search-algolia","body":"@docusaurus/theme-search-algolia","heading":"Themes"},{"type":"h3","anchor":"docusaurustheme-live-codeblock","body":"@docusaurus/theme-live-codeblock","heading":"Themes"}]}},{"url":"docs/versioning","dataNodes":{"h1":[{"type":"h1","anchor":"directory-structure","body":"Versioning","heading":"Versioning"}],"p":[{"type":"p","anchor":"directory-structure","body":"You can use the version script to create a new documentation version based on the latest content in the docs directory. That specific set of documentation will then be preserved and accessible even as the documentation in the docs directory changes moving forward.","heading":"Versioning"},{"type":"p","anchor":"directory-structure","body":"Think about it before starting to version your documentation - it can become difficult for contributors to help improve it!","heading":"Versioning"},{"type":"p","anchor":"directory-structure","body":"Most of the time, you don't need versioning as it will just increase your build time, and introduce complexity to your codebase. Versioning is best suited for websites with high-traffic and rapid changes to documentation between versions. If your documentation rarely changes, don't add versioning to your documentation.","heading":"Versioning"},{"type":"p","anchor":"directory-structure","body":"To better understand how versioning works and see if it suits your needs, you can read on below.","heading":"Versioning"},{"type":"p","anchor":"directory-structure","body":"The table below explains how a versioned file maps to its version and the generated URL.","heading":"Versioning"},{"type":"p","anchor":"tagging-a-new-version","body":"When tagging a new version, the document versioning mechanism will:","heading":"Versioning"},{"type":"p","anchor":"creating-new-files","body":"Master docs","heading":"Versioning"},{"type":"p","anchor":"creating-new-files","body":"Older docs","heading":"Versioning"},{"type":"p","anchor":"versions","body":"Each directory in versioned_docs/ will represent a documentation version.","heading":"Versioning"},{"type":"p","anchor":"updating-an-existing-version","body":"You can update multiple docs versions at the same time because each directory in versioned_docs/ represents specific routes when published.","heading":"Versioning"},{"type":"p","anchor":"updating-an-existing-version","body":"Example: When you change any file in versioned_docs/version-2.6/, it will only affect the docs for version 2.6.","heading":"Versioning"},{"type":"p","anchor":"deleting-an-existing-version","body":"You can delete/remove versions as well.","heading":"Versioning"},{"type":"p","anchor":"deleting-an-existing-version","body":"Example:","heading":"Versioning"},{"type":"p","anchor":"version-your-documentation-only-when-needed","body":"For example, you are building a documentation for your npm package foo and you are currently in version 1.0.0. You then release a patch version for a minor bug fix and it's now 1.0.1.","heading":"Versioning"},{"type":"p","anchor":"version-your-documentation-only-when-needed","body":"Should you cut a new documentation version 1.0.1? You probably shouldn't. 1.0.1 and 1.0.0 docs shouldn't differ according to semver because there are no new features!. Cutting a new version for it will only just create unnecessary duplicated files.","heading":"Versioning"},{"type":"p","anchor":"keep-the-number-of-versions-small","body":"As a good rule of thumb, try to keep the number of your versions below 10. It is very likely that you will have a lot of obsolete versioned documentation that nobody even reads anymore. For example, Jest is currently in version 24.9, and only maintains several latest documentation version with the lowest being 22.X. Keep it small 😊","heading":"Versioning"},{"type":"p","anchor":"use-absolute-import-within-the-docs","body":"Don't use relative paths import within the docs. Because when we cut a version the paths no longer work (the nesting level is different, among other reasons). You can utilize the @site alias provided by docusaurus, that points to the website directory. Example:","heading":"Versioning"}],"h2":[{"type":"h2","anchor":"directory-structure","body":"Directory structure","heading":"Versioning"},{"type":"h2","anchor":"files","body":"Files","heading":"Versioning"},{"type":"h2","anchor":"versions","body":"Versions","heading":"Versioning"},{"type":"h2","anchor":"recommended-practices","body":"Recommended practices","heading":"Versioning"}],"h3":[{"type":"h3","anchor":"tagging-a-new-version","body":"Tagging a new version","heading":"Versioning"},{"type":"h3","anchor":"creating-new-files","body":"Creating new files","heading":"Versioning"},{"type":"h3","anchor":"linking-files","body":"Linking files","heading":"Versioning"},{"type":"h3","anchor":"updating-an-existing-version","body":"Updating an existing version","heading":"Versioning"},{"type":"h3","anchor":"deleting-an-existing-version","body":"Deleting an existing version","heading":"Versioning"},{"type":"h3","anchor":"version-your-documentation-only-when-needed","body":"Version your documentation only when needed","heading":"Versioning"},{"type":"h3","anchor":"keep-the-number-of-versions-small","body":"Keep the number of versions small","heading":"Versioning"},{"type":"h3","anchor":"use-absolute-import-within-the-docs","body":"Use absolute import within the docs","heading":"Versioning"}]}}]