{"keys":[{"path":["dataNodes","h1","body"],"id":"dataNodes.h1.body","weight":5,"src":"dataNodes.h1.body"},{"path":["dataNodes","h2","body"],"id":"dataNodes.h2.body","weight":4,"src":"dataNodes.h2.body"},{"path":["dataNodes","h3","body"],"id":"dataNodes.h3.body","weight":2,"src":"dataNodes.h3.body"},{"path":["dataNodes","p","body"],"id":"dataNodes.p.body","weight":1,"src":"dataNodes.p.body"}],"records":[{"i":0,"$":{"0":[{"v":"Blog","i":0,"n":1}],"1":[{"v":"Advanced topics","i":5,"n":0.707},{"v":"Feed","i":4,"n":1},{"v":"Summary truncation","i":3,"n":0.707},{"v":"Header options","i":2,"n":0.707},{"v":"Adding posts","i":1,"n":0.707},{"v":"Initial setup","i":0,"n":0.707}],"2":[{"v":"Multiple blogs","i":1,"n":0.707},{"v":"Blog-only mode","i":0,"n":0.707}],"3":[{"v":"Set the routeBasePath to the URL route that you want your second blog to be accessed on. Note that the routeBasePath here has to be different from the first blog or else there could be a collision of paths! Also, set path to the path to the directory containing your second blog's entries.","i":14,"n":0.137},{"v":"By default, the classic theme assumes only one blog per website and hence includes only one instance of the blog plugin. If you would like to have multiple blogs on a single website, it's possible too! You can add another blog by specifying another blog plugin in the plugins option for docusaurus.config.js.","i":13,"n":0.139},{"v":"Don't forget to delete the existing homepage at ./src/pages/index.js or else there will be two files mapping to the same route!","i":12,"n":0.218},{"v":"You can run your Docusaurus 2 site without a landing page and instead have your blog's post list page as the index page. Set the routeBasePath to be '/' to indicate it's the root path.","i":11,"n":0.169},{"v":"and for Atom:","i":10,"n":0.577},{"v":"The feed for RSS can be found at:","i":9,"n":0.354},{"v":"Accessing the feed:","i":8,"n":0.577},{"v":"Example usage:","i":7,"n":0.707},{"v":"You can generate RSS/ Atom feed by passing feedOptions.","i":6,"n":0.333},{"v":"Use the <!--truncate--> marker in your blog post to represent what will be shown as the summary when viewing all published blog posts. Anything above <!--truncate--> will be part of the summary. For example:","i":5,"n":0.171},{"v":"The only required field is title; however, we provide options to add author information to your blog post as well along with other options.","i":4,"n":0.204},{"v":"For example, at my-website/blog/2019-09-05-hello-docusaurus-v2.md:","i":3,"n":0.5},{"v":"To publish in the blog, create a file within the blog directory with a formatted name of YYYY-MM-DD-my-blog-post-title.md. The post date is extracted from the file name.","i":2,"n":0.192},{"v":"Then, add a item link to your blog within docusaurus.config.js:","i":1,"n":0.316},{"v":"To setup your site's blog, start by creating a blog directory.","i":0,"n":0.302}]}},{"i":1,"$":{"0":[{"v":"CLI","i":0,"n":1}],"1":[{"v":"Docusaurus CLI commands","i":0,"n":0.577}],"2":[{"v":"docusaurus serve","i":4,"n":0.707},{"v":"docusaurus deploy","i":3,"n":0.707},{"v":"docusaurus swizzle","i":2,"n":0.707},{"v":"docusaurus build","i":1,"n":0.707},{"v":"docusaurus start","i":0,"n":0.707}],"3":[{"v":"Serve your built website localy.","i":11,"n":0.447},{"v":"Deploys your site with GitHub Pages. Check out the docs on deployment for more details.","i":10,"n":0.258},{"v":"To unswizzle a component, simply delete the files of the swizzled component.","i":9,"n":0.289},{"v":"Running the command will copy the relevant theme files to your site folder. You may then make any changes to it and Docusaurus will use it instead of the one provided from the theme.","i":8,"n":0.171},{"v":"Change any Docusaurus theme components to your liking with docusaurus swizzle.","i":7,"n":0.302},{"v":"We highly discourage swizzling of components until we've reached a Beta stage. The components APIs have been changing rapidly and are likely to keep changing until we reach Beta. Stick with the default appearance for now if possible to save yourself some potential pain in future.","i":6,"n":0.147},{"v":"Compiles your site for production.","i":5,"n":0.447},{"v":"Please note that some functionality (for example, anchor links) will not work in development. The functionality will work as expected in production.","i":4,"n":0.213},{"v":"Builds and serves a preview of your site locally with Webpack Dev Server.","i":3,"n":0.277},{"v":"Below is a list of Docusaurus CLI commands and their usages:","i":2,"n":0.302},{"v":"Once your website is bootstrapped, the website source will contain the Docusaurus scripts that you can invoke with your package manager:","i":1,"n":0.218},{"v":"Docusaurus provides a set of scripts to help you generate, serve, and deploy your website.","i":0,"n":0.258}]}},{"i":2,"$":{"0":[{"v":"Configuration","i":0,"n":1}],"1":[{"v":"Customizing Babel Configuration","i":2,"n":0.577},{"v":"Accessing configuration from components","i":1,"n":0.5},{"v":"What goes into a docusaurus.config.js?","i":0,"n":0.447}],"2":[{"v":"Custom configurations","i":3,"n":0.707},{"v":"Theme, plugin, and preset configurations","i":2,"n":0.447},{"v":"Deployment configurations","i":1,"n":0.707},{"v":"Site metadata","i":0,"n":0.707}],"3":[{"v":"Most of the times, this configuration will work just fine. If you want to customize it, you can directly edit this file to customize babel configuration. For your changes to take effect, you need to restart Docusaurus devserver.","i":21,"n":0.162},{"v":"For new Docusaurus projects, we automatically generated a babel.config.js in project root.","i":20,"n":0.289},{"v":"If you just want to use those fields on the client side, you could create your own JS files and import them as ES6 modules, there is no need to put them in docusaurus.config.js.","i":19,"n":0.171},{"v":"Basic example:","i":18,"n":0.707},{"v":"Your configuration object will be made available to all the components of your site. And you may access them via React context as siteConfig.","i":17,"n":0.204},{"v":"Example:","i":16,"n":1},{"v":"Docusaurus guards docusaurus.config.js from unknown fields. To add custom fields, define them in customFields.","i":15,"n":0.267},{"v":"For further help configuring themes, plugins, and presets, see Using Themes, Using Plugins, and Using Presets.","i":14,"n":0.25},{"v":"To specify options for a plugin or theme that is bundled in a preset, pass the options through the presets field. In this example, docs refers to @docusaurus/plugin-content-docs and theme refers to @docusaurus/theme-classic.","i":13,"n":0.174},{"v":"To specify options for a plugin or theme, replace the name of the plugin or theme in the config file with an array containing the name and an options object:","i":12,"n":0.183},{"v":"They can also be loaded from local directories:","i":11,"n":0.354},{"v":"List the theme, plugins, and presets for your site in the themes, plugins, and presets fields, respectively. These are typically npm packages:","i":10,"n":0.213},{"v":"It is recommended to check the deployment docs for more information.","i":9,"n":0.302},{"v":"Deployment configurations such as projectName and organizationName are used when you deploy your site with the deploy command.","i":8,"n":0.236},{"v":"They are used in a number of places such as your site's title and headings, browser tab icon, social sharing (Facebook, Twitter) information or even to generate the correct path to serve your static files.","i":7,"n":0.169},{"v":"Site metadata contains the essential global metadata such as title, url, baseUrl and favicon.","i":6,"n":0.267},{"v":"For exact reference to each of the configurable fields, you may refer to docusaurus.config.js API reference.","i":5,"n":0.25},{"v":"The high-level overview of Docusaurus configuration can be categorized into:","i":4,"n":0.316},{"v":"However, it can be helpful if you have a high-level understanding of how the configurations are designed and implemented.","i":3,"n":0.229},{"v":"You should not have to write your docusaurus.config.js from scratch even if you are developing your site. All templates come with a docusaurus.config.js that includes defaults for the common options.","i":2,"n":0.183},{"v":"Keeping a well-maintained docusaurus.config.js helps you, your collaborators, and your open source contributors be able to focus on documentation while still being able to customize the site.","i":1,"n":0.192},{"v":"Docusaurus has a unique take on configurations. We encourage you to congregate information of your site into one place. We guard the fields of this file, and facilitate making this data object accessible across your site.","i":0,"n":0.167}]}},{"i":3,"$":{"0":[{"v":"Contributing","i":0,"n":1}],"1":[{"v":"License","i":5,"n":1},{"v":"Pull requests","i":4,"n":0.707},{"v":"Working on Docusaurus code","i":3,"n":0.5},{"v":"Our development process","i":2,"n":0.577},{"v":"Get involved","i":1,"n":0.707},{"v":"Code of Conduct","i":0,"n":0.577}],"2":[{"v":"What happens next?","i":10,"n":0.577},{"v":"Sending a pull request","i":9,"n":0.5},{"v":"Proposing a change","i":8,"n":0.577},{"v":"Your first pull request","i":7,"n":0.5},{"v":"Code conventions","i":6,"n":0.707},{"v":"Semantic commit messages","i":5,"n":0.577},{"v":"Installation","i":4,"n":1},{"v":"Reporting security bugs","i":3,"n":0.577},{"v":"Reporting bugs","i":2,"n":0.707},{"v":"Reporting new issues","i":1,"n":0.577},{"v":"Join our Discord channel","i":0,"n":0.5}],"3":[{"v":"By contributing to Docusaurus, you agree that your contributions will be licensed under its MIT license.","i":36,"n":0.25},{"v":"The core Docusaurus team will be monitoring for pull requests. Do help us by keeping pull requests consistent by following the guidelines above.","i":35,"n":0.209},{"v":"In order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you've done this for another Facebook open source project, you're good to go. If you are submitting a pull request for the first time, the Facebook GitHub Bot will reply with a link to the CLA form. You may also complete your CLA here.","i":34,"n":0.122},{"v":"Copy and paste this to the top of your new file(s):","i":33,"n":0.302},{"v":"When adding a new breaking change, follow this template in your pull request:","i":32,"n":0.277},{"v":"A good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI.","i":31,"n":0.209},{"v":"All pull requests should be opened against the master branch.","i":30,"n":0.316},{"v":"Please make sure the following is done when submitting a pull request:","i":29,"n":0.289},{"v":"Small pull requests are much easier to review and more likely to get merged. Make sure the PR does only one thing, otherwise please split it. It is recommended to follow this commit message style.","i":28,"n":0.169},{"v":"If you're only fixing a bug, it's fine to submit a pull request right away but we still recommend to file an issue detailing what you're fixing. This is helpful in case we don't accept that specific fix but want to keep track of the issue.","i":27,"n":0.147},{"v":"If you intend to change the public API (e.g., something in docusaurus.config.js), or make any non-trivial changes to the implementation, we recommend filing an issue with proposal template and including [Proposal] in the title. This lets us reach an agreement on your proposal before you put significant effort into it. These types of issues should be rare.","i":26,"n":0.132},{"v":"If you would like to request a new feature or enhancement but are not yet thinking about opening a pull request, you can also file an issue with feature template.","i":25,"n":0.183},{"v":"We have a list of beginner friendly issues to help you get your feet wet in the Docusaurus codebase and familiar with our contribution process. This is a great place to get started.","i":24,"n":0.174},{"v":"How to Contribute to an Open Source Project on GitHub","i":23,"n":0.316},{"v":"Working on your first Pull Request? You can learn how from this free video series:","i":22,"n":0.258},{"v":"So you have decided to contribute code back to upstream by opening a pull request. You've invested a good chunk of time, and we appreciate it. We will do our best to work with you and get the PR looked at.","i":21,"n":0.156},{"v":"However, there are still some styles that Prettier cannot pick up.","i":20,"n":0.302},{"v":"Prettier will catch most styling issues that may exist in your code. You can check the status of your code styling by simply running npm run prettier.","i":19,"n":0.192},{"v":"Use lower case not title case!","i":18,"n":0.408},{"v":"The various types of commits:","i":17,"n":0.447},{"v":"Example","i":16,"n":1},{"v":"<scope> is optional","i":15,"n":0.577},{"v":"Format: <type>(<scope>): <subject>","i":14,"n":0.577},{"v":"See how a minor change to your commit message style can make you a better programmer.","i":13,"n":0.25},{"v":"Facebook has a bounty program for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.","i":12,"n":0.183},{"v":"You can also file issues as feature requests or enhancements. If you see anything you'd like to be implemented, create an issue with feature template","i":11,"n":0.2},{"v":"If you have questions about using Docusaurus, contact the Docusaurus Twitter account at @docusaurus, and we will do our best to answer your questions.","i":10,"n":0.204},{"v":"We use GitHub Issues for our public bugs. If you would like to report a problem, take a look around and see if someone already opened an issue about it. If you a are certain this is a new, unreported bug, you can submit a bug report.","i":9,"n":0.146},{"v":"When opening a new issue, always make sure to fill out the issue template. This step is very important! Not doing so may result in your issue not managed in a timely fashion. Don't take this personally if this happens, and feel free to open a new issue once you've gathered all the information required by the template.","i":8,"n":0.131},{"v":"When a change made on GitHub is approved, it will be checked by our continuous integration system, CircleCI.","i":7,"n":0.236},{"v":"Docusaurus uses GitHub as its source of truth. The core team will be working directly there. All changes will be public from the beginning.","i":6,"n":0.204},{"v":"To participate in Docusaurus 2 dev, join the #docusaurus-2-dev channel.","i":5,"n":0.316},{"v":"Contributions are very welcome. If you think you need help planning your contribution, please ping us on Twitter at @docusaurus and let us know you are looking for a bit of help.","i":4,"n":0.177},{"v":"There are many ways to contribute to Docusaurus, and many of them do not involve writing any code. Here's a few ideas to get started:","i":3,"n":0.2},{"v":"Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.","i":2,"n":0.174},{"v":"The Open Source Guides website has a collection of resources for individuals, communities, and companies who want to learn how to run and contribute to an open source project. Contributors and people new to open source alike will find the following guides especially useful:","i":1,"n":0.151},{"v":"Docusaurus 2 is currently under alpha development. We have early adopters who already started using it. We are now welcoming contributors to collaborate on the next Docusaurus.","i":0,"n":0.192}]}},{"i":4,"$":{"0":[{"v":"Creating Pages","i":0,"n":0.707}],"1":[{"v":"Using React","i":2,"n":0.707},{"v":"Routing","i":1,"n":1},{"v":"Adding a new page","i":0,"n":0.5}],"3":[{"v":"React is used as the UI library to create pages. Every page component should export a React component and you can leverage on the expressiveness of React to build rich and interactive content.","i":10,"n":0.174},{"v":"All JavaScript/TypeScript files within the src/pages/ directory will have corresponding website paths generated for them. Do not put reusable components or test files (ending with .test.js) into that directory otherwise they will be turned into pages, which might not be intended.","i":9,"n":0.156},{"v":"The latter is preferred as it has the benefits of letting you put files related to the page within that directory. For example, a CSS module file (styles.module.css) with styles meant to only be used on the \"Support\" page. Note: this is merely a recommended directory structure and you will still need to manually import the CSS module file within your component module (support/index.js).","i":8,"n":0.125},{"v":"In this component-based development era, it is encouraged to co-locate your styling, markup and behavior together into components. Each page is a component, and if you need to customize your page design with your own styles, we recommend co-locating your styles with the page component in its own directory. For example, to create a \"Support\" page, you could do one of the following:","i":7,"n":0.126},{"v":"If you are familiar with other static site generators like Jekyll and Next, this routing approach will feel familiar to you. Any JavaScript file you create under /src/pages/ directory will be automatically converted to a website page, following the /src/pages/ directory hierarchy. For example:","i":6,"n":0.151},{"v":"You can also create a page in TypeScript, in which case the file name should use the .tsx extension, eg. hello.tsx.","i":5,"n":0.218},{"v":"Each page doesn't come with any styling. You will need to import the Layout component from @theme/Layout and wrap your contents within that component if you want the navbar and/or footer to appear.","i":4,"n":0.174},{"v":"Once you save the file, the development server will automatically reload the changes. Now open http://localhost:3000/hello, you will see the new page you just created.","i":3,"n":0.2},{"v":"In the /src/pages/ directory, create a file called hello.js with the following contents:","i":2,"n":0.277},{"v":"The functionality of pages is powered by @docusaurus/plugin-content-pages.","i":1,"n":0.354},{"v":"In this section, we will learn about creating ad-hoc pages in Docusaurus using React. This is most useful for creating one-off standalone pages like a showcase page, playground page or support page.","i":0,"n":0.177}]}},{"i":5,"$":{"0":[{"v":"Deployment","i":0,"n":1}],"1":[{"v":"Deploying to Surge","i":6,"n":0.577},{"v":"Deploying to Render","i":5,"n":0.577},{"v":"Deploying to Vercel","i":4,"n":0.577},{"v":"Deploying to Netlify","i":3,"n":0.577},{"v":"Deploying to GitHub Pages","i":2,"n":0.5},{"v":"Self Hosting","i":1,"n":0.707},{"v":"Testing Build Local","i":0,"n":0.577}],"2":[{"v":"Setting up CNAME file","i":7,"n":0.5},{"v":"Using your domain","i":6,"n":0.577},{"v":"Using Azure Pipelines","i":5,"n":0.577},{"v":"Triggering deployment with Travis CI","i":4,"n":0.447},{"v":"Triggering deployment with GitHub Actions","i":3,"n":0.447},{"v":"Deploy","i":2,"n":1},{"v":"Environment settings","i":1,"n":0.707},{"v":"docusaurus.config.js settings","i":0,"n":0.707}],"3":[{"v":"You can deploy any other changes in the future with the command surge.","i":43,"n":0.277},{"v":"Store your domain in a CNAME file for future deployments with the following command:","i":42,"n":0.267},{"v":"Your site is now deployed for free at subdomain.surge.sh or yourdomain.com depending on the method you chose.","i":41,"n":0.243},{"v":"If you have a domain name you can deploy your site using surge to your domain using the command:","i":40,"n":0.229},{"v":"Confirm that the site you want to publish is in the build directory, a randomly generated subdomain *.surge.sh subdomain is always given(which can be edited).","i":39,"n":0.2},{"v":"First-time users of Surge would be prompted to create an account from the command line(happens only once).","i":38,"n":0.243},{"v":"Deploy your app in a matter of seconds using surge with the following steps:","i":37,"n":0.267},{"v":"Surge is a static web hosting platform, it is used to deploy your Docusaurus project from the command line in a minute. Deploying your project to Surge is easy and it is also free (including a custom domain and SSL).","i":36,"n":0.158},{"v":"That's it! Your app will be live on your Render URL as soon as the build finishes.","i":35,"n":0.243},{"v":"Enter the following values during creation.","i":34,"n":0.408},{"v":"Select the branch to deploy. The default is master.","i":33,"n":0.333},{"v":"Create a new Web Service on Render, and give Render permission to access your Docusaurus repo.","i":32,"n":0.25},{"v":"Render offers free static site hosting with fully managed SSL, custom domains, a global CDN and continuous auto-deploy from your Git repo. Deploy your app in just a few minutes by following these steps.","i":31,"n":0.171},{"v":"Now you can connect your site to GitHub or GitLab to automatically receive a new deployment every time you push a commit.","i":30,"n":0.213},{"v":"That's all. Your docs will automatically be deployed.","i":29,"n":0.354},{"v":"Most importantly, however, deploying a Docusaurus project only takes a couple of seconds:","i":28,"n":0.277},{"v":"Deploying your Docusaurus project to Vercel will provide you with various benefits in the areas of performance and ease of use.","i":27,"n":0.218},{"v":"Make sure to disable Netlify setting Pretty URLs to prevent lowercased URLs, unnecessary redirects and 404 errors.","i":26,"n":0.243},{"v":"Once properly configured with the above options, your site should deploy and automatically redeploy upon merging to your deploy branch, which defaults to master.","i":25,"n":0.204},{"v":"If you did not configure these build options, you may still go to \"Site settings\" -> \"Build and deploy\" after your site is created.","i":24,"n":0.204},{"v":"While you set up the site, specify the build commands and directories as follows:","i":23,"n":0.267},{"v":"Then, create your site with Netlify.","i":22,"n":0.408},{"v":"To deploy your Docusaurus 2 sites to Netlify, first make sure the following options are properly configured:","i":21,"n":0.243},{"v":"Now, whenever a new commit lands in master, Travis CI will run your suite of tests and if everything passes, your website will be deployed via the yarn deploy script.","i":20,"n":0.183},{"v":"Continuous integration (CI) services are typically used to perform routine tasks whenever new commits are checked in to source control. These tasks can be any combination of running unit tests and integration tests, automating builds, publishing packages to NPM, and deploying changes to your website. All you need to do to automate the deployment of your website is to invoke the yarn deploy script whenever your website is updated. The following section covers how to do just that using Travis CI, a popular continuous integration service provider.","i":19,"n":0.107},{"v":"This workflow assumes your documentation resided in documentation branch of your repository and your publishing source is configured for gh-pages branch.","i":18,"n":0.218},{"v":"GitHub Actions allow you to automate, customize, and execute your software development workflows right in your repository.","i":17,"n":0.243},{"v":"Windows","i":16,"n":1},{"v":"Bash","i":15,"n":1},{"v":"Finally, to deploy your site to GitHub Pages, run:","i":14,"n":0.333},{"v":"There are two more optional parameters that are set as environment variables:","i":13,"n":0.289},{"v":"Specify the Git user as an environment variable.","i":12,"n":0.354},{"v":"By default, GitHub Pages runs published files through Jekyll. Since Jekyll will discard any files that begin with _, it is recommended that you disable Jekyll by adding an empty file named .nojekyll file to your static directory.","i":11,"n":0.162},{"v":"Example:","i":10,"n":1},{"v":"You may refer to GitHub Pages' documentation User, Organization, and Project Pages for more details.","i":9,"n":0.258},{"v":"In case you want to use your custom domain for GitHub Pages, create a CNAME file in the static directory. Anything within the static directory will be copied to the root of the build directory for deployment.","i":8,"n":0.164},{"v":"First, modify your docusaurus.config.js and add the required params:","i":7,"n":0.333},{"v":"Docusaurus provides an easy way to publish to GitHub Pages. Which is hosting that comes for free with every GitHub repository.","i":6,"n":0.218},{"v":"Docusaurus can be self hosted using docusaurus serve. Change port using --port and --host to change host.","i":5,"n":0.243},{"v":"It is not the most performant solution","i":4,"n":0.378},{"v":"It is important to test build before deploying to a production. Docusaurus includes a docusaurus serve command to test build localy.","i":3,"n":0.218},{"v":"You can deploy your site to static site hosting services such as Vercel, GitHub Pages, Netlify, Render, and Surge. Docusaurus sites are statically rendered so they work without JavaScript too!","i":2,"n":0.183},{"v":"Once it finishes, the static files will be generated within the build/ directory.","i":1,"n":0.277},{"v":"To build the static files of your website for production, run:","i":0,"n":0.302}]}},{"i":6,"$":{"0":[{"v":"Design Principles","i":0,"n":0.707}],"1":[{"v":"How Docusaurus works","i":0,"n":0.577}],"3":[{"v":"We believe that as developers, knowing how a library works is helpful in allowing us to become better at using it. Hence we're dedicating effort into explaining the architecture and various components of Docusaurus with the hope that users reading it will gain a deeper understanding of the tool and be even more proficient in using it.","i":1,"n":0.132},{"v":"This section is a work in progress.","i":0,"n":0.378}]}},{"i":7,"$":{"0":[{"v":"Docs Introduction","i":0,"n":0.707}],"1":[{"v":"Docs-only mode","i":3,"n":0.707},{"v":"Sidebar","i":2,"n":1},{"v":"Home page docs","i":1,"n":0.577},{"v":"Document ID","i":0,"n":0.707}],"2":[{"v":"Sidebar object","i":0,"n":0.707}],"3":[{"v":"There's also a \"blog-only mode\" for those who only want to use the blog feature of Docusaurus 2. You can use the same method detailed above. Follow the setup instructions on Blog-only mode.","i":31,"n":0.174},{"v":"You should delete the existing homepage at ./src/pages/index.js, or else there will be two files mapping to the same route!","i":30,"n":0.224},{"v":"Now, when visiting your site, it will show your initial document instead of a landing page.","i":29,"n":0.25},{"v":"More details on functionality of home page for docs can be found in appropriate section.","i":28,"n":0.258},{"v":"To enable docs-only mode, set the routeBasePath property of the docs object to the root of your site. Also, set the homePageId property to the ID of the document that you wish to show by default.","i":27,"n":0.167},{"v":"If you only want the documentation feature, you can run your Docusaurus 2 site without a landing page and display your documentation page as the index page instead.","i":26,"n":0.189},{"v":"For docs that have collapsible categories, you may want more fine-grain control over certain categories. If you want specific categories to be always expanded, you can set collapsed to false:","i":25,"n":0.183},{"v":"For sites with a sizable amount of content, we support the option to expand/collapse a category to toggle the display of its contents. Categories are collapsible by default. If you want them to be always expanded, set themeConfig.sidebarCollapsible to false:","i":24,"n":0.158},{"v":"Note: it's possible to use the shorthand syntax to create nested categories:","i":23,"n":0.289},{"v":"As an example, here's how we created the subcategory for \"Docs\" under \"Guides\" in this site:","i":22,"n":0.25},{"v":"This is used to add hierarchies to the sidebar:","i":21,"n":0.333},{"v":"Sidebar item type that links to doc without bounding it to the sidebar. Example:","i":20,"n":0.267},{"v":"Sidebar item type that links to a non-document page. Example:","i":19,"n":0.316},{"v":"Note that using this type will bind the linked doc to current sidebar, this means that if you access doc1 page, the sidebar displayed will be the sidebar this item is on. For below case, doc1 is bounded to firstSidebar.","i":18,"n":0.158},{"v":"Using just the Document ID is perfectly valid as well, the following is equivalent to the above:","i":17,"n":0.243},{"v":"Sidebar item type that links to a doc page. Example:","i":16,"n":0.316},{"v":"As the name implies, SidebarItem is an item defined in a Sidebar. There are a few types we support:","i":15,"n":0.229},{"v":"Example:","i":14,"n":1},{"v":"You can also have multiple sidebars for different Markdown files by adding more top-level keys to the exported object.","i":13,"n":0.229},{"v":"Keep in mind that EcmaScript does not guarantee Object.keys({a,b}) === ['a','b'] (yet, this is generally true). If you don't want to rely on iteration order of JavaScript object keys for the category name, the following sidebar object is also equivalent of the above shorthand syntax.","i":12,"n":0.149},{"v":"Below is an example of a sidebar object. The key docs is the id of the sidebar (can be renamed to something else) and Getting Started is a category within the sidebar. greeting and doc1 are both sidebar item.","i":11,"n":0.16},{"v":"A sidebar object is defined like this:","i":10,"n":0.378},{"v":"To generate a sidebar to your Docusaurus site, you need to define a file that exports a sidebar object and pass that into the @docusaurus/plugin-docs plugin directly or via @docusaurus/preset-classic.","i":9,"n":0.183},{"v":"The page docs that you created (eg. src/pages/docs.js) will take precedence over the route generated via the homePageId option.","i":8,"n":0.229},{"v":"The document id of _index is reserved exclusively for the home doc page, so it will not work as a standalone route. If left to the default, the page will not show a sidebar. If you wish to have a sidebar for this page, specify the document id that is listed in the sidebar file.","i":7,"n":0.135},{"v":"Given the example above, now when you navigate to the path /docs you will see that the document content with id is getting-started. This functionality also works for docs with versioning enabled. Importantly, with document serves as home docs page, it will not be available at its URL. Following the example above, this means that the docs/getting-started URL will be lead to a 404 error.","i":6,"n":0.124},{"v":"Using the homePageId property, you can create a home page of your docs. To do this, you can create a new document, especially for this purpose with the id as _index, or you could specify an existing document id.","i":5,"n":0.16},{"v":"If you want more control over the last part of the document URL, it is possible to add a slug (defaults to the id).","i":4,"n":0.204},{"v":"However, the last part of the id can be defined by user in the front matter. For example, if guide/hello.md's content is defined as below, its final id is guide/part1.","i":3,"n":0.183},{"v":"For example, greeting.md id is greeting and guide/hello.md id is guide/hello.","i":2,"n":0.302},{"v":"Every document has a unique id. By default, a document id is the name of the document (without the extension) relative to the root docs directory.","i":1,"n":0.196},{"v":"The docs feature provides users with a way to organize Markdown files in a hierarchical format.","i":0,"n":0.25}]}},{"i":8,"$":{"0":[{"v":"Docusaurus Client API","i":0,"n":0.577}],"1":[{"v":"Modules","i":2,"n":1},{"v":"Hooks","i":1,"n":1},{"v":"Components","i":0,"n":1}],"2":[{"v":"ExecutionEnvironment","i":10,"n":1},{"v":"useAllPluginInstancesData(pluginName: string)","i":9,"n":0.707},{"v":"usePluginData(pluginName: string, pluginId?: string)","i":8,"n":0.5},{"v":"useGlobalData()","i":7,"n":1},{"v":"useBaseUrlUtils","i":6,"n":1},{"v":"useBaseUrl","i":5,"n":1},{"v":"useDocusaurusContext","i":4,"n":1},{"v":"<BrowserOnly/>","i":3,"n":1},{"v":"<Redirect/>","i":2,"n":1},{"v":"<Link/>","i":1,"n":1},{"v":"<Head/>","i":0,"n":1}],"3":[{"v":"A module which exposes a few boolean variables to check the current rendering environment. Useful if you want to only run certain code on client/server or need to write server-side rendering compatible code.","i":28,"n":0.174},{"v":"Usage example:","i":27,"n":0.707},{"v":"Access global data created by a specific plugin. Given a plugin name, it returns the data of all the plugins instances of that name, by pluginId.","i":26,"n":0.196},{"v":"Usage example:","i":25,"n":0.707},{"v":"pluginId is optional if you don't use multi-instance plugins.","i":24,"n":0.333},{"v":"This is the most convenient hook to access plugin global data, and should be used most of the time.","i":23,"n":0.229},{"v":"Access global data created by a specific plugin instance.","i":22,"n":0.333},{"v":"Inspect your site's global data at ./docusaurus/globalData.json","i":21,"n":0.378},{"v":"Usage example:","i":20,"n":0.707},{"v":"Plugin id is only useful when a plugin is used multiple times on the same site. Each plugin instance is able to create its own global data.","i":19,"n":0.192},{"v":"Global data is namespaced by plugin name, and plugin id.","i":18,"n":0.316},{"v":"React hook to access Docusaurus global data created by all the plugins.","i":17,"n":0.289},{"v":"Sometimes useBaseUrl is not good enough. This hook return additional utils related to your site's base url.","i":16,"n":0.243},{"v":"Example usage:","i":15,"n":0.707},{"v":"React hook to automatically prepend baseUrl to a string automatically. This is particularly useful if you don't want to hardcode your config's baseUrl. We highly recommend you to use this.","i":14,"n":0.183},{"v":"Usage example:","i":13,"n":0.707},{"v":"React hook to access Docusaurus Context. Context contains siteConfig object from docusaurus.config.js, and some additional site metadata.","i":12,"n":0.243},{"v":"The <BrowserOnly> component accepts a children prop, a render function which will not be executed during the pre-rendering phase of the build process. This is useful for hiding code that is only meant to run in the browsers (e.g. where the window/document objects are being accessed). To improve SEO, you can also provide fallback content using the fallback prop, which will be prerendered until in the build process and replaced with the client-side only contents when viewed in the browser.","i":11,"n":0.112},{"v":"@docusaurus/router implements React Router and supports its features.","i":10,"n":0.354},{"v":"Example usage:","i":9,"n":0.707},{"v":"Rendering a <Redirect> will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do. You can refer to React Router's Redirect documentation for more info on available props.","i":8,"n":0.156},{"v":"The target location to navigate to. Example: /docs/introduction.","i":7,"n":0.354},{"v":"The component is a wrapper around react-router’s <Link> component that adds useful enhancements specific to Docusaurus. All props are passed through to react-router’s <Link> component.","i":6,"n":0.2},{"v":"This component enables linking to internal pages as well as a powerful performance feature called preloading. Preloading is used to prefetch resources so that the resources are fetched by the time the user navigates with this component. We use an IntersectionObserver to fetch a low-priority request when the <Link> is in the viewport and then use an onMouseOver event to trigger a high-priority request when it is likely that a user will navigate to the requested resource.","i":5,"n":0.114},{"v":"Outputs","i":4,"n":1},{"v":"Nested or latter components will override duplicate usages:","i":3,"n":0.354},{"v":"Usage Example:","i":2,"n":0.707},{"v":"This reusable React component will manage all of your changes to the document head. It takes plain HTML tags and outputs plain HTML tags and is beginner-friendly. It is a wrapper around React Helmet.","i":1,"n":0.171},{"v":"Docusaurus provides some APIs on the clients that can be helpful to you when building your site.","i":0,"n":0.243}]}},{"i":9,"$":{"0":[{"v":"docusaurus.config.js","i":0,"n":1}],"1":[{"v":"Optional fields","i":2,"n":0.707},{"v":"Required fields","i":1,"n":0.707},{"v":"Overview","i":0,"n":1}],"2":[{"v":"stylesheets","i":15,"n":1},{"v":"scripts","i":14,"n":1},{"v":"customFields","i":13,"n":1},{"v":"presets","i":12,"n":1},{"v":"themes","i":11,"n":1},{"v":"plugins","i":10,"n":1},{"v":"themeConfig","i":9,"n":1},{"v":"githubHost","i":8,"n":1},{"v":"projectName","i":7,"n":1},{"v":"organizationName","i":6,"n":1},{"v":"tagline","i":5,"n":1},{"v":"onBrokenLinks","i":4,"n":1},{"v":"baseUrl","i":3,"n":1},{"v":"url","i":2,"n":1},{"v":"favicon","i":1,"n":1},{"v":"title","i":0,"n":1}],"3":[{"v":"Example:","i":23,"n":1},{"v":"An array of CSS sources to load. The values can be either strings or plain objects of attribute-value maps. The <link> tags will be inserted in the HTML <head>.","i":22,"n":0.186},{"v":"Example:","i":21,"n":1},{"v":"Note that <script> added here are render-blocking so you might want to add async: true/defer: true to the objects.","i":20,"n":0.229},{"v":"An array of scripts to load. The values can be either strings or plain objects of attribute-value maps. The <script> tags will be inserted in the HTML <head>.","i":19,"n":0.189},{"v":"Attempting to add unknown field in the config will lead to error in build time:","i":18,"n":0.258},{"v":"Docusaurus guards docusaurus.config.js from unknown fields. To add a custom field, define it on customFields.","i":17,"n":0.258},{"v":"Example:","i":16,"n":1},{"v":"For Docusaurus' default theme classic, we use themeConfig to customize your navbar and footer links:","i":15,"n":0.258},{"v":"An object containing data needed by the theme you use.","i":14,"n":0.316},{"v":"The hostname of your server. Useful if you are using GitHub Enterprise.","i":13,"n":0.289},{"v":"The name of the GitHub repository. Used by the deployment command.","i":12,"n":0.302},{"v":"The GitHub user or organization that owns the repository. Used by the deployment command.","i":11,"n":0.267},{"v":"The tagline for your website.","i":10,"n":0.447},{"v":"The broken links detection is only available for a production build (docusaurus build).","i":9,"n":0.277},{"v":"By default, it throws an error, to ensure you never ship any broken link, but you can lower this security if needed.","i":8,"n":0.213},{"v":"The behavior of Docusaurus, when it detects any broken link.","i":7,"n":0.316},{"v":"Base URL for your site. This can also be considered the path after the host. For example, /metro/ is the baseUrl of https://facebook.github.io/metro/. For URLs that have no path, the baseUrl should be set to /. This field is related to the url field.","i":6,"n":0.151},{"v":"URL for your website. This can also be considered the top-level hostname. For example, https://facebook.github.io is the URL of https://facebook.github.io/metro/, and https://docusaurus.io is the URL for https://docusaurus.io. This field is related to the baseUrl field.","i":5,"n":0.169},{"v":"So you can refer it like below:","i":4,"n":0.378},{"v":"You can also use the favicon URL relative to the static directory of your site. For example, your site has the following directory structure:","i":3,"n":0.204},{"v":"URL for site favicon. Example:","i":2,"n":0.447},{"v":"Title for your website.","i":1,"n":0.5},{"v":"docusaurus.config.js contains configurations for your site and is placed in the root directory of your site.","i":0,"n":0.25}]}},{"i":10,"$":{"0":[{"v":"Installation","i":0,"n":1}],"1":[{"v":"Problems?","i":6,"n":1},{"v":"Updating your Docusaurus version","i":5,"n":0.5},{"v":"Build","i":4,"n":1},{"v":"Running the development server","i":3,"n":0.5},{"v":"Project structure","i":2,"n":0.707},{"v":"Scaffold project website","i":1,"n":0.577},{"v":"Requirements","i":0,"n":1}],"2":[{"v":"Project structure rundown","i":0,"n":0.577}],"3":[{"v":"Ask for help on Stack Overflow, on our GitHub repository or Twitter.","i":17,"n":0.289},{"v":"Alternatively, if you are using Yarn, you can do:","i":16,"n":0.333},{"v":"You should see the correct version as output.","i":15,"n":0.354},{"v":"To check that that the update occurred successfully, run:","i":14,"n":0.333},{"v":"Then, in the directory containing package.json, run your package manager's install command:","i":13,"n":0.289},{"v":"Please update to the latest Docusaurus 2 version shown at the top of the page, not what is shown below.","i":12,"n":0.224},{"v":"There are many ways to update your Docusaurus version. One guaranteed way is to manually change the version number in package.json to the desired version. Note that all @docusaurus/-namespaced packages should be using the same version.","i":11,"n":0.167},{"v":"and contents will be generated within the /build directory, which can be copied to any static file hosting service like GitHub pages, Now or Netlify. Check out the docs on deployment for more details.","i":10,"n":0.171},{"v":"Docusaurus is a modern static website generator so we need to build the website into a directory of static contents and put it on a web server so that it can be viewed. To build the website:","i":9,"n":0.164},{"v":"Congratulations! You have just created your first Docusaurus site! Browse around the site to see what's available.","i":8,"n":0.243},{"v":"By default, a browser window will open at http://localhost:3000.","i":7,"n":0.333},{"v":"To preview your changes as you edit the files, you can run a local development server that will serve your website and it will reflect the latest changes.","i":6,"n":0.189},{"v":"Assuming you chose the classic template and named your site my-website, you will see the following files generated under a new directory my-website/:","i":5,"n":0.209},{"v":"[FB-Only]: If you are setting up a new Docusaurus website for a Facebook open source project, use the facebook template instead, which comes with some useful Facebook-specific defaults:","i":4,"n":0.189},{"v":"If you do not specify name or template, it will prompt you for them. We recommend the classic template so that you can get started quickly and it contains features found in Docusaurus 1. The classic template contains @docusaurus/preset-classic which includes standard documentation, a blog, custom pages, and a CSS framework (with dark mode support). You can get up and running extremely quickly with the classic template and customize things later on when you have gained more familiarity with Docusaurus.","i":3,"n":0.112},{"v":"Example:","i":2,"n":1},{"v":"The easiest way to install Docusaurus is to use the command line tool that helps you scaffold a skeleton Docusaurus website. You can run this command anywhere in a new empty repository or within an existing repository, it will create a new directory containing the scaffolded files.","i":1,"n":0.146},{"v":"Docusaurus is essentially a set of npm packages that can be installed over npm.","i":0,"n":0.267}]}},{"i":11,"$":{"0":[{"v":"Lifecycle APIs","i":0,"n":0.707}],"1":[{"v":"Example","i":13,"n":1},{"v":"getClientModules()","i":12,"n":1},{"v":"getTypeScriptThemePath()","i":11,"n":1},{"v":"getThemePath()","i":10,"n":1},{"v":"injectHtmlTags()","i":9,"n":1},{"v":"extendCli(cli)","i":8,"n":1},{"v":"postBuild(props)","i":7,"n":1},{"v":"configureWebpack(config, isServer, utils)","i":6,"n":0.577},{"v":"async routesLoaded(routes)","i":5,"n":0.707},{"v":"async contentLoaded({content, actions})","i":4,"n":0.577},{"v":"async loadContent()","i":3,"n":0.707},{"v":"getPathsToWatch()","i":2,"n":1},{"v":"validateThemeConfig({themeConfig,validate})","i":1,"n":1},{"v":"validateOptions({options,validate})","i":0,"n":1}],"2":[{"v":"Merge strategy","i":9,"n":0.707},{"v":"utils","i":8,"n":1},{"v":"isServer","i":7,"n":1},{"v":"config","i":6,"n":1},{"v":"actions","i":5,"n":1},{"v":"content","i":4,"n":1},{"v":"validate","i":3,"n":1},{"v":"themeConfig","i":2,"n":1},{"v":"validate","i":1,"n":1},{"v":"options","i":0,"n":1}],"3":[{"v":"Here's a mind model for a presumptuous plugin implementation.","i":53,"n":0.333},{"v":"As an example, to make your theme load a customCss object from options passed in by the user:","i":52,"n":0.236},{"v":"Returns an array of paths to the modules that are to be imported in the client bundle. These modules are imported globally before React even renders the initial UI.","i":51,"n":0.186},{"v":"Example:","i":50,"n":1},{"v":"If you want to support TypeScript component swizzling for your theme, you can make the path returned by getTypeScriptThemePath() be your source directory, and make path returned by getThemePath() be the compiled JavaScript output.","i":49,"n":0.171},{"v":"Similar to getThemePath(), it should return the path to the directory where the source code of TypeScript theme components can be found. Theme components under this path will not be resolved by Webpack. Therefore, it is not a replacement of getThemePath(). Instead, this path is purely for swizzling TypeScript theme components.","i":48,"n":0.14},{"v":"If you use the folder directory above, your getThemePath can be:","i":47,"n":0.302},{"v":"Returns the path to the directory where the theme components can be found. When your users calls swizzle, getThemePath is called and its returned path is used to find your theme components.","i":46,"n":0.177},{"v":"Example:","i":45,"n":1},{"v":"Inject head and/or body HTML tags to Docusaurus generated HTML.","i":44,"n":0.316},{"v":"Example:","i":43,"n":1},{"v":"Register an extra command to enhance the CLI of docusaurus. cli is commander object.","i":42,"n":0.267},{"v":"Example:","i":41,"n":1},{"v":"Called when a (production) build finishes.","i":40,"n":0.408},{"v":"Read the webpack-merge strategy doc for more details.","i":39,"n":0.354},{"v":"It is possible to specify the merge strategy. For example, if you want a webpack rule to be prepended instead of appended:","i":38,"n":0.213},{"v":"We merge the Webpack configuration parts of plugins into the global Webpack config using webpack-merge.","i":37,"n":0.258},{"v":"For example, this plugin below modify the webpack config to transpile .foo file.","i":36,"n":0.277},{"v":"You may use them to return your webpack configures conditionally.","i":35,"n":0.316},{"v":"The initial call to configureWebpack also receives a util object consists of three functions:","i":34,"n":0.267},{"v":"configureWebpack will be called both in server build and in client build. The server build receives true and the client build receives false as isServer.","i":33,"n":0.2},{"v":"configureWebpack is called with config generated according to client/server build. You may treat this as the base config to be merged with.","i":32,"n":0.213},{"v":"Modifies the internal webpack config. If the return value is a JavaScript object, it will be merged into the final config using webpack-merge. If it is a function, it will be called and receive config as the first argument and an isServer flag as the argument argument.","i":31,"n":0.146},{"v":"Plugins can modify the routes that were generated by all plugins. routesLoaded is called after contentLoaded hook.","i":30,"n":0.243},{"v":"For example, this plugin below create a /friends page which display Your friends are: Yangshun, Sebastien:","i":29,"n":0.25},{"v":"Prefer createData and page-specific data whenever possible.","i":28,"n":0.378},{"v":"Global data is... global: its size affects the loading time of all pages of your site, so try to keep it small.","i":27,"n":0.213},{"v":"One this data is created, you can access it with the global data hooks APIs","i":26,"n":0.258},{"v":"This data become accessible to your client-side/theme code, through the useGlobalData and usePluginData","i":25,"n":0.277},{"v":"This function permits to create some global plugin data, that can be read from any page, including the pages created by other plugins, and your theme layout.","i":24,"n":0.192},{"v":"For example, this plugin below create a /friends page which display Your friends are: Yangshun, Sebastien:","i":23,"n":0.25},{"v":"A function to help you create static data (generally json or string), that you can provide to your routes as props.","i":22,"n":0.218},{"v":"Create a route to add to the website.","i":21,"n":0.354},{"v":"actions contain two functions:","i":20,"n":0.5},{"v":"contentLoaded will be called after loadContent is done, the return value of loadContent() will be passed to contentLoaded as content.","i":19,"n":0.224},{"v":"Plugins should use the data loaded in loadContent and construct the pages/routes that consume the loaded data (optional).","i":18,"n":0.236},{"v":"For example, this plugin below return a random integer between 1 to 10 as content;","i":17,"n":0.258},{"v":"Plugins should use this lifecycle to fetch from data sources (filesystem, remote API, headless CMS, etc) or doing some server processing.","i":16,"n":0.218},{"v":"Example:","i":15,"n":1},{"v":"Specifies the paths to watch for plugins and themes. The paths are watched by the dev server so that the plugin lifecycles are reloaded when contents in the watched paths change. Note that the plugins and themes modules are initially called with context and options from Node, which you may use to find the necessary directory information about the site.","i":14,"n":0.129},{"v":"You can also use ES modules style exports.","i":13,"n":0.354},{"v":"If you don't use Joi for validation you can throw an Error in case of invalid options.","i":12,"n":0.243},{"v":"Joi is recommended for validation and normalization of theme config.","i":11,"n":0.316},{"v":"validateThemeConfig is called with validate function which takes a Joi schema and themeConfig as argument, returns validated and normalized options. validate will automatically handle error and validation config.","i":10,"n":0.189},{"v":"validateThemeConfig is called with themeConfig provided in docusaurus.config.js for validation and normalization.","i":9,"n":0.289},{"v":"Return validated and normalized configuration for the theme.","i":8,"n":0.354},{"v":"You can also use ES modules style exports.","i":7,"n":0.354},{"v":"If you don't use Joi for validation you can throw an Error in case of invalid options and return options in case of success.","i":6,"n":0.204},{"v":"Joi is recommended for validation and normalization of options.","i":5,"n":0.333},{"v":"validateOptions is called with validate function which takes a Joi schema and options as argument, returns validated and normalized options. validate will automatically handle error and validation config.","i":4,"n":0.189},{"v":"validateOptions is called with options passed to plugin for validation and normalization.","i":3,"n":0.289},{"v":"Return validated and normalized options for the plugin. This method is called before the plugin is initialized.You must return options since the returned options will be passed to plugin during intialization.","i":2,"n":0.18},{"v":"Lifecycle APIs are shared by Themes and Plugins.","i":1,"n":0.354},{"v":"This section is a work in progress.","i":0,"n":0.378}]}},{"i":12,"$":{"0":[{"v":"Markdown Features","i":0,"n":0.707}],"1":[{"v":"Assets","i":8,"n":1},{"v":"It is 5:16:02 pm.","i":7,"n":0.5},{"v":"Code blocks","i":6,"n":0.707},{"v":"Callouts/admonitions","i":5,"n":1},{"v":"Tabs","i":4,"n":1},{"v":"Embedding React components with MDX","i":3,"n":0.447},{"v":"Referencing other documents","i":2,"n":0.577},{"v":"Markdown headers","i":1,"n":0.707},{"v":"Hello from Docusaurus","i":0,"n":0.577}],"2":[{"v":"Unknown assets","i":13,"n":0.707},{"v":"Common assets","i":12,"n":0.707},{"v":"Image assets","i":11,"n":0.707},{"v":"Multi-language support code blocks","i":10,"n":0.5},{"v":"Interactive code editor","i":9,"n":0.577},{"v":"Line highlighting","i":8,"n":0.707},{"v":"Syntax highlighting","i":7,"n":0.707},{"v":"Code title","i":6,"n":0.707},{"v":"Specifying title","i":5,"n":0.707},{"v":"Syncing tab choices","i":4,"n":0.577},{"v":"Configuring plugin options","i":3,"n":0.577},{"v":"Configuring plugins","i":2,"n":0.707},{"v":"Only h2 and h3 will be in the toc","i":1,"n":0.333},{"v":"Headers","i":0,"n":1}],"3":[{"v":"This require behavior is not supported for all file extensions, but as an escape hatch you can use the special Webpack syntax to force the file-loader to kick-in:","i":87,"n":0.189},{"v":"In the same way, you can link to existing assets by requiring them and using the returned url in videos, links etc...","i":86,"n":0.213},{"v":"If you are using @docusaurus/plugin-ideal-image, you need to use the dedicated image component, as documented.","i":85,"n":0.258},{"v":"This results in displaying the image:","i":83,"n":0.408},{"v":"The ES imports syntax also works:","i":82,"n":0.408},{"v":"You can use images by requiring them and using an image tag through MDX:","i":81,"n":0.267},{"v":"Let's imagine the following file structure:","i":80,"n":0.408},{"v":"We have setup Webpack loaders to handle most common file types, so that when you import a file, you get its url, and the asset is automatically copied to the output folder.","i":79,"n":0.177},{"v":"Sometimes you want to link to static assets directly from markdown files, and it is convenient to co-locate the asset next to the markdown file using it.","i":78,"n":0.192},{"v":"If you have multiple of these multi-language code tabs, and you want to sync the selection across the tab instances, refer to the Syncing tab choices section.","i":77,"n":0.192},{"v":"You may want to implement your own <MultiLanguageCode /> abstraction if you find the above approach too verbose. We might just implement one in future for convenience.","i":76,"n":0.192},{"v":"And you will get the following:","i":75,"n":0.408},{"v":"The following example is how you can have multi-language code tabs in your docs. Note that the empty lines above and below each language block is intentional. This is a current limitation of MDX, you have to leave empty lines around Markdown syntax for the MDX parser to know that it's Markdown syntax and not JSX.","i":74,"n":0.134},{"v":"Instead of implementing a dedicated component for multi-language support code blocks, we've implemented a generic Tabs component in the classic theme so that you can use it for other non-code scenarios as well.","i":73,"n":0.174},{"v":"With MDX, you can easily create interactive components within your documentation, for example, to display code in multiple programming languages and switching between them using a tabs component.","i":72,"n":0.189},{"v":"The ButtonExample component is now available to use:","i":71,"n":0.354},{"v":"By default, all React imports are available. If you need more imports available, swizzle the react-live scope:","i":70,"n":0.243},{"v":"It is not possible to import components directly from the react-live code editor, you have to define available imports upfront.","i":69,"n":0.224},{"v":"The code block will be rendered as an interactive editor. Changes to the code will reflect on the result panel live.","i":68,"n":0.218},{"v":"To use the plugin, create a code block with live attached to the language meta string.","i":67,"n":0.25},{"v":"You will also need to add the plugin to your docusaurus.config.js.","i":66,"n":0.302},{"v":"First, add the plugin to your package.","i":65,"n":0.378},{"v":"You can create an interactive coding editor with the @docusaurus/theme-live-codeblock plugin.","i":64,"n":0.302},{"v":"(Powered by React Live)","i":63,"n":0.5},{"v":"If there's a syntax that is not currently supported, we are open to adding them! Pull requests welcome.","i":62,"n":0.236},{"v":"Supported commenting syntax:","i":61,"n":0.577},{"v":"You can also use comments with highlight-next-line, highlight-start, and highlight-end to select which lines are highlighted.","i":60,"n":0.25},{"v":"To highlight multiple lines, separate the line numbers by commas or use the range syntax to select a chunk of lines. This feature uses the parse-number-range library and you can find more syntax on their project details.","i":59,"n":0.164},{"v":"To accomplish this, Docusaurus adds the docusaurus-highlight-code-line class to the highlighted lines. You will need to define your own styling for this CSS, possibly in your src/css/custom.css with a custom background color which is dependent on your selected syntax highlighting theme. The color given below works for the default highlighting theme (Palenight), so if you are using another theme, you will have to tweak the color accordingly.","i":58,"n":0.122},{"v":"You can bring emphasis to certain lines of code by specifying line ranges after the language meta string (leave a space after the language).","i":57,"n":0.204},{"v":"You can refer to Prism's official language definitions when you are writing your own language definitions.","i":56,"n":0.25},{"v":"It will produce prism-include-languages.js in your src/theme folder. You can add highlighting support for custom languages by editing prism-include-languages.js:","i":55,"n":0.229},{"v":"If you want to add highlighting for languages not yet supported by Prism, you can swizzle prism-include-languages:","i":54,"n":0.243},{"v":"For example, if you want to add highlighting for the powershell language:","i":53,"n":0.289},{"v":"To add syntax highlighting for any of the other Prism supported languages, define it in an array of additional languages.","i":52,"n":0.224},{"v":"By default, Docusaurus comes with this subset of commonly used languages.","i":51,"n":0.302},{"v":"For example, if you prefer to use the dracula highlighting theme:","i":50,"n":0.302},{"v":"By default, the Prism syntax highlighting theme we use is Palenight. You can change this to another theme by passing theme field in prism as themeConfig in your docusaurus.config.js.","i":49,"n":0.186},{"v":"Use the matching language meta string for your code block, and Docusaurus will pick up syntax highlighting automatically, powered by Prism React Renderer.","i":48,"n":0.209},{"v":"Code blocks are text blocks wrapped around by strings of 3 backticks. You may check out this reference for specifications of MDX.","i":47,"n":0.213},{"v":"You can add a title to the code block by adding title key after the language (leave a space between them).","i":46,"n":0.218},{"v":"Code blocks within documentation are super-powered 💪.","i":45,"n":0.378},{"v":"The content and title can include Markdown.","i":44,"n":0.378},{"v":"You may also specify an optional title","i":43,"n":0.378},{"v":"Danger danger, mayday!","i":42,"n":0.577},{"v":"Warning! You better pay attention!","i":41,"n":0.447},{"v":"Useful information.","i":40,"n":0.707},{"v":"Heads up! Here's a pro-tip.","i":39,"n":0.447},{"v":"The content and title can include markdown.","i":38,"n":0.378},{"v":"Example:","i":37,"n":1},{"v":"In addition to the basic Markdown syntax, we use remark-admonitions alongside MDX to add support for admonitions. Admonitions are wrapped by a set of 3 colons.","i":36,"n":0.196},{"v":"Tab choices with different groupIds will not interfere with each other:","i":35,"n":0.302},{"v":"For all tab groups that have the same groupId, the possible values do not need to be the same. If one tab group with chooses an value that does not exist in another tab group with the same groupId, the tab group with the missing value won't change its tab. You can see that from the following example. Try to select Linux, and the above tab groups doesn't change.","i":34,"n":0.12},{"v":"You may want choices of the same kind of tabs to sync with each other. For example, you might want to provide different instructions for users on Windows vs users on macOS, and you want to changing all OS-specific instructions tabs in one click. To achieve that, you can give all related tabs the same groupId prop. Note that doing this will persist the choice in localStorage and all <Tab> instances with the same groupId will update automatically when the value of one of them is changed. Not that groupID are globally-namespaced.","i":33,"n":0.104},{"v":"will result in","i":32,"n":0.577},{"v":"To show tabbed content within Markdown files, you can fall back on MDX. Docusaurus provides <Tabs> components out-of-the-box.","i":31,"n":0.236},{"v":"See more information in the MDX documentation.","i":30,"n":0.378},{"v":"Some plugins can be configured and accept their own options. In that case, use the [plugin, pluginOptions] syntax, like so:","i":29,"n":0.224},{"v":"Finally, add them to the @docusaurus/preset-classic options in docusaurus.config.js:","i":28,"n":0.333},{"v":"Next, import the plugins:","i":27,"n":0.5},{"v":"For example:","i":26,"n":0.707},{"v":"First, install your Remark and Rehype plugins.","i":25,"n":0.378},{"v":"You can expand the MDX functionalities, using plugins. An MDX plugin is usually a npm package, so you install them like other npm packages using npm. Docusaurus supports both Remark and Rehype plugins that work with MDX.","i":24,"n":0.164},{"v":"You can also import your own components defined in other files or third-party components installed via npm! Check out the MDX docs to see what other fancy stuff you can do with MDX.","i":23,"n":0.174},{"v":"I can write Markdown alongside my JSX!","i":22,"n":0.378},{"v":"Notice how it renders both the markup from your React component and the Markdown syntax:","i":21,"n":0.258},{"v":"Try this block here:","i":20,"n":0.5},{"v":"Note 2: Since all doc files are parsed using MDX, any HTML is treated as JSX. Therefore, if you need to inline-style a component, follow JSX flavor and provide style objects. This behavior is different from Docusaurus 1. See also Migrating from v1 to v2.","i":19,"n":0.149},{"v":"Note 1: While both .md and .mdx files are parsed using MDX, some of the syntax are treated slightly differently. For the most accurate parsing and better editor support, we recommend using the .mdx extension for files containing MDX syntax. Let's rename the previous file to greeting.mdx.","i":18,"n":0.146},{"v":"Docusaurus has built-in support for MDX, which allows you to write JSX within your Markdown files and render them as React components.","i":17,"n":0.213},{"v":"One benefit of this approach is that the links to external files will still work if you are viewing the file on GitHub.","i":16,"n":0.209},{"v":"For example, if you are in doc2.md and you want to reference doc1.md and folder/doc3.md:","i":15,"n":0.258},{"v":"If you want to reference another document file, you could use the name of the document you want to reference. Docusaurus will convert the file path to be the final website path (and remove the .md).","i":14,"n":0.167},{"v":"Example:","i":13,"n":1},{"v":"Documents use the following markdown header fields that are enclosed by a line --- on either side:","i":12,"n":0.243},{"v":"The headers are well-spaced so that the hierarchy is clear.","i":11,"n":0.316},{"v":"So that your users will know what this page is all about without scrolling down or even without reading too much.","i":10,"n":0.218},{"v":"will show up on the table of contents on the upper right","i":9,"n":0.289},{"v":"Are you ready to create the documentation site for your open source project?","i":8,"n":0.277},{"v":"This will render in the browser as follows:","i":7,"n":0.354},{"v":"At the top of the file, specify id and title in the front matter, so that Docusaurus will pick them up correctly when generating your site.","i":6,"n":0.196},{"v":"Create a markdown file, greeting.md, and place it under the docs directory.","i":5,"n":0.289},{"v":"Markdown is a syntax that enables you to write formatted content in a readable syntax. The standard Markdown syntax is supported and we use MDX as the parsing engine, which can do much more than just parsing Markdown. More on that later.","i":4,"n":0.154},{"v":"All the following content assumes you are using @docusaurus/preset-classic or @docusaurus/plugin-content-docs.","i":3,"n":0.302},{"v":"In this section, we'd like to introduce you to the tools we've picked that we believe will help you build powerful documentation. Let us walk you through with an example.","i":2,"n":0.183},{"v":"Docusaurus 2 uses modern tooling to help you compose your interactive documentations with ease. You may embed React components, or build live coding blocks where your users may play with the code on the spot. Start sharing your eureka moments with the code your audience cannot walk away from. It is perhaps the most effective way of attracting potential users.","i":1,"n":0.129},{"v":"Documentation is one of your product's interfaces with your users. A well-written and well-organized set of docs helps your users understand your product quickly. Our aligned goal here is to help your users find and understand the information they need, as quickly as possible.","i":0,"n":0.151}]}},{"i":13,"$":{"0":[{"v":"Migrating from v1 to v2","i":0,"n":0.447}],"1":[{"v":"Versioned Site","i":9,"n":0.707},{"v":"Support","i":8,"n":1},{"v":"Example migration PRs","i":7,"n":0.577},{"v":"Migration command","i":6,"n":0.707},{"v":"Test your site","i":5,"n":0.577},{"v":"Content","i":4,"n":1},{"v":"Components","i":3,"n":1},{"v":"Urls","i":2,"n":1},{"v":"Site configurations","i":1,"n":0.707},{"v":"Project setup","i":0,"n":0.707}],"2":[{"v":"Convert style attributes to style objects in MDX","i":17,"n":0.354},{"v":"Populate your versioned_sidebars and versioned_docs","i":16,"n":0.447},{"v":"Migrate your versioned_sidebars","i":15,"n":0.577},{"v":"Migrate your versioned_docs front matter","i":14,"n":0.447},{"v":"Front matter","i":13,"n":0.707},{"v":"Language-specific code tabs","i":12,"n":0.577},{"v":"Update Markdown syntax to be MDX-compatible","i":11,"n":0.408},{"v":"Remove AUTOGENERATED_TABLE_OF_CONTENTS","i":10,"n":0.707},{"v":"Pages","i":9,"n":1},{"v":"Footer","i":8,"n":1},{"v":"Sidebar","i":7,"n":1},{"v":"Removed fields","i":6,"n":0.707},{"v":"Updated fields","i":5,"n":0.707},{"v":"docusaurus.config.js","i":4,"n":1},{"v":"README","i":3,"n":1},{"v":".gitignore","i":2,"n":1},{"v":"Update references to the build directory","i":1,"n":0.408},{"v":"package.json","i":0,"n":1}],"3":[{"v":"Docusaurus 2 uses JSX for doc files. If you have any style attributes in your Docusaurus 1 docs, convert them to style objects, like this:","i":99,"n":0.2},{"v":"In v2, you have to populate the missing versioned_docs and versioned_sidebars (with the right frontmatter and id reference too).","i":98,"n":0.229},{"v":"Docusaurus v1 creates versioned docs if and only if the doc content is different. Your docs structure might look like this if the only doc changed from v1.0.0 to v1.1.0 is hello.md.","i":97,"n":0.177},{"v":"For example, if your versions.json looks like this in v1","i":96,"n":0.316},{"v":"In v2, we use snapshot approach for documentation versioning. Every versioned docs does not depends on other version. It is possible to have foo.md in version-1.0.0 but it doesn't exist in version-1.2.0. This is not possible in previous version due to Docusaurus v1 fallback functionality (https://docusaurus.io/docs/en/versioning#fallback-functionality).","i":95,"n":0.147},{"v":"Example versioned_sidebars/version-1.0.0-sidebars.json:","i":94,"n":0.707},{"v":"So v1 users need to migrate their versioned_sidebars file","i":93,"n":0.333},{"v":"Since we don't allow / in v1 & v2 for frontmatter, conflicts are less likely to occur.","i":92,"n":0.243},{"v":"vs website/versioned_docs/version-1.0.0/hello.md","i":91,"n":0.707},{"v":"For example, Docusaurus 1 can't differentiate docs/xxx.md","i":90,"n":0.378},{"v":"Because in v1 there is a good chance someone created a new file with front matter id \"version-${version}-${id}\" that can conflict with versioned_docs id.","i":89,"n":0.204},{"v":"Essentially, here are the necessary changes in each versioned_docs file:","i":88,"n":0.316},{"v":"Since we're going for snapshot and allow people to move (and edit) docs easily inside version. The id frontmatter is no longer altered and will remain the same. Internally, it is set as version-${version}/${id}.","i":87,"n":0.171},{"v":"In comparison, Docusaurus 2 website/versioned_docs/version-1.0.0/hello.md looks like this (exactly same as original)","i":86,"n":0.289},{"v":"When you cut a new version 1.0.0, in Docusaurus v1, website/versioned_docs/version-1.0.0/hello.md looks like this:","i":85,"n":0.267},{"v":"For example, if you have a docs/hello.md.","i":84,"n":0.378},{"v":"Unlike v1, The markdown header for each versioned doc is no longer altered by using version-${version}-${original_id} as the value for the actual id field. See scenario below for better explanation.","i":83,"n":0.183},{"v":"Read up https://v2.docusaurus.io/blog/2018/09/11/Towards-Docusaurus-2#versioning first for problems in v1's approach.","i":82,"n":0.333},{"v":"The versioning feature is a work in progress! Although we've implemented docs versioning since 2.0.0-alpha.37, we'd like to test it out for v2 users first before we recommend v1 users to migrate to v2. There are some changes in how v2 versioning works compared to v1. In the future, we might create a script to migrate your versioned docs easier. However, if you are adventurous enough to manually migrate, feel free to do so. Be warned though, the manual migration requires lot of work.","i":81,"n":0.109},{"v":"For any questions, you can ask in the #docusaurus-1-to-2-migration Discord channel. Feel free to tag @yangshun in any migration PRs if you would like us to have a look.","i":80,"n":0.186},{"v":"You might want to refer to our migration PRs for Create React App and Flux as examples of how a migration for a basic Docusaurus v1 site can be done.","i":79,"n":0.183},{"v":"This way, you'd be able to easily inspect and fix the diff.","i":78,"n":0.289},{"v":"We recommend you to try to run the pages without these options, commit, and then try to run the migration again with the --page and --mdx options.","i":77,"n":0.192},{"v":"The migration of pages and MDX is still a work in progress.","i":76,"n":0.289},{"v":"You can add option flags to the migration command to automatically migrate markdown content and pages to v2. It is likely that you will still need to make some manual changes to achieve your desired result.","i":75,"n":0.167},{"v":"To migrate your v1 website, run the migration command with the appropriate filesystem paths:","i":74,"n":0.267},{"v":"Before using the migration command, ensure that /docs, /blog, /static, sidebars.json, siteConfig.js, package.json follow the structure shown at the start of this page.","i":73,"n":0.209},{"v":"To use the migration command, follow these steps:","i":72,"n":0.354},{"v":"Manual tweaking is still required after using the migration command. You still need to migrate your footer, pages and content.","i":71,"n":0.224},{"v":"The migration command migrates:","i":70,"n":0.5},{"v":"The migration command automatically migrates your v1 website to a v2 website.","i":69,"n":0.289},{"v":"Start the development server and fix any errors:","i":68,"n":0.354},{"v":"After migration, your folder structure should look like this:","i":67,"n":0.333},{"v":"The fields authorFBID and authorTwitter have been deprecated. They are only used for generating the profile image of the author which can be done via the author_image_url field.","i":66,"n":0.189},{"v":"The Docusaurus front matter fields for the blog have been changed from camelCase to snake_case to be consistent with the docs.","i":65,"n":0.218},{"v":"Refer to the multi-language support code blocks section.","i":64,"n":0.354},{"v":"Tips: You might want to use some online tools like HTML to JSX to make the migration easier.","i":63,"n":0.236},{"v":"Frontmatter is parsed by gray-matter. If your frontmatter use special characters like :, you now need to quote it: title: Part 1: my part1 title -> title: Part 1: \"my part1 title\".","i":62,"n":0.177},{"v":"In Docusaurus 2, the markdown syntax has been changed to MDX. Hence there might be some broken syntax in the existing docs which you would have to update. A common example is self-closing tags like <img> and <br> which are valid in HTML would have to be explicitly closed now ( <img/> and <br/>). All tags in MDX documents have to be valid JSX.","i":61,"n":0.125},{"v":"This feature is deprecated. You may read more about it in this issue. If you need the feature, use remark-toc instead and pass it to docs plugin's remarkPlugins option.","i":60,"n":0.186},{"v":"The following code could be helpful for migration of various pages:","i":59,"n":0.302},{"v":"Here's a typical Docusaurus v2 page:","i":58,"n":0.408},{"v":"You can migrate CommonJS to ES6 imports/exports.","i":57,"n":0.378},{"v":"CompLibrary is deprecated in v2, so you have to write your own React component or use Infima styles (Docs will be available soon, sorry about that! In the meanwhile, inspect the V2 website or view https://facebookincubator.github.io/infima/ to see what styles are available).","i":56,"n":0.154},{"v":"In v2, you have to apply the theme layout around each page. The Layout component takes metadata props (permalink is important, as it defines the canonical url of your page).","i":55,"n":0.183},{"v":"In Docusaurus v2, get the siteConfig object from useDocusaurusContext instead.","i":54,"n":0.316},{"v":"In Docusaurus v1, pages received the siteConfig object as props.","i":53,"n":0.316},{"v":"Please refer to creating pages to learn how Docusaurus 2 pages work. After reading that, notice that you have to move pages/en files in v1 to src/pages instead.","i":52,"n":0.189},{"v":"Do not swizzle the Footer just to add the logo on the left. The logo is intentionally removed in v2 and moved to the bottom. Just configure the footer in docusaurus.config.js with themeConfig.footer:","i":51,"n":0.174},{"v":"This will copy the current <Footer /> component used by the theme to a src/theme/Footer directory under the root of your site, you may then edit this component for customization.","i":50,"n":0.183},{"v":"website/core/Footer.js is no longer needed. If you want to modify the default footer provided by Docusaurus, swizzle it:","i":49,"n":0.236},{"v":"You'll have to migrate your sidebar if it contains category type. Rename subcategory to category and ids to items.","i":48,"n":0.229},{"v":"In previous version, nested sidebar category is not allowed and sidebar category can only contain doc id. However, v2 allows infinite nested sidebar and we have many types of Sidebar Item other than document.","i":47,"n":0.171},{"v":"If you want to keep the .html extension as the canonical url of a page, docs can declare a slug: installation.html frontmatter.","i":46,"n":0.213},{"v":"As an escape hatch, you could use @docusaurus/plugin-client-redirects to create client-side redirects from /installation.html to /installation.","i":45,"n":0.25},{"v":"For SEO reasons, and avoiding breaking links, you should configure server-side redirect rules on your hosting provider.","i":44,"n":0.243},{"v":"If you had cleanUrl: false in v1, it's possible that people published links to /installation.html.","i":43,"n":0.258},{"v":"In v2, by default, the canonical page is /installation, and not /installation.html.","i":42,"n":0.289},{"v":"If cleanUrl was:","i":41,"n":0.577},{"v":"For example, these 2 pages exist:","i":40,"n":0.408},{"v":"In v1, all pages were available with or without the .html extension.","i":39,"n":0.289},{"v":"We intend to implement many of the deprecated config fields as plugins in future. Help will be appreciated!","i":38,"n":0.236},{"v":"The following fields are all deprecated, you may remove from your configuration file.","i":37,"n":0.277},{"v":"Deprecated. Pass it as an option to @docusaurus/preset-classic docs instead:","i":36,"n":0.316},{"v":"BREAKING: editUrl should point to (website) docusaurus project instead of docs directory.","i":35,"n":0.289},{"v":"Deprecated. Create a CNAME file in your static folder instead with your custom domain. Files in the static folder will be copied into the root of the build folder during execution of the build command.","i":34,"n":0.169},{"v":"Deprecated. Pass it as a blog option to @docusaurus/preset-classic instead:","i":33,"n":0.316},{"v":"Now, these two fields are both handled by the theme:","i":32,"n":0.316},{"v":"In Docusaurus 1, header icon and header links were root fields in siteConfig:","i":31,"n":0.277},{"v":"Site meta info such as assets, SEO, copyright info are now handled by themes. To customize them, use the themeConfig field in your docusaurus.config.js:","i":30,"n":0.204},{"v":"Replace the variables in src/css/custom.css with these new variables.","i":29,"n":0.333},{"v":"Primary Color:","i":28,"n":0.707},{"v":"Alteratively, use the following tool to generate the different shades for your website and copy the variables into src/css/custom.css.","i":27,"n":0.229},{"v":"We recommend using ColorBox to find the different shades of colors for your chosen primary color.","i":26,"n":0.25},{"v":"Infima uses 7 shades of each color.","i":25,"n":0.378},{"v":"Deprecated. We wrote a custom CSS framework for Docusaurus 2 called Infima which uses CSS variables for theming. The docs are not quite ready yet and we will update here when it is. To overwrite Infima's CSS variables, create your own CSS file (e.g. ./src/css/custom.css) and import it globally by passing it as an option to @docusaurus/preset-classic:","i":24,"n":0.132},{"v":"No actions needed, these configuration fields were not modified.","i":23,"n":0.333},{"v":"Refer to migration guide below for each field in siteConfig.js.","i":22,"n":0.316},{"v":"If you are migrating your Docusaurus v1 website, and there are pending documentation pull requests, you can temporarily keep the /docs folder to its original place, to avoid producing conflicts.","i":21,"n":0.183},{"v":"We recommend moving the docs folder into the website folder and that is also the default directory structure in v2. Now supports Docusaurus project deployments out-of-the-box if the docs directory is within the website. It is also generally better for the docs to be within the website so that the docs and the rest of the website code are co-located within one website directory.","i":20,"n":0.125},{"v":"Add the following preset configuration to your docusaurus.config.js.","i":19,"n":0.354},{"v":"In Docusaurus 2, we split each functionality (blog, docs, pages) into plugins for modularity. Presets are bundles of plugins and for backward compatibility we built a @docusaurus/preset-classic preset which bundles most of the essential plugins present in Docusaurus 1.","i":18,"n":0.16},{"v":"Rename siteConfig.js to docusaurus.config.js.","i":17,"n":0.5},{"v":"The D1 website may have an existing README file. You can modify it to reflect the D2 changes, or copy the default Docusaurus v2 README.","i":16,"n":0.2},{"v":"The .gitignore in your website should contain:","i":15,"n":0.378},{"v":"If you are deploying to GitHub pages, make sure to run yarn deploy instead of yarn publish-gh-pages script.","i":14,"n":0.236},{"v":"In Docusaurus 2, it is now moved to just website/build. Make sure that you update your deployment configuration to read the generated files from the correct build directory.","i":13,"n":0.189},{"v":"In Docusaurus 1, all the build artifacts are located within website/build/<PROJECT_NAME>.","i":12,"n":0.302},{"v":"A typical Docusaurus 2 package.json may look like this:","i":11,"n":0.333},{"v":"The \"scripts\" section of your package.json should be updated as follows:","i":10,"n":0.302},{"v":"Meanwhile, CLI commands are renamed to docusaurus <command> (instead of docusaurus-command).","i":9,"n":0.302},{"v":"Please use the most recent Docusaurus 2 alpha version, which you can check out here (it's tagged next).","i":8,"n":0.236},{"v":"Meanwhile, the default doc site functionalities provided by Docusaurus 1 are now provided by @docusaurus/preset-classic. Therefore, we need to add this dependency as well:","i":7,"n":0.204},{"v":"This provides a clear distinction between Docusaurus' official packages and community maintained packages. In another words, all Docusaurus' official packages are namespaced under @docusaurus/.","i":6,"n":0.204},{"v":"In Docusaurus 2, we use scoped package names:","i":5,"n":0.354},{"v":"You can use the migration command to take care of some of the migration chores.","i":4,"n":0.258},{"v":"After the migration, your Docusaurus 2 site could look like:","i":3,"n":0.316},{"v":"Your Docusaurus 1 site should have the following structure:","i":2,"n":0.333},{"v":"This doc guides you through migrating an existing Docusaurus 1 site to Docusaurus 2.","i":1,"n":0.267},{"v":"This migration guide is targeted at Docusaurus users without translation and/or versioning features.","i":0,"n":0.277}]}},{"i":14,"$":{"0":[{"v":"Introduction","i":0,"n":1}],"1":[{"v":"Something missing?","i":5,"n":0.707},{"v":"Staying informed","i":4,"n":0.707},{"v":"Comparison with other tools","i":3,"n":0.5},{"v":"Features","i":2,"n":1},{"v":"A better Docusaurus is coming to town","i":1,"n":0.378},{"v":"Disclaimer","i":0,"n":1}],"2":[{"v":"VuePress","i":3,"n":1},{"v":"Jekyll","i":2,"n":1},{"v":"GitBook","i":1,"n":1},{"v":"Gatsby","i":0,"n":1}],"3":[{"v":"For new feature requests, you can create a post on our Canny board, which is a handy tool for roadmapping and allows for sorting by upvotes, which gives the core team a better indicator of what features are in high demand, as compared to GitHub issues which are harder to triage. Refrain from making a Pull Request for new features (especially large ones) as someone might already be working on it or will be part of our roadmap. Talk to us first!","i":20,"n":0.11},{"v":"If you find issues with the documentation or have suggestions on how to improve the documentation or the project in general, please file an issue for us, or send a tweet mentioning the @docusaurus Twitter account.","i":19,"n":0.167},{"v":"VuePress has many similarities with Docusaurus - both focus heavily on content-centric website and provides tailored documentation features out of the box. However, VuePress is powered by Vue, while Docusaurus is powered by React. If you want a Vue-based solution, VuePress would be a decent choice.","i":18,"n":0.147},{"v":"In comparison with statically generated HTML and interactivity added using <script /> tags, Docusaurus sites are React apps. Using modern JavaScript ecosystem tooling, we hope to set new standards on doc sites performance, asset build pipeline and optimizations, and ease to setup.","i":17,"n":0.154},{"v":"Jekyll is one of the most mature static site generators around and has been a great tool to use — in fact, before Docusaurus, most of Facebook's Open Source websites are/were built on Jekyll! It is extremely simple to get started. We want to bring a similar developer experience as building a static site with Jekyll.","i":16,"n":0.134},{"v":"Currently, GitBook is only free for open-source and non-profit teams. Docusaurus is free for everyone.","i":15,"n":0.258},{"v":"GitBook has very clean design and has been used by many open source projects. With its focus shifting towards a commercial product rather than an open-source tool, many of its requirements no longer fit the needs as an open source project's documentation site. As a result, many have turned to other products. You may read about Redux's switch to Docusaurus here.","i":14,"n":0.128},{"v":"Many aspects of Docusaurus 2 were inspired by the best things about Gatsby and it's a great alternative.","i":13,"n":0.236},{"v":"GraphQL is also pretty core to Gatsby, although you don't necessarily need GraphQL to build a Gatsby site. In most cases when building static websites, you won't need the flexibility that GraphQL provides.","i":12,"n":0.174},{"v":"Gatsby is packed with a lot of features, has a rich ecosystem of plugins and is capable of doing everything that Docusaurus does. Naturally, that comes at a cost of a higher learning curve. Gatsby does many things well and is suitable for building many types of websites. On the other hand, Docusaurus tries to do one thing super well - be the best tool for writing and publishing content.","i":11,"n":0.12},{"v":"We've also studied other main static site generators and would like to share our insights on the comparison, hopefully to help you navigate through the prismatic choices out there.","i":10,"n":0.186},{"v":"Across all static site generators, Docusaurus has a unique focus on doc sites and has out-of-the-box structure you need.","i":9,"n":0.229},{"v":"Docusaurus 2 is born to be compassionately accessible to all your users, and lightning fast.","i":8,"n":0.258},{"v":"Our shared goal — to help your users find what they need fast, and understand your products better. With the experience of Docusaurus 1, we share with you our best practices to help you build your doc site right and well.","i":7,"n":0.156},{"v":"Docusaurus is built with high attention to your experience building your site and maintaining it with your collaborators and contributors.","i":6,"n":0.224},{"v":"While our main focus will still be helping you get your documentations right and well, it is possible to build this any kind of website using Docusaurus 2 as it is just a React application. Docusaurus can now be used to build any website, not just documentation websites.","i":5,"n":0.144},{"v":"Beyond that, Docusaurus 2 is a performant static site generator and can be used to create common content-driven websites (e.g. Documentation, Blogs, Product Landing and Marketing Pages, etc) extremely quickly.","i":4,"n":0.183},{"v":"Docusaurus 1 used to be a pure documentation site generator. In Docusaurus 2, we rebuilt it from the ground up, allowing for more customizability but preserved the best parts of Docusaurus 1 - easy to get started, versioned docs, and i18n (coming soon).","i":3,"n":0.152},{"v":"Do not use this if:","i":2,"n":0.447},{"v":"You should use this if:","i":1,"n":0.447},{"v":"It has been a year since we made the first alpha release of Docusaurus 2 and things have been pretty stable since then. Many of Facebook's new open source websites are using Docusaurus 2 now. At this point, we highly encourage you to use Docusaurus 2 over Docusaurus 1 for your new websites. For feedback and questions, chat with us on Discord 😉","i":0,"n":0.126}]}},{"i":15,"$":{"0":[{"v":"Presets","i":0,"n":1}],"1":[{"v":"Official presets","i":2,"n":0.707},{"v":"Presets -> themes and plugins","i":1,"n":0.447},{"v":"Using presets","i":0,"n":0.707}],"2":[{"v":"@docusaurus/preset-classic","i":0,"n":1}],"3":[{"v":"The admonitions key will be passed as the options to remark-admonitions. Passing false will prevent the plugin from being added to MDX.","i":11,"n":0.213},{"v":"In addition to these plugins and themes, @docusaurus/theme-classic adds remark-admonitions as a remark plugin to @docusaurus/plugin-content-blog and @docusaurus/plugin-content-docs.","i":10,"n":0.236},{"v":"To specify plugin options individually, you can provide the necessary fields to certain plugins, i.e. customCss for @docusaurus/theme-classic, pass them in the preset field, like this:","i":9,"n":0.196},{"v":"The classic preset that is usually shipped by default to new docusaurus website. It is a set of plugins and themes.","i":8,"n":0.218},{"v":"This is especially useful when some plugins and themes are intended to be used together.","i":7,"n":0.258},{"v":"This is equivalent of doing:","i":6,"n":0.447},{"v":"then in your Docusaurus config, you may configure the preset instead:","i":5,"n":0.302},{"v":"Presets in some way are a shorthand function to add plugins and themes to your docusaurus config. For example, you can specify a preset that includes the following themes and plugins,","i":4,"n":0.18},{"v":"To load presets from your local directory, specify how to resolve them:","i":3,"n":0.289},{"v":"Then, add it in your site's docusaurus.config.js's presets option:","i":2,"n":0.333},{"v":"A preset is usually a npm package, so you install them like other npm packages using npm.","i":1,"n":0.243},{"v":"Presets are collections of plugins and themes.","i":0,"n":0.378}]}},{"i":16,"$":{"0":[{"v":"Awesome Resources","i":0,"n":0.707}],"1":[{"v":"Enterprise usage","i":5,"n":0.707},{"v":"Community plugins","i":4,"n":0.707},{"v":"Official plugins","i":3,"n":0.707},{"v":"Showcase","i":2,"n":1},{"v":"Articles","i":1,"n":1},{"v":"Videos","i":0,"n":1}],"3":[{"v":"See the showcase.","i":1,"n":0.577},{"v":"A curated list of interesting Docusaurus community projects.","i":0,"n":0.354}]}},{"i":17,"$":{"0":[{"v":"Search","i":0,"n":1}],"1":[{"v":"Using your own search","i":1,"n":0.5},{"v":"Using Algolia DocSearch","i":0,"n":0.577}],"2":[{"v":"Editing the Algolia search component","i":3,"n":0.447},{"v":"Customizing the Algolia search behavior","i":2,"n":0.447},{"v":"Styling your Algolia search","i":1,"n":0.5},{"v":"Connecting Algolia","i":0,"n":0.707}],"3":[{"v":"Notes: You can alternatively swizzle from Algolia SearchBar and create your own search component from there.","i":11,"n":0.25},{"v":"This will create a src/themes/SearchBar file in your project folder. Restart your dev server and edit the component, you will see that Docusaurus uses your own SearchBar component now.","i":10,"n":0.186},{"v":"To use your own search, swizzle the SearchBar component in @docusaurus/theme-classic","i":9,"n":0.302},{"v":"If you prefer to edit the Algolia search React component, swizzle the SearchBar component in @docusaurus/theme-search-algolia:","i":8,"n":0.25},{"v":"Algolia DocSearch supports a list of options that you can pass to the algolia field in the docusaurus.config.js file.","i":7,"n":0.229},{"v":"Still, you can reuse the Infima CSS variables from Docusaurus to style DocSearch by editing the /src/css/custom.css file.","i":6,"n":0.236},{"v":"By default, DocSearch comes with a fine-tuned theme that was designed for accessibility, making sure that colors and contrasts respect standards.","i":5,"n":0.218},{"v":"The searchParameters option used to be named algoliaOptions in Docusaurus v1.","i":4,"n":0.302},{"v":"To connect your docs with Algolia, add an algolia field in your themeConfig. Apply for DocSearch to get your Algolia index and API key.","i":3,"n":0.204},{"v":"Algolia DocSearch works by crawling the content of your website every 24 hours and putting all the content in an Algolia index. This content is then queried directly from your front-end using the Algolia API. Note that your website needs to be publicly available for this to work (i.e., not behind a firewall). The service is free.","i":2,"n":0.132},{"v":"There are two main options, you can use Algolia DocSearch or bring in your own SearchBar component.","i":1,"n":0.243},{"v":"Docusaurus' own @docusaurus/preset-classic supports a search integration.","i":0,"n":0.378}]}},{"i":18,"$":{"0":[{"v":"Static Assets","i":0,"n":0.707}],"1":[{"v":"Referencing your static asset","i":0,"n":0.5}],"2":[{"v":"Caveats","i":2,"n":1},{"v":"Markdown example","i":1,"n":0.707},{"v":"JSX example","i":0,"n":0.707}],"3":[{"v":"Keep in mind that:","i":7,"n":0.5},{"v":"You could also just use Markdown image syntax, but you would have to manually maintain the image paths yourself and isn't recommended.","i":6,"n":0.213},{"v":"Thanks to MDX, you can also use useBaseUrl utility function in Markdown files! You'd have to use <img> tags instead of the Markdown image syntax though. The syntax is exactly the same as in JSX.","i":5,"n":0.169},{"v":"You can also import SVG images, which will be transformed into React components.","i":4,"n":0.277},{"v":"A better way would be to use the useBaseUrl utility function which appends the baseUrl to paths for you.","i":3,"n":0.229},{"v":"You can reference assets from the static folder in your code. You could use hardcoded absolute paths, i.e. starting with a slash /, but remember to include the baseUrl if it is not /. However, this will break if you change your baseUrl in the config.","i":2,"n":0.147},{"v":"This means that if the site's baseUrl is /, an image in /static/img/docusaurus_keytar.svg is available at /img/docusaurus_keytar.svg.","i":1,"n":0.243},{"v":"In general, every website needs assets: images, stylesheets, favicons and etc. In such cases, you can create a directory named static at the root of your project. Every file you put into that directory will be copied into the the root of the generated build folder with the directory hierarchy preserved. E.g. if you add a file named sun.jpg to the static folder, it’ll be copied to build/sun.jpg.","i":0,"n":0.121}]}},{"i":19,"$":{"0":[{"v":"Styling and Layout","i":0,"n":0.577}],"1":[{"v":"Styling approaches","i":2,"n":0.707},{"v":"Styling your site with Infima","i":1,"n":0.447},{"v":"Traditional CSS","i":0,"n":0.707}],"2":[{"v":"Sass/SCSS","i":3,"n":1},{"v":"CSS-in-JS","i":2,"n":1},{"v":"CSS modules","i":1,"n":0.707},{"v":"Global styles","i":0,"n":0.707}],"3":[{"v":"Name your stylesheet files with the .module.scss suffix (e.g. welcome.module.scss) instead of .css. Webpack will use sass-loader to preprocess your stylesheets and load them as CSS modules.","i":17,"n":0.192},{"v":"You can now set the customCss property of @docusaurus/preset-classic to point to your Sass/SCSS file:","i":16,"n":0.258},{"v":"To use Sass/SCSS as your CSS preprocessor, install the unofficial Docusaurus 2 plugin docusaurus-plugin-sass. This plugin works for both global styles and the CSS modules approach:","i":15,"n":0.196},{"v":"This section is a work in progress. Welcoming PRs.","i":14,"n":0.333},{"v":"The class names which will be processed by webpack into a globally unique class name during build.","i":13,"n":0.243},{"v":"To style your components using CSS Modules, name your stylesheet files with the .module.css suffix (e.g. welcome.module.css). webpack will load such CSS files as CSS modules and you have to reference the class names from the imported CSS module (as opposed to using plain strings). This is similar to the convention used in Create React App.","i":12,"n":0.134},{"v":"Assuming you are using @docusaurus/preset-classic and /src/css/custom.css was passed in to the preset config, styles inside that file would be available globally.","i":11,"n":0.213},{"v":"This is the most traditional way of styling that most developers (including non-front end developers) would be familiar with.","i":10,"n":0.229},{"v":"There are a few approaches/frameworks which will work, depending on your preferences and the type of website you are trying to build. Websites that are highly interactive and behave more like web apps will benefit from a more modern styling approaches that co-locate styles with the components. Component styling can also be particularly useful when you wish to customize or swizzle a component.","i":9,"n":0.126},{"v":"A Docusaurus site is a single-page React application. You can style it the way you style React apps.","i":8,"n":0.236},{"v":"Replace the variables in src/css/custom.css with these new variables.","i":7,"n":0.333},{"v":"Primary Color:","i":6,"n":0.707},{"v":"Alternatively, use the following tool to generate the different shades for your website and copy the variables into /src/css/custom.css.","i":5,"n":0.229},{"v":"Infima uses 7 shades of each color. We recommend using ColorBox to find the different shades of colors for your chosen primary color.","i":4,"n":0.209},{"v":"When you init your Docusaurus 2 project, the website will be generated with basic Infima stylesheets and default styling. You may customize the styling by editing the /src/css/custom.css file.","i":3,"n":0.186},{"v":"@docusaurus/preset-classic uses Infima as the underlying styling framework. Infima provides flexible layout and common UI components styling suitable for content-centric websites (blogs, documentation, landing pages). For more details, check out the Infima website.","i":2,"n":0.174},{"v":"Any CSS you write within that file will be available globally and can be referenced directly using string literals. This is the most traditional approach to writing CSS and is fine for small websites that do not have much customization.","i":1,"n":0.158},{"v":"If you're using @docusaurus/preset-classic, you can create your own CSS files (e.g. /src/css/custom.css) and import them globally by passing it as an option into the preset.","i":0,"n":0.196}]}},{"i":20,"$":{"0":[{"v":"Support","i":0,"n":1}],"1":[{"v":"News","i":3,"n":1},{"v":"Feature requests","i":2,"n":0.707},{"v":"Discussion forums","i":1,"n":0.707},{"v":"Stack Overflow","i":0,"n":0.707}],"3":[{"v":"For the latest news about Docusaurus, follow @docusaurus on Twitter and the official Docusaurus blog on this website.","i":6,"n":0.236},{"v":"For new feature requests, you can create a post on our Canny board, which is a handy tool for roadmapping and allows for sorting by upvotes, which gives the core team a better indicator of what features are in high demand, as compared to GitHub issues which are harder to triage. Refrain from making a Pull Request for new features (especially large ones) as someone might already be working on it or will be part of our roadmap. Talk to us first!","i":5,"n":0.11},{"v":"There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of Docusaurus. If you have an answerable code-level question, Stack Overflow is usually a better fit.","i":4,"n":0.16},{"v":"Stack Overflow is a popular forum to ask code-level questions or if you're stuck with a specific error. Read through the existing questions tagged with docusaurus or ask your own!","i":3,"n":0.183},{"v":"Before participating in Docusaurus' communities, please read our Code of Conduct. We have adopted the Contributor Covenant and we expect that all community members adhere to the guidelines within.","i":2,"n":0.186},{"v":"On this page we've listed some Docusaurus-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.","i":1,"n":0.186},{"v":"Docusaurus has a community of thousands of developers.","i":0,"n":0.354}]}},{"i":21,"$":{"0":[{"v":"Team","i":0,"n":1}],"1":[{"v":"Acknowledgements","i":2,"n":1},{"v":"Honorary Alumni","i":1,"n":0.707},{"v":"Active Team","i":0,"n":0.707}],"2":[{"v":"Wei Gao","i":5,"n":0.707},{"v":"Endilie Yacop Sucipto","i":4,"n":0.577},{"v":"Yangshun Tay","i":3,"n":0.707},{"v":"Joel Marcey","i":2,"n":0.707},{"v":"Fanny Vieira","i":1,"n":0.707},{"v":"Alexey Pyltsyn","i":0,"n":0.707}],"3":[{"v":"Docusaurus was originally created by Joel Marcey. Today, Docusaurus has a few hundred open source contributors. We’d like to recognize a few people who have made significant contributions to Docusaurus and its documentation in the past and have helped maintain them over the years:","i":0,"n":0.151}]}},{"i":22,"$":{"0":[{"v":"@docusaurus/theme-classic","i":0,"n":1}],"1":[{"v":"CodeBlock","i":3,"n":1},{"v":"Navbar","i":2,"n":1},{"v":"Hooks","i":1,"n":1},{"v":"Common","i":0,"n":1}],"2":[{"v":"Default language","i":11,"n":0.707},{"v":"Theme","i":10,"n":1},{"v":"Auto-hide sticky navbar","i":9,"n":0.577},{"v":"Navbar docs version","i":8,"n":0.577},{"v":"Navbar docs version dropdown","i":7,"n":0.5},{"v":"Navbar dropdown","i":6,"n":0.707},{"v":"Navbar items","i":5,"n":0.707},{"v":"Navbar title & logo","i":4,"n":0.5},{"v":"useThemeContext","i":3,"n":1},{"v":"Announcement bar","i":2,"n":0.707},{"v":"Meta image","i":1,"n":0.707},{"v":"Color mode - dark mode","i":0,"n":0.447}],"3":[{"v":"You can set a default language for code blocks if no language is added after the opening triple backticks (i.e. ```). Note that a valid language name must be passed, e.g.:","i":23,"n":0.18},{"v":"If you use the line highlighting Markdown syntax, you might need to specify a different highlight background color for the dark mode syntax highlighting theme. Refer to the docs for guidance.","i":22,"n":0.18},{"v":"By default, we use Palenight as syntax highlighting theme. You can specify a custom theme from the list of available themes. If you want to use a different syntax highlighting theme when the site is in dark mode, you may also do so.","i":21,"n":0.152},{"v":"Docusaurus uses Prism React Renderer to highlight code blocks.","i":20,"n":0.333},{"v":"You can enable this cool UI feature that automatically hides the navbar when a user starts scrolling down the page, and show it again when the user scrolls up.","i":19,"n":0.186},{"v":"If you use docs with versioning, this special navbar item type will link to the active/browsed version of your doc (depends on the current url), and fallback to the latest version.","i":18,"n":0.18},{"v":"If you use docs with versioning, this special navbar item type that will render a dropdown with all your site's available versions. The user will be able to switch from one version to another, while staying on the same doc (as long as the doc id is constant across versions).","i":17,"n":0.141},{"v":"Navbar items can also be dropdown items by specifying the items, an inner array of navbar items.","i":16,"n":0.243},{"v":"Outbound (external) links automatically get target=\"_blank\" rel=\"noopener noreferrer\" attributes.","i":15,"n":0.333},{"v":"React Router should automatically apply active link styling to links, but you can use activeBasePath in edge cases. For cases in which a link should be active on several different paths (such as when you have multiple doc folders under the same sidebar), you can use activeBaseRegex. activeBaseRegex is a more flexible alternative to activeBasePath and takes precedence over it -- Docusaurus parses it into a regular expression that is tested against the current URL.","i":14,"n":0.115},{"v":"By default, Navbar items are regular links (internal or external).","i":13,"n":0.316},{"v":"You can add items to the navbar via themeConfig.navbar.items.","i":12,"n":0.333},{"v":"To improve dark mode support, you can also set a different logo for this mode.","i":11,"n":0.258},{"v":"You can add a logo and title to the navbar via themeConfig.navbar. Logo can be placed in static folder. Logo URL is set to base URL of your site by default. Although you can specify your own URL for the logo, if it is an external link, it will open in a new tab. In addition, you can override a value for the target attribute of logo link, it can come in handy if you are hosting docs website in a subdirectory of your main website, and in which case you probably do not need a link in the logo to the main website will open in a new tab.","i":10,"n":0.095},{"v":"The component calling useThemeContext must be a child of the Layout component.","i":9,"n":0.289},{"v":"Usage example:","i":8,"n":0.707},{"v":"React hook to access theme context. This context contains functions for setting light and dark mode and boolean property, indicating which mode is currently in use.","i":7,"n":0.196},{"v":"Sometimes you want to announce something in your website. Just for such a case, you can add an announcement bar. This is a non-fixed and dismissable panel above the navbar.","i":6,"n":0.183},{"v":"You can configure a default image that will be used for your meta tag, in particular og:image and twitter:image.","i":5,"n":0.229},{"v":"If you only want to support one color mode, you likely want to ignore user system preferences.","i":4,"n":0.243},{"v":"With respectPrefersColorScheme: true, the defaultMode is overridden by user system preferences.","i":3,"n":0.302},{"v":"It is possible to customize the color mode support with the following configuration:","i":2,"n":0.277},{"v":"The classic theme provides by default light and dark mode support, with a navbar switch for the user.","i":1,"n":0.236},{"v":"This section is a work in progress.","i":0,"n":0.378}]}},{"i":23,"$":{"0":[{"v":"TypeScript Support","i":0,"n":0.707}],"1":[{"v":"Swizzling TypeScript theme components","i":1,"n":0.5},{"v":"Setup","i":0,"n":1}],"3":[{"v":"At this moment, the only official Docusaurus theme that supports TypeScript theme components is @docusaurus/theme-classic. If you are a Docusaurus theme package author who wants to add TypeScript support, see the Lifecycle APIs docs.","i":7,"n":0.171},{"v":"For themes that supports TypeScript theme components, you can add the --typescript flag to the end of swizzling command to get TypeScript source code. For example, the following command will generate index.tsx and styles.module.css into src/theme/Footer.","i":6,"n":0.167},{"v":"Now you can start writing TypeScript theme components.","i":5,"n":0.354},{"v":"This file makes TypeScript recognize various Docusaurus specific webpack aliases like @theme, @docusaurus, @generated.","i":4,"n":0.267},{"v":"Then add types.d.ts in your src folder with the following content:","i":3,"n":0.302},{"v":"Docusaurus doesn't use this tsconfig.json to compile your TypeScript. It is added just for a nicer Editor experience, although you can choose to run tsc --noEmit to type check your code for yourself.","i":2,"n":0.174},{"v":"Then add tsconfig.json to your project root with following content:","i":1,"n":0.316},{"v":"Docusaurus supports writing and using TypeScript theme components. To start using TypeScript, add @docusaurus/module-type-aliases to your project:","i":0,"n":0.243}]}},{"i":24,"$":{"0":[{"v":"Plugins","i":0,"n":1}],"1":[{"v":"Official plugins","i":5,"n":0.707},{"v":"Creating plugins","i":4,"n":0.707},{"v":"Plugins design","i":3,"n":0.707},{"v":"Multi-instance plugins and plugin ids","i":2,"n":0.447},{"v":"Configuring plugins","i":1,"n":0.707},{"v":"Installing a plugin","i":0,"n":0.577}],"2":[{"v":"What is Precaching?","i":10,"n":0.577},{"v":"@docusaurus/plugin-pwa","i":9,"n":1},{"v":"@docusaurus/plugin-client-redirects","i":8,"n":1},{"v":"@docusaurus/plugin-ideal-image","i":7,"n":1},{"v":"@docusaurus/plugin-sitemap","i":6,"n":1},{"v":"@docusaurus/plugin-google-gtag","i":5,"n":1},{"v":"@docusaurus/plugin-google-analytics","i":4,"n":1},{"v":"@docusaurus/plugin-content-pages","i":3,"n":1},{"v":"@docusaurus/plugin-content-docs","i":2,"n":1},{"v":"@docusaurus/plugin-content-blog","i":1,"n":1},{"v":"Module definition","i":0,"n":0.707}],"3":[{"v":"Passing false will disable registration entirely.","i":85,"n":0.408},{"v":"Adds an entry before the Docusaurus app so that registration can happen before the app runs. The default registerSW.js file is enough for simple registration.","i":84,"n":0.2},{"v":"The module should have a default function export, and receives some params.","i":83,"n":0.289},{"v":"For example, to cache files from external routes:","i":82,"n":0.354},{"v":"Useful for additional Workbox rules. You can do whatever a service worker can do here, and use the full power of workbox libraries. The code is transpiled, so you can use modern ES6+ syntax here.","i":81,"n":0.169},{"v":"Array of objects containing tagName and key-value pairs for attributes to inject into the <head> tag. Technically you can inject any head tag through this, but it's ideally used for tags to make your site PWA compliant. Here's a list of tag to make your app fully compliant:","i":80,"n":0.144},{"v":"The default theme includes an implementation for the reload popup and uses Infima Alerts.","i":78,"n":0.267},{"v":"A custom component can be used, as long as it accepts onReload as a prop. The onReload callback should be called when the reload button is clicked. This will tell the service worker to install the waiting service worker and reload the page.","i":77,"n":0.152},{"v":"Passing false will disable the popup, but this is not recommended: users won't have a way to get up-to-date content.","i":76,"n":0.224},{"v":"Module path to reload popup component. This popup is rendered when a new service worker is waiting to be installed, and we suggest a reload to the user.","i":75,"n":0.189},{"v":"Workbox options to pass to workbox.injectManifest(). This gives you control over which assets will be precached, and be available offline.","i":74,"n":0.224},{"v":"Use this carefully: some users may not like to be forced to use the offline mode.","i":73,"n":0.25},{"v":"Strategies used to turn the offline mode on:","i":72,"n":0.354},{"v":"Turn debug mode on:","i":71,"n":0.5},{"v":"Offline mode / precaching requires downloading all the static assets of the site ahead of time, and can consume unnecessary bandwidth. It may not be a good idea to activate it for all kind of sites.","i":70,"n":0.167},{"v":"After the site has been precached, the service worker will serve cached responses for later visits. When a new build is deployed along with a new service worker, the new one will begin installing and eventually move to a waiting state. During this waiting state, a reload popup will show and ask the user to reload the page for new content. Until the user either clears the application cache or clicks the reload button on the popup, the service worker will continue serving the old content.","i":69,"n":0.108},{"v":"By default, offline mode is enabled when the site is installed as an app. See the offlineModeActivationStrategies option for details.","i":68,"n":0.224},{"v":"Workbox takes a lot of the heavy lifting out of precaching by simplifying the API and ensuring assets are downloaded efficiently.","i":67,"n":0.218},{"v":"The main reason for doing this is that it gives developers control over the cache, meaning they can determine when and how long a file is cached as well as serve it to the browser without going to the network, meaning it can be used to create web apps that work offline.","i":66,"n":0.139},{"v":"One feature of service workers is the ability to save a set of files to the cache when the service worker is installing. This is often referred to as \"precaching\", since you are caching content ahead of the service worker being used.","i":65,"n":0.154},{"v":"We enable users to browse a Docusaurus site offline, by using service-worker precaching.","i":64,"n":0.277},{"v":"If your browser supports it, you should be able to install a Docusaurus site as an app.","i":62,"n":0.243},{"v":"For a more exhaustive list of what it takes for your site to be a PWA, refer to the PWA Checklist","i":61,"n":0.218},{"v":"After deployment, you can use Lighthouse to run an audit on your site.","i":60,"n":0.277},{"v":"Having a service worker installed is not enough to make your application a PWA. You'll need to at least include a Web App Manifest and have the correct tags in <head> (Options > pwaHead).","i":59,"n":0.171},{"v":"Modify docusaurus.config.js with a minimal PWA config, like:","i":58,"n":0.354},{"v":"Create a PWA manifest at ./static/manifest.json.","i":57,"n":0.408},{"v":"Docusaurus Plugin to add PWA support using Workbox. This plugin generates a Service Worker in production build only, and allows you to create fully PWA-compliant documentation site with offline and installation support.","i":56,"n":0.177},{"v":"Finally, it's possible to use all options at the same time:","i":55,"n":0.302},{"v":"It's possible to use a function to create the redirects for each existing path:","i":54,"n":0.267},{"v":"Let's imagine you change the url of an existing page, you might want to make sure the old url still works:","i":53,"n":0.218},{"v":"For custom redirect logic, provide your own createRedirects function.","i":52,"n":0.333},{"v":"Second usecase: you have /myDocusaurusPage.html, and you want to redirect to this page from /myDocusaurusPage.","i":51,"n":0.258},{"v":"Main usecase: you have /myDocusaurusPage, and you want to redirect to this page from /myDocusaurusPage.html:","i":50,"n":0.258},{"v":"Configuration","i":49,"n":1},{"v":"Installation","i":48,"n":1},{"v":"Before using this plugin, you should look if your hosting provider doesn't offer this feature.","i":47,"n":0.258},{"v":"It is better to use server-side redirects whenever possible.","i":46,"n":0.333},{"v":"This plugin only create redirects for the production build.","i":45,"n":0.333},{"v":"This plugin will write additional HTML pages to your static site, that redirects the user to your existing Docusaurus pages with JavaScript.","i":44,"n":0.213},{"v":"Docusaurus Plugin to generate client-side redirects.","i":43,"n":0.408},{"v":"This plugin supports the PNG, GIF and JPG formats only.","i":42,"n":0.316},{"v":"Modify your docusaurus.config.js","i":41,"n":0.577},{"v":"Docusaurus Plugin to generate an almost ideal image (responsive, lazy-loading, and low quality placeholder) in the production builds.","i":40,"n":0.236},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","i":39,"n":0.183},{"v":"Installation","i":38,"n":1},{"v":"This plugin creates sitemap for your site so that search engine crawlers can crawl your site more accurately.","i":37,"n":0.236},{"v":"Configuration","i":36,"n":1},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","i":35,"n":0.267},{"v":"Installation","i":34,"n":1},{"v":"The default Global Site Tag (gtag.js) plugin. It is a JavaScript tagging framework and API that allows you to send event data to Google Analytics, Google Ads, and Google Marketing Platform. This section describes how to configure a Docusaurus site to enable global site tag for Google Analytics.","i":33,"n":0.144},{"v":"Configuration","i":32,"n":1},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","i":31,"n":0.267},{"v":"Installation","i":30,"n":1},{"v":"The default Google Analytics plugin. It is a JavaScript library for measuring how users interact with your website.","i":29,"n":0.236},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","i":28,"n":0.183},{"v":"Installation","i":27,"n":1},{"v":"The default pages plugin for Docusaurus. The classic template ships with this plugin with default configurations. This plugin provides creating pages functionality.","i":26,"n":0.213},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","i":25,"n":0.183},{"v":"Installation","i":24,"n":1},{"v":"Provides the Docs functionality and is the default docs plugin for Docusaurus.","i":23,"n":0.289},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. You can also configure it through the classic preset options instead of doing it like below.","i":22,"n":0.183},{"v":"Installation","i":21,"n":1},{"v":"Provides the Blog feature and is the default blog plugin for Docusaurus.","i":20,"n":0.289},{"v":"Find the list of official Docusaurus plugins here.","i":19,"n":0.354},{"v":"The returned object value should implement the lifecycle APIs.","i":18,"n":0.333},{"v":"options are the second optional parameter when the plugins are used. options are plugin-specific and are specified by users when they use them in docusaurus.config.js. Alternatively, if preset contains the plugin, the preset will then be in charge of passing the correct options into the plugin. It is up to individual plugin to define what options it takes.","i":17,"n":0.131},{"v":"context is plugin-agnostic and the same object will be passed into all plugins used for a Docusaurus website. The context object contains the following fields:","i":16,"n":0.2},{"v":"The my-plugin folder could also be a fully fledged package with it's own package.json and a src/index.js file for example","i":15,"n":0.224},{"v":"Then in the folder my-plugin you can create an index.js such as this","i":14,"n":0.277},{"v":"For example if you have a reference to a local folder such as this in your docusaurus.config.js:","i":13,"n":0.243},{"v":"The exported modules for plugins are called with two parameters: context and options and returns a JavaScript object with defining the lifecycle APIs.","i":12,"n":0.209},{"v":"A plugin is a module which exports a function that takes two parameters and returns an object when executed.","i":11,"n":0.229},{"v":"Docusaurus' implementation of the plugins system provides us with a convenient way to hook into the website's lifecycle to modify what goes on during development/build, which involves (but not limited to) extending the webpack config, modifying the data being loaded and creating new components to be used in a page.","i":10,"n":0.141},{"v":"By default, the plugin id is default.","i":9,"n":0.378},{"v":"In this case, you it is required to assign a unique id to each plugin instance.","i":8,"n":0.25},{"v":"It is possible to use multiple times the same plugin, on the same Docusaurus website.","i":7,"n":0.258},{"v":"Example:","i":6,"n":1},{"v":"However, plugins can have options specified by wrapping the name and an options object in an array inside your config. This style is usually called Babel Style.","i":5,"n":0.192},{"v":"For the most basic usage of plugins, you can provide just the plugin name or the absolute path to the plugin.","i":4,"n":0.218},{"v":"Docusaurus can also load plugins from your local directory, you can do something like the following:","i":3,"n":0.25},{"v":"Then you add it in your site's docusaurus.config.js's plugins option:","i":2,"n":0.316},{"v":"A plugin is usually a npm package, so you install them like other npm packages using npm.","i":1,"n":0.243},{"v":"Plugins are the building blocks of features in a Docusaurus 2 site. Each plugin handles its own individual feature. Plugins may work and be distributed as part of bundle via presets.","i":0,"n":0.18}]}},{"i":25,"$":{"0":[{"v":"Themes","i":0,"n":1}],"1":[{"v":"Writing customized Docusaurus themes","i":5,"n":0.5},{"v":"Themes design","i":4,"n":0.707},{"v":"Official themes by Docusaurus","i":3,"n":0.5},{"v":"Swizzling theme components","i":2,"n":0.577},{"v":"Theme components","i":1,"n":0.707},{"v":"Using themes","i":0,"n":0.707}],"2":[{"v":"@docusaurus/theme-live-codeblock","i":2,"n":1},{"v":"@docusaurus/theme-search-algolia","i":1,"n":1},{"v":"@docusaurus/theme-classic","i":0,"n":1}],"3":[{"v":"These lifecycle method are not essential but recommended:","i":29,"n":0.354},{"v":"There are two lifecycle methods that are essential to theme implementation:","i":28,"n":0.302},{"v":"A Docusaurus theme normally includes an index.js file where you hook up to the lifecycle methods, alongside with a theme/ directory of components. A typical Docusaurus theme folder looks like this:","i":27,"n":0.18},{"v":"To summarize:","i":26,"n":0.707},{"v":"Themes are designed to complete the build of your Docusaurus site and supply the components used by your site, plugins, and the themes themselves. So a typical theme implementation would look like a src/index.js file that hooks it up to the lifecycle methods. Most likely they would not use loadContent, which plugins would use. And it is typically accompanied by a src/theme directory full of components.","i":25,"n":0.123},{"v":"While themes share the exact same lifecycle methods with plugins, their implementations can look very different from those of plugins based on themes' designed objectives.","i":24,"n":0.2},{"v":"This theme provides a @theme/CodeBlock component that is powered by react-live. You can read more on interactive code editor documentation.","i":23,"n":0.224},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","i":22,"n":0.267},{"v":"This theme also adds search page available at /search path with OpenSearch support.","i":21,"n":0.277},{"v":"This theme provides a @theme/SearchBar component that integrates with Algolia DocSearch easily. Combined with @docusaurus/theme-classic, it provides a very easy search integration. You can read more on search documentation.","i":20,"n":0.186},{"v":"If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency.","i":19,"n":0.267},{"v":"The classic theme for Docusaurus. You can refer to classic theme configuration for more details on the configuration.","i":18,"n":0.236},{"v":"Note: You need to restart your webpack dev server in order for Docusaurus to know about the new component.","i":17,"n":0.229},{"v":"Although we highly discourage swizzling of all components, if you wish to do that, run:","i":16,"n":0.258},{"v":"This will copy the current <Footer /> component used by the theme to a src/theme/Footer directory under the root of your site, which is where Docusaurus will look for swizzled components. Docusaurus will then use swizzled component in place of the original one from the theme.","i":15,"n":0.147},{"v":"As an example, to swizzle the <Footer /> component in @docusaurus/theme-classic for your site, run:","i":14,"n":0.258},{"v":"To swizzle a component for a theme, run the following command in your doc site:","i":13,"n":0.258},{"v":"Docusaurus Themes' components are designed to be replaceable. To make it easier for you, we created a command for you to replace theme components called swizzle.","i":12,"n":0.196},{"v":"We would like to discourage swizzling of components until we've minimally reached a Beta stage. The components APIs have been changing rapidly and are likely to keep changing until we reach Beta. Stick with the default appearance for now if possible to save yourself some potential pain in future.","i":11,"n":0.143},{"v":"The content plugin remains the same and the only thing you need to change is the theme.","i":10,"n":0.243},{"v":"And if you want to use Bootstrap styling, you can swap out the theme with theme-blog-bootstrap (fictitious non-existing theme):","i":9,"n":0.229},{"v":"For example, a Docusaurus blog consists of a blog plugin and a blog theme.","i":8,"n":0.267},{"v":"Themes are for providing UI components to present the content. Most content plugins need to be paired with a theme in order to be actually useful. The UI is a separate layer from the data schema, so it makes it easy to swap out the themes for other designs (i.e., Bootstrap).","i":7,"n":0.14},{"v":"website/src/theme/Navbar.js takes precedence whenever @theme/Navbar is imported. This behavior is called component swizzling. In iOS, method swizzling is the process of changing the implementation of an existing selector (method). In the context of a website, component swizzling means providing an alternative component that takes precedence over the component provided by the theme.","i":6,"n":0.139},{"v":"Given the following structure","i":5,"n":0.5},{"v":"The alias @theme can refer to a few directories, in the following priority:","i":4,"n":0.277},{"v":"Users can use these components in their code by importing them using the @theme webpack alias:","i":3,"n":0.25},{"v":"Most of the time, theme is used to provide a set of React components, e.g. Navbar, Layout, Footer.","i":2,"n":0.236},{"v":"To use themes, specify the themes in your docusaurus.config.js. You may use multiple themes:","i":1,"n":0.267},{"v":"Like plugins, themes are designed to add functionality to your Docusaurus site. As a good rule of thumb, themes are mostly focused on client-side, where plugins are more focused on server-side functionalities. Themes are also designed to be replace-able with other themes.","i":0,"n":0.154}]}},{"i":26,"$":{"0":[{"v":"Versioning","i":0,"n":1}],"1":[{"v":"Recommended practices","i":3,"n":0.707},{"v":"Versions","i":2,"n":1},{"v":"Files","i":1,"n":1},{"v":"Directory structure","i":0,"n":0.707}],"2":[{"v":"Use absolute import within the docs","i":7,"n":0.408},{"v":"Keep the number of versions small","i":6,"n":0.408},{"v":"Version your documentation only when needed","i":5,"n":0.408},{"v":"Deleting an existing version","i":4,"n":0.5},{"v":"Updating an existing version","i":3,"n":0.5},{"v":"Linking files","i":2,"n":0.707},{"v":"Creating new files","i":1,"n":0.577},{"v":"Tagging a new version","i":0,"n":0.5}],"3":[{"v":"Don't use relative paths import within the docs. Because when we cut a version the paths no longer work (the nesting level is different, among other reasons). You can utilize the @site alias provided by docusaurus, that points to the website directory. Example:","i":16,"n":0.152},{"v":"As a good rule of thumb, try to keep the number of your versions below 10. It is very likely that you will have a lot of obsolete versioned documentation that nobody even reads anymore. For example, Jest is currently in version 24.9, and only maintains several latest documentation version with the lowest being 22.X. Keep it small 😊","i":15,"n":0.13},{"v":"Should you cut a new documentation version 1.0.1? You probably shouldn't. 1.0.1 and 1.0.0 docs shouldn't differ according to semver because there are no new features!. Cutting a new version for it will only just create unnecessary duplicated files.","i":14,"n":0.16},{"v":"For example, you are building a documentation for your npm package foo and you are currently in version 1.0.0. You then release a patch version for a minor bug fix and it's now 1.0.1.","i":13,"n":0.171},{"v":"Example:","i":12,"n":1},{"v":"You can delete/remove versions as well.","i":11,"n":0.408},{"v":"Example: When you change any file in versioned_docs/version-2.6/, it will only affect the docs for version 2.6.","i":10,"n":0.243},{"v":"You can update multiple docs versions at the same time because each directory in versioned_docs/ represents specific routes when published.","i":9,"n":0.224},{"v":"Each directory in versioned_docs/ will represent a documentation version.","i":8,"n":0.333},{"v":"Older docs","i":7,"n":0.707},{"v":"Master docs","i":6,"n":0.707},{"v":"When tagging a new version, the document versioning mechanism will:","i":5,"n":0.316},{"v":"The table below explains how a versioned file maps to its version and the generated URL.","i":4,"n":0.25},{"v":"To better understand how versioning works and see if it suits your needs, you can read on below.","i":3,"n":0.236},{"v":"Most of the time, you don't need versioning as it will just increase your build time, and introduce complexity to your codebase. Versioning is best suited for websites with high-traffic and rapid changes to documentation between versions. If your documentation rarely changes, don't add versioning to your documentation.","i":2,"n":0.144},{"v":"Think about it before starting to version your documentation - it can become difficult for contributors to help improve it!","i":1,"n":0.224},{"v":"You can use the version script to create a new documentation version based on the latest content in the docs directory. That specific set of documentation will then be preserved and accessible even as the documentation in the docs directory changes moving forward.","i":0,"n":0.152}]}}]}