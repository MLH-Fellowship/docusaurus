---
---
<svg width="1638" height="2617" xmlns="http://www.w3.org/2000/svg">defs.fontBrand{"{"}font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol'{"}"}.fontBold{"{"}font-weight:700{"}"}gOAuth2 with PKCE0. Registration1. Before authstatestatestateThe IDP will assign adeveloperuserâ€™s  deviceIdentity  Providerlogin  screenclient_idfor the appDeveloper registersredirect_uriwith the IDPRegisters client with  Identity Provider (IDP)Generatesand(e.g. myapp://auth)(e.g. 123)These are both random strings that are  kept in-memory on the deviceA newis generated by the IDP /authorize URL parameters:Deep link looks something like this:2. App starts the auth requestinvalid credentials3. IDP links back to the app with the auth code4. Token ExchangeGET /authorizeresponse_type = code client_id = 123 redirect_uri = myapp://auth scope = email state = code_challenge  = sha256( code_verifier ) code_challenge_method = sha256myapp://auth?code=codecodecode&state=DEEP LINK POST /tokenreturns the JWTgrant_type = authorization_code code = redirect_uri = myapp://auth client_id = 123 code_verifier =  code_verifierIDP checks thatsha256( code_verifier ) =  code_challengebefore returning the JWTcode_verifierA  U  T  H   F  L  O  WP K C E  S T E PP K C Efor each auth session/post data:Icons from Flaticon flaticon.com/authors/freepik</svg>
